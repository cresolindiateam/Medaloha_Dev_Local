{"ast":null,"code":"/*\n@license\nThe following license applies to all parts of this software except as\ndocumented below.\n\n    Copyright (c) 2019, Twilio, inc.\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are\n    met:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, this list of conditions and the following disclaimer.\n\n      2. Redistributions in binary form must reproduce the above copyright\n         notice, this list of conditions and the following disclaimer in\n         the documentation and/or other materials provided with the\n         distribution.\n\n      3. Neither the name of Twilio nor the names of its contributors may\n         be used to endorse or promote products derived from this software\n         without specific prior written permission.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n    \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThis software includes javascript-state-machine under the following license.\n\n    Copyright (c) 2012, 2013, 2014, 2015, Jake Gordon and contributors\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\nThis software includes loglevel under the following license.\n\n    Copyright (c) 2013 Tim Perry\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n\nThis software includes q under the following license.\n\n    Copyright 2009â€“2014 Kristopher Michael Kowal. All rights reserved.\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to\n    deal in the Software without restriction, including without limitation the\n    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n    sell copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n    IN THE SOFTWARE.\n\nThis software includes platform.js under the following license.\n\n    Copyright 2014 Benjamin Tan <https://d10.github.io/>\n    Copyright 2011-2015 John-David Dalton <http://allyoucanleet.com/>\n\n    Permission is hereby granted, free of charge, to any person obtaining\n    a copy of this software and associated documentation files (the\n    \"Software\"), to deal in the Software without restriction, including\n    without limitation the rights to use, copy, modify, merge, publish,\n    distribute, sublicense, and/or sell copies of the Software, and to\n    permit persons to whom the Software is furnished to do so, subject to\n    the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');\nvar _createClass = require('@babel/runtime/helpers/createClass');\nvar _assertThisInitialized = require('@babel/runtime/helpers/assertThisInitialized');\nvar _inherits = require('@babel/runtime/helpers/inherits');\nvar _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');\nvar _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');\nvar _defineProperty = require('@babel/runtime/helpers/defineProperty');\nvar _classCallCheck = require('@babel/runtime/helpers/classCallCheck');\nvar _regeneratorRuntime = require('@babel/runtime/regenerator');\nvar _typeof = require('@babel/runtime/helpers/typeof');\nvar loglevelLog = require('loglevel');\nvar iso8601Duration = require('iso8601-duration');\nvar declarativeTypeValidator = require('@twilio/declarative-type-validator');\nvar isEqual = require('lodash.isequal');\nvar replayEventEmitter = require('@twilio/replay-event-emitter');\nvar _slicedToArray = require('@babel/runtime/helpers/slicedToArray');\nvar operationRetrier = require('@twilio/operation-retrier');\nvar notifications = require('@twilio/notifications');\nvar twilsock = require('twilsock');\nvar twilioSync = require('twilio-sync');\nvar mcsClient = require('@twilio/mcs-client');\nvar _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');\nvar uuid = require('uuid');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n['default'] = e;\n  return Object.freeze(n);\n}\nvar _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);\nvar _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);\nvar _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);\nvar _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);\nvar _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);\nvar _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);\nvar _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);\nvar _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);\nvar _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);\nvar _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);\nvar loglevelLog__namespace = /*#__PURE__*/_interopNamespace(loglevelLog);\nvar isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);\nvar _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);\nvar _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof__default['default'](Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __metadata(metadataKey, metadataValue) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof__default['default'](Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction prepareLine(prefix, args) {\n  return [\"\".concat(new Date().toISOString(), \" Chat \").concat(prefix, \":\")].concat(Array.from(args));\n}\nvar log$b = loglevelLog__namespace.getLogger('twilio-chat'); // twilio-chat is used by Flex SDK. Please DO NOT change\n\nvar Logger = /*#__PURE__*/function () {\n  function Logger(prefix) {\n    _classCallCheck__default['default'](this, Logger);\n    _defineProperty__default['default'](this, \"prefix\", '');\n    this.prefix = prefix !== null && prefix !== undefined && prefix.length > 0 ? prefix + ' ' : '';\n  }\n  _createClass__default['default'](Logger, [{\n    key: \"setLevel\",\n    value: function setLevel(level) {\n      log$b.setLevel(level);\n    }\n  }, {\n    key: \"trace\",\n    value: function trace() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      log$b.trace.apply(null, prepareLine(this.prefix + 'T', args));\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      log$b.debug.apply(null, prepareLine(this.prefix + 'D', args));\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      log$b.info.apply(null, prepareLine(this.prefix + 'I', args));\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      log$b.warn.apply(null, prepareLine(this.prefix + 'W', args));\n    }\n  }, {\n    key: \"error\",\n    value: function error() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      log$b.error.apply(null, prepareLine(this.prefix + 'E', args));\n    }\n  }], [{\n    key: \"scope\",\n    value: function scope(prefix) {\n      return new Logger(prefix);\n    }\n  }, {\n    key: \"setLevel\",\n    value: function setLevel(level) {\n      log$b.setLevel(level);\n    }\n  }, {\n    key: \"trace\",\n    value: function trace() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      log$b.trace.apply(null, prepareLine('T', args));\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      log$b.debug.apply(null, prepareLine('D', args));\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n      log$b.info.apply(null, prepareLine('I', args));\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n      log$b.warn.apply(null, prepareLine('W', args));\n    }\n  }, {\n    key: \"error\",\n    value: function error() {\n      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n      log$b.error.apply(null, prepareLine('E', args));\n    }\n  }]);\n  return Logger;\n}();\nfunction ownKeys$4(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$4(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$4(Object(source), true).forEach(function (key) {\n        _defineProperty__default['default'](target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$4(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar TYPING_TIMEOUT = 5;\nvar HTTP_CACHE_LIFETIME = 'PT5S';\nvar CONSUMPTION_HORIZON_SENDING_INTERVAL = 'PT5S';\nvar USER_INFOS_TO_SUBSCRIBE = 100;\nvar MINIMUM_RETRY_DELAY = 1000;\nvar MAXIMUM_RETRY_DELAY = 4000;\nvar MAXIMUM_ATTEMPTS_COUNT = 3;\nvar RETRY_WHEN_THROTTLED = true;\nvar Configuration = function Configuration() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var configurationResponse = arguments.length > 1 ? arguments[1] : undefined;\n  var logger = arguments.length > 2 ? arguments[2] : undefined;\n  _classCallCheck__default['default'](this, Configuration);\n  _defineProperty__default['default'](this, \"typingIndicatorTimeoutDefault\", TYPING_TIMEOUT * 1000);\n  var constructorOptions = options.Chat || options.IPMessaging || options || {};\n  this.productId = constructorOptions.productId;\n  this.links = {\n    myConversations: configurationResponse.links.my_conversations,\n    conversations: configurationResponse.links.conversations,\n    users: configurationResponse.links.users,\n    currentUser: configurationResponse.links.current_user,\n    typing: configurationResponse.links.typing,\n    mediaService: configurationResponse.links.media_service,\n    messagesReceipts: configurationResponse.links.messages_receipts\n  };\n  this.typingIndicatorTimeoutOverride = constructorOptions.typingIndicatorTimeoutOverride;\n  this.backoffConfiguration = _objectSpread$4({\n    min: MINIMUM_RETRY_DELAY,\n    max: MAXIMUM_RETRY_DELAY,\n    maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT\n  }, constructorOptions.backoffConfigOverride);\n  this.retryWhenThrottled = constructorOptions.retryWhenThrottledOverride !== undefined ? constructorOptions.retryWhenThrottledOverride : RETRY_WHEN_THROTTLED;\n  this.userInfosToSubscribe = constructorOptions.userInfosToSubscribeOverride || configurationResponse.options.user_infos_to_subscribe || USER_INFOS_TO_SUBSCRIBE;\n  this.reachabilityEnabled = configurationResponse.options.reachability_enabled;\n  this.userIdentity = configurationResponse.identity;\n  this.userInfo = configurationResponse.sync_objects.my_user_info;\n  this.myConversations = configurationResponse.sync_objects.my_conversations;\n  var httpCacheInterval = constructorOptions.httpCacheIntervalOverride || configurationResponse.options.http_cache_interval || HTTP_CACHE_LIFETIME;\n  try {\n    this.httpCacheInterval = iso8601Duration.toSeconds(iso8601Duration.parse(httpCacheInterval));\n  } catch (_unused) {\n    logger.error(\"Failed to parse http cache interval \".concat(httpCacheInterval, \", using default value \").concat(HTTP_CACHE_LIFETIME));\n    this.httpCacheInterval = iso8601Duration.toSeconds(iso8601Duration.parse(HTTP_CACHE_LIFETIME));\n  }\n  var consumptionReportInterval = constructorOptions.consumptionReportIntervalOverride || configurationResponse.options.consumption_report_interval || CONSUMPTION_HORIZON_SENDING_INTERVAL;\n  try {\n    this.consumptionReportInterval = iso8601Duration.toSeconds(iso8601Duration.parse(consumptionReportInterval));\n  } catch (_unused2) {\n    logger.error(\"Failed to parse consumption report interval \".concat(consumptionReportInterval, \", using default value \").concat(CONSUMPTION_HORIZON_SENDING_INTERVAL));\n    this.consumptionReportInterval = iso8601Duration.toSeconds(iso8601Duration.parse(CONSUMPTION_HORIZON_SENDING_INTERVAL));\n  }\n};\n\n/**\n * Deep-clone an object. Note that this does not work on object containing\n * functions.\n * @param {object} obj - the object to deep-clone\n * @returns {object}\n */\nfunction deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\nfunction parseToNumber(value) {\n  if (typeof value !== 'undefined' && !isNaN(Number(value))) {\n    return Number(value);\n  }\n  return null;\n} // timeString cannot be typed `string` because in member.ts\n// call to parseTime(data.lastConsumptionTimestamp) uses number not a string for timestamp.\n\nfunction parseTime$1(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\nfunction parseAttributes(rawAttributes, warningMessage, log) {\n  var attributes = {};\n  if (rawAttributes) {\n    try {\n      attributes = JSON.parse(rawAttributes);\n    } catch (e) {\n      log.warn(warningMessage, e);\n    }\n  }\n  return attributes;\n}\n/**\n * Construct URI with query parameters\n */\n\nvar UriBuilder = /*#__PURE__*/function () {\n  function UriBuilder(base) {\n    _classCallCheck__default['default'](this, UriBuilder);\n    this.base = base.replace(/\\/$/, '');\n    this.args = [];\n    this.paths = [];\n  }\n  _createClass__default['default'](UriBuilder, [{\n    key: \"arg\",\n    value: function arg(name, value) {\n      if (typeof value !== 'undefined') {\n        this.args.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));\n      }\n      return this;\n    }\n  }, {\n    key: \"path\",\n    value: function path(name) {\n      this.paths.push(encodeURIComponent(name));\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var result = this.base;\n      if (this.paths.length) {\n        result += '/' + this.paths.join('/');\n      }\n      if (this.args.length) {\n        result += '?' + this.args.join('&');\n      }\n      return result;\n    }\n  }]);\n  return UriBuilder;\n}();\nfunction _createSuper$8(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$8();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf__default['default'](Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf__default['default'](this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn__default['default'](this, result);\n  };\n}\nfunction _isNativeReflectConstruct$8() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar log$a = Logger.scope('User');\n/**\n * Extended user information.\n * Note that `isOnline` and `isNotifiable` properties are eligible\n * for use only if the reachability function is enabled.\n * You may check if it is enabled by reading the value of {@link Client.reachabilityEnabled}.\n */\n\nvar User = /*#__PURE__*/function (_ReplayEventEmitter) {\n  _inherits__default['default'](User, _ReplayEventEmitter);\n  var _super = _createSuper$8(User);\n\n  /**\n   * @internal\n   */\n  function User(identity, entityName, configuration, services) {\n    var _this;\n    _classCallCheck__default['default'](this, User);\n    _this = _super.call(this);\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"promiseToFetch\", null);\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"updated\", 'updated');\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"userSubscribed\", 'userSubscribed');\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"userUnsubscribed\", 'userUnsubscribed');\n    _this.services = services;\n    _this.subscribed = 'initializing';\n    _this.setMaxListeners(0);\n    _this.state = {\n      identity: identity,\n      entityName: entityName,\n      friendlyName: null,\n      attributes: {},\n      online: null,\n      notifiable: null\n    };\n    _this._initializationPromise = new Promise(function (resolve) {\n      _this._resolveInitializationPromise = resolve;\n    });\n    if (configuration !== null) {\n      _this._resolveInitialization(configuration, identity, entityName, false);\n    }\n    return _this;\n  }\n  /**\n   * Fired when the properties or the reachability status of the message have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link User} `user` - the user in question\n   *     * {@link UserUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n\n  _createClass__default['default'](User, [{\n    key: \"identity\",\n    get:\n    /**\n     * User identity.\n     */\n    function get() {\n      return this.state.identity;\n    },\n    set: function set(identity) {\n      this.state.identity = identity;\n    }\n  }, {\n    key: \"entityName\",\n    set: function set(name) {\n      this.state.entityName = name;\n    }\n    /**\n     * Custom attributes of the user.\n     */\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return this.state.attributes;\n    }\n    /**\n     * Friendly name of the user, null if not set.\n     */\n  }, {\n    key: \"friendlyName\",\n    get: function get() {\n      return this.state.friendlyName;\n    }\n    /**\n     * Status of the real-time conversation connection of the user.\n     */\n  }, {\n    key: \"online\",\n    get: function get() {\n      return this.state.online;\n    }\n    /**\n     * User push notification registration status.\n     */\n  }, {\n    key: \"notifiable\",\n    get: function get() {\n      return this.state.notifiable;\n    }\n    /**\n     * True if this user is receiving real-time status updates.\n     */\n  }, {\n    key: \"isSubscribed\",\n    get: function get() {\n      return this.subscribed == 'subscribed';\n    } // Handles service updates\n  }, {\n    key: \"_update\",\n    value: function () {\n      var _update2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(key, value) {\n        var updateReasons, updateAttributes;\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._initializationPromise;\n              case 2:\n                updateReasons = [];\n                log$a.debug('User for', this.state.identity, 'updated:', key, value);\n                _context.t0 = key;\n                _context.next = _context.t0 === 'friendlyName' ? 7 : _context.t0 === 'attributes' ? 9 : _context.t0 === 'reachability' ? 12 : 15;\n                break;\n              case 7:\n                if (this.state.friendlyName !== value.value) {\n                  updateReasons.push('friendlyName');\n                  this.state.friendlyName = value.value;\n                }\n                return _context.abrupt(\"break\", 16);\n              case 9:\n                updateAttributes = parseAttributes(value.value, \"Retrieved malformed attributes from the server for user: \".concat(this.state.identity), log$a);\n                if (!isEqual__default['default'](this.state.attributes, updateAttributes)) {\n                  this.state.attributes = updateAttributes;\n                  updateReasons.push('attributes');\n                }\n                return _context.abrupt(\"break\", 16);\n              case 12:\n                if (this.state.online !== value.online) {\n                  this.state.online = value.online;\n                  updateReasons.push('online');\n                }\n                if (this.state.notifiable !== value.notifiable) {\n                  this.state.notifiable = value.notifiable;\n                  updateReasons.push('notifiable');\n                }\n                return _context.abrupt(\"break\", 16);\n              case 15:\n                return _context.abrupt(\"return\");\n              case 16:\n                if (updateReasons.length > 0) {\n                  this.emit('updated', {\n                    user: this,\n                    updateReasons: updateReasons\n                  });\n                }\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function _update(_x, _x2) {\n        return _update2.apply(this, arguments);\n      }\n      return _update;\n    }() // Fetch reachability info\n  }, {\n    key: \"_updateReachabilityInfo\",\n    value: function () {\n      var _updateReachabilityInfo2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(map, update) {\n        var _this2 = this;\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._initializationPromise;\n              case 2:\n                if (this.configuration.reachabilityEnabled) {\n                  _context2.next = 4;\n                  break;\n                }\n                return _context2.abrupt(\"return\");\n              case 4:\n                return _context2.abrupt(\"return\", map.get('reachability').then(update).catch(function (err) {\n                  log$a.warn('Failed to get reachability info for ', _this2.state.identity, err);\n                }));\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function _updateReachabilityInfo(_x3, _x4) {\n        return _updateReachabilityInfo2.apply(this, arguments);\n      }\n      return _updateReachabilityInfo;\n    }() // Fetch user\n  }, {\n    key: \"_fetch\",\n    value: function () {\n      var _fetch2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {\n        var _this3 = this;\n        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._initializationPromise;\n              case 2:\n                if (this.state.entityName) {\n                  _context3.next = 4;\n                  break;\n                }\n                return _context3.abrupt(\"return\", this);\n              case 4:\n                this.promiseToFetch = this.services.syncClient.map({\n                  id: this.state.entityName,\n                  mode: 'open_existing',\n                  includeItems: true\n                }).then(function (map) {\n                  _this3.entity = map;\n                  map.on('itemUpdated', function (args) {\n                    log$a.debug(\"\".concat(_this3.state.entityName, \" (\").concat(_this3.state.identity, \") itemUpdated: \").concat(args.item.key));\n                    return _this3._update(args.item.key, args.item.data);\n                  });\n                  return Promise.all([map.get('friendlyName').then(function (item) {\n                    return _this3._update(item.key, item.data);\n                  }), map.get('attributes').then(function (item) {\n                    return _this3._update(item.key, item.data);\n                  }), _this3._updateReachabilityInfo(map, function (item) {\n                    return _this3._update(item.key, item.data);\n                  })]);\n                }).then(function () {\n                  log$a.debug('Fetched for', _this3.identity);\n                  _this3.subscribed = 'subscribed';\n                  _this3.emit('userSubscribed', _this3);\n                  return _this3;\n                }).catch(function (err) {\n                  _this3.promiseToFetch = null;\n                  throw err;\n                });\n                return _context3.abrupt(\"return\", this.promiseToFetch);\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function _fetch() {\n        return _fetch2.apply(this, arguments);\n      }\n      return _fetch;\n    }() // Not private because it is accessed from Client constructor.\n  }, {\n    key: \"_ensureFetched\",\n    value: function () {\n      var _ensureFetched2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._initializationPromise;\n              case 2:\n                return _context4.abrupt(\"return\", this.promiseToFetch || this._fetch());\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function _ensureFetched() {\n        return _ensureFetched2.apply(this, arguments);\n      }\n      return _ensureFetched;\n    }()\n    /**\n     * Edit user attributes.\n     * @param attributes New attributes.\n     */\n  }, {\n    key: \"updateAttributes\",\n    value: function () {\n      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(attributes) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._initializationPromise;\n              case 2:\n                if (!(this.subscribed == 'unsubscribed')) {\n                  _context5.next = 4;\n                  break;\n                }\n                throw new Error('Can\\'t modify unsubscribed object');\n              case 4:\n                _context5.next = 6;\n                return this.services.commandExecutor.mutateResource('post', this.links.self, {\n                  attributes: JSON.stringify(attributes)\n                });\n              case 6:\n                return _context5.abrupt(\"return\", this);\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function updateAttributes(_x5) {\n        return _updateAttributes.apply(this, arguments);\n      }\n      return updateAttributes;\n    }()\n    /**\n     * Update the friendly name of the user.\n     * @param friendlyName New friendly name.\n     */\n  }, {\n    key: \"updateFriendlyName\",\n    value: function () {\n      var _updateFriendlyName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(friendlyName) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._initializationPromise;\n              case 2:\n                if (!(this.subscribed == 'unsubscribed')) {\n                  _context6.next = 4;\n                  break;\n                }\n                throw new Error('Can\\'t modify unsubscribed object');\n              case 4:\n                _context6.next = 6;\n                return this.services.commandExecutor.mutateResource('post', this.links.self, {\n                  friendly_name: friendlyName\n                });\n              case 6:\n                return _context6.abrupt(\"return\", this);\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function updateFriendlyName(_x6) {\n        return _updateFriendlyName.apply(this, arguments);\n      }\n      return updateFriendlyName;\n    }()\n    /**\n     * Remove the user from the subscription list.\n     * @return A promise of completion.\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._initializationPromise;\n              case 2:\n                if (!this.promiseToFetch) {\n                  _context7.next = 9;\n                  break;\n                }\n                _context7.next = 5;\n                return this.promiseToFetch;\n              case 5:\n                this.entity.close();\n                this.promiseToFetch = null;\n                this.subscribed = 'unsubscribed';\n                this.emit('userUnsubscribed', this);\n              case 9:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function unsubscribe() {\n        return _unsubscribe.apply(this, arguments);\n      }\n      return unsubscribe;\n    }()\n  }, {\n    key: \"_resolveInitialization\",\n    value: function _resolveInitialization(configuration, identity, entityName, emitUpdated) {\n      this.configuration = configuration;\n      this.identity = identity;\n      this.entityName = entityName;\n      this.links = {\n        self: \"\".concat(this.configuration.links.users, \"/\").concat(this.identity)\n      };\n      this._resolveInitializationPromise();\n      if (emitUpdated) {\n        this.emit('updated', {\n          user: this,\n          updateReasons: ['friendlyName', 'attributes', 'online', 'notifiable']\n        });\n      }\n    }\n  }]);\n  return User;\n}(replayEventEmitter.ReplayEventEmitter);\n__decorate([declarativeTypeValidator.validateTypesAsync(['string', 'number', 'boolean', 'object', declarativeTypeValidator.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Promise)], User.prototype, \"updateAttributes\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync('string'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Promise)], User.prototype, \"updateFriendlyName\", null);\n\n/**\n * Pagination helper class.\n */\nvar RestPaginator = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function RestPaginator(items, source, prevToken, nextToken) {\n    _classCallCheck__default['default'](this, RestPaginator);\n    this.state = {\n      prevToken: prevToken,\n      nextToken: nextToken,\n      source: source,\n      items: items\n    };\n  }\n  /**\n   * Request the next page. Does not modify the existing object.\n   */\n\n  _createClass__default['default'](RestPaginator, [{\n    key: \"hasNextPage\",\n    get:\n    /**\n     * Indicates the existence of the next page.\n     */\n    function get() {\n      return !!this.state.nextToken;\n    }\n    /**\n     * Indicates the existence of the previous page\n     */\n  }, {\n    key: \"hasPrevPage\",\n    get: function get() {\n      return !!this.state.prevToken;\n    }\n    /**\n     * Array of elements on the current page.\n     */\n  }, {\n    key: \"items\",\n    get: function get() {\n      return this.state.items;\n    }\n  }, {\n    key: \"nextPage\",\n    value: function () {\n      var _nextPage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.hasNextPage ? this.state.source(this.state.nextToken) : Promise.reject(new Error('No next page')));\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function nextPage() {\n        return _nextPage.apply(this, arguments);\n      }\n      return nextPage;\n    }()\n    /**\n     * Request the previous page. Does not modify the existing object.\n     */\n  }, {\n    key: \"prevPage\",\n    value: function () {\n      var _prevPage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.hasPrevPage ? this.state.source(this.state.prevToken) : Promise.reject(new Error('No previous page')));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function prevPage() {\n        return _prevPage.apply(this, arguments);\n      }\n      return prevPage;\n    }()\n  }]);\n  return RestPaginator;\n}();\nvar log$9 = Logger.scope('ChannelDescriptor');\n/**\n * Contains channel information.\n * Unlike {@link Channel}, this information won't be updated in realtime.\n * To have fresh data, user should query for channel descriptors again.\n */\n\nvar ChannelDescriptor = /*#__PURE__*/function () {\n  /**\n   * Unique system identifier of the channel.\n   */\n\n  /**\n   * Custom attributes of the channel.\n   */\n\n  /**\n   * Unique name of the channel.\n   */\n\n  /**\n   * Name of the channel.\n   */\n\n  /**\n   * Custom attributes of the channel.\n   */\n\n  /**\n   * Identity of the user that created this channel.\n   */\n\n  /**\n   * Date this channel was created on.\n   */\n\n  /**\n   * Date this channel was last updated on.\n   */\n\n  /**\n   * Amount of messages in the channel.\n   */\n\n  /**\n   * Amount of members in the channel.\n   */\n\n  /**\n   * Index of the last message the user has read in this channel.\n   */\n\n  /**\n   * Delivery status of the channel.\n   */\n\n  /**\n   * MemberType of the channel.\n   */\n\n  /**\n   * Signifies whether the channel is private.\n   */\n\n  /**\n   * User notification level for this channel.\n   */\n\n  /**\n   * @internal\n   */\n  function ChannelDescriptor(client, descriptor) {\n    _classCallCheck__default['default'](this, ChannelDescriptor);\n    this.client = client;\n    this.descriptor = descriptor;\n    this.sid = descriptor.sid || descriptor.conversation_sid;\n    this.channel = \"\".concat(this.sid, \".channel\");\n    this.uniqueName = descriptor.unique_name;\n    this.friendlyName = descriptor.friendly_name;\n    this.attributes = parseAttributes(descriptor.attributes, 'Failed to parse channel attributes', log$9);\n    this.createdBy = descriptor.created_by;\n    this.dateCreated = parseTime$1(descriptor.date_created);\n    this.dateUpdated = parseTime$1(descriptor.date_updated);\n    this.messagesCount = descriptor.messages_count;\n    this.membersCount = descriptor.participants_count;\n    this.type = descriptor.type;\n    this.isPrivate = descriptor.type === 'private';\n    this.lastConsumedMessageIndex = descriptor.last_consumed_message_index;\n    this.notificationLevel = descriptor.notification_level || undefined;\n    this.status = descriptor.status || 'unknown';\n  }\n  /**\n   * Get the channel object from the descriptor.\n   */\n\n  _createClass__default['default'](ChannelDescriptor, [{\n    key: \"getChannel\",\n    value: function getChannel() {\n      return this.client.getChannelBySid(this.sid);\n    }\n  }]);\n  return ChannelDescriptor;\n}();\n\n/**\n * Public channels collection\n * It's a cassandra-backed pull-based collection\n */\n\nvar PublicChannels = /*#__PURE__*/function () {\n  function PublicChannels(client, services, url) {\n    _classCallCheck__default['default'](this, PublicChannels);\n    this.client = client;\n    this.services = services;\n    this.url = url;\n  }\n  _createClass__default['default'](PublicChannels, [{\n    key: \"getChannels\",\n    value: function () {\n      var _getChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {\n        var _this = this;\n        var args,\n          url,\n          response,\n          _args = arguments;\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                args = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                url = new UriBuilder(this.url).arg('PageToken', args.pageToken).build();\n                _context.next = 4;\n                return this.services.network.get(url);\n              case 4:\n                response = _context.sent;\n                return _context.abrupt(\"return\", new RestPaginator(response.body.conversations.map(function (x) {\n                  return new ChannelDescriptor(_this.client, x);\n                }), function (pageToken) {\n                  return _this.getChannels({\n                    pageToken: pageToken\n                  });\n                }, response.body.meta.previous_token, response.body.meta.next_token));\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getChannels() {\n        return _getChannels.apply(this, arguments);\n      }\n      return getChannels;\n    }()\n  }, {\n    key: \"getChannelBySid\",\n    value: function () {\n      var _getChannelBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(sid) {\n        var url, response;\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                url = new UriBuilder(this.url).path(sid).build();\n                _context2.next = 3;\n                return this.services.network.get(url);\n              case 3:\n                response = _context2.sent;\n                return _context2.abrupt(\"return\", new ChannelDescriptor(this.client, response.body));\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getChannelBySid(_x) {\n        return _getChannelBySid.apply(this, arguments);\n      }\n      return getChannelBySid;\n    }()\n  }, {\n    key: \"getChannelByUniqueName\",\n    value: function () {\n      var _getChannelByUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(uniqueName) {\n        var url, response;\n        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                url = new UriBuilder(this.url).path(uniqueName).build();\n                _context3.next = 3;\n                return this.services.network.get(url);\n              case 3:\n                response = _context3.sent;\n                return _context3.abrupt(\"return\", new ChannelDescriptor(this.client, response.body));\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function getChannelByUniqueName(_x2) {\n        return _getChannelByUniqueName.apply(this, arguments);\n      }\n      return getChannelByUniqueName;\n    }()\n  }]);\n  return PublicChannels;\n}();\nfunction _createForOfIteratorHelper$2(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$2(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$2(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);\n}\nfunction _arrayLikeToArray$2(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nvar Network = /*#__PURE__*/function () {\n  function Network(configuration, services) {\n    _classCallCheck__default['default'](this, Network);\n    this.configuration = configuration;\n    this.services = services;\n    this.cache = new Map();\n    this.cacheLifetime = this.configuration.httpCacheInterval * 100;\n    this.cleanupCache();\n  }\n  _createClass__default['default'](Network, [{\n    key: \"isExpired\",\n    value: function isExpired(timestamp) {\n      return !this.cacheLifetime || Date.now() - timestamp > this.cacheLifetime;\n    }\n  }, {\n    key: \"cleanupCache\",\n    value: function cleanupCache() {\n      var _iterator = _createForOfIteratorHelper$2(this.cache),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray__default['default'](_step.value, 2),\n            k = _step$value[0],\n            v = _step$value[1];\n          if (this.isExpired(v.timestamp)) {\n            this.cache.delete(k);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (this.cache.size === 0) {\n        clearInterval(this.timer);\n      }\n    }\n  }, {\n    key: \"pokeTimer\",\n    value: function pokeTimer() {\n      var _this = this;\n      this.timer = this.timer || setInterval(function () {\n        return _this.cleanupCache();\n      }, this.cacheLifetime * 2);\n    }\n  }, {\n    key: \"executeWithRetry\",\n    value: function () {\n      var _executeWithRetry = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(request) {\n        var _this2 = this;\n        var retryWhenThrottled,\n          _args = arguments;\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                retryWhenThrottled = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n                return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var codesToRetryOn = [502, 503, 504];\n                  if (retryWhenThrottled) {\n                    codesToRetryOn.push(429);\n                  }\n                  var retrier = new operationRetrier.Retrier(_this2.configuration.backoffConfiguration);\n                  retrier.on('attempt', function () {\n                    request().then(function (result) {\n                      return retrier.succeeded(result);\n                    }).catch(function (err) {\n                      if (codesToRetryOn.indexOf(err.status) > -1) {\n                        retrier.failed(err);\n                      } else if (err.message === 'Twilsock disconnected') {\n                        // Ugly hack. We must make a proper exceptions for twilsock\n                        retrier.failed(err);\n                      } else {\n                        // Fatal error\n                        retrier.removeAllListeners();\n                        retrier.cancel();\n                        reject(err);\n                      }\n                    });\n                  });\n                  retrier.on('succeeded', function (result) {\n                    resolve(result);\n                  });\n                  retrier.on('cancelled', function (err) {\n                    return reject(err);\n                  });\n                  retrier.on('failed', function (err) {\n                    return reject(err);\n                  });\n                  retrier.start();\n                }));\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      function executeWithRetry(_x) {\n        return _executeWithRetry.apply(this, arguments);\n      }\n      return executeWithRetry;\n    }()\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(url) {\n        var _this3 = this;\n        var cacheEntry, headers, response;\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cacheEntry = this.cache.get(url);\n                if (!(cacheEntry && !this.isExpired(cacheEntry.timestamp))) {\n                  _context2.next = 3;\n                  break;\n                }\n                return _context2.abrupt(\"return\", cacheEntry.response);\n              case 3:\n                headers = {};\n                _context2.next = 6;\n                return this.executeWithRetry(function () {\n                  return _this3.services.transport.get(url, headers, _this3.configuration.productId);\n                }, this.configuration.retryWhenThrottled);\n              case 6:\n                response = _context2.sent;\n                this.cache.set(url, {\n                  response: response,\n                  timestamp: Date.now()\n                });\n                this.pokeTimer();\n                return _context2.abrupt(\"return\", response);\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function get(_x2) {\n        return _get.apply(this, arguments);\n      }\n      return get;\n    }()\n  }]);\n  return Network;\n}();\nvar NotificationTypes = function NotificationTypes() {\n  _classCallCheck__default['default'](this, NotificationTypes);\n};\n_defineProperty__default['default'](NotificationTypes, \"TYPING_INDICATOR\", 'twilio.ipmsg.typing_indicator');\n_defineProperty__default['default'](NotificationTypes, \"NEW_MESSAGE\", 'twilio.channel.new_message');\n_defineProperty__default['default'](NotificationTypes, \"ADDED_TO_CHANNEL\", 'twilio.channel.added_to_channel');\n_defineProperty__default['default'](NotificationTypes, \"INVITED_TO_CHANNEL\", 'twilio.channel.invited_to_channel');\n_defineProperty__default['default'](NotificationTypes, \"REMOVED_FROM_CHANNEL\", 'twilio.channel.removed_from_channel');\n_defineProperty__default['default'](NotificationTypes, \"CONSUMPTION_UPDATE\", 'twilio.channel.consumption_update');\nfunction _createSuper$7(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$7();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf__default['default'](Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf__default['default'](this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn__default['default'](this, result);\n  };\n}\nfunction _isNativeReflectConstruct$7() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar log$8 = Logger.scope('Member');\n/**\n * A member represents a remote client in a channel.\n */\n\nvar Member = /*#__PURE__*/function (_ReplayEventEmitter) {\n  _inherits__default['default'](Member, _ReplayEventEmitter);\n  var _super = _createSuper$7(Member);\n\n  /**\n   * Channel that the remote client is a member of.\n   */\n\n  /**\n   * @internal\n   */\n  function Member(data, sid, channel, links, services) {\n    var _this;\n    _classCallCheck__default['default'](this, Member);\n    _this = _super.call(this);\n    _this.channel = channel;\n    _this.links = links;\n    _this.services = services;\n    _this.state = {\n      attributes: parseAttributes(data.attributes, 'Retrieved malformed attributes from the server for member: ' + sid, log$8),\n      dateCreated: data.dateCreated ? parseTime$1(data.dateCreated) : null,\n      dateUpdated: data.dateCreated ? parseTime$1(data.dateUpdated) : null,\n      sid: sid,\n      typingTimeout: null,\n      isTyping: false,\n      identity: data.identity || null,\n      roleSid: data.roleSid || null,\n      lastConsumedMessageIndex: Number.isInteger(data.lastConsumedMessageIndex) ? data.lastConsumedMessageIndex : null,\n      lastConsumptionTimestamp: data.lastConsumptionTimestamp ? parseTime$1(data.lastConsumptionTimestamp) : null,\n      type: data.type || 'chat',\n      userInfo: data.userInfo\n    };\n    if (!data.identity && !data.type) {\n      throw new Error('Received invalid Member object from server: Missing identity or type of Member.');\n    }\n    return _this;\n  }\n  /**\n   * Fired when the member has started typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n\n  _createClass__default['default'](Member, [{\n    key: \"sid\",\n    get:\n    /**\n     * The server-assigned unique identifier for the member.\n     */\n    function get() {\n      return this.state.sid;\n    }\n    /**\n     * Custom attributes of the member.\n     */\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return this.state.attributes;\n    }\n    /**\n     * Date this member was created on.\n     */\n  }, {\n    key: \"dateCreated\",\n    get: function get() {\n      return this.state.dateCreated;\n    }\n    /**\n     * Date this member was last updated on.\n     */\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.state.dateUpdated;\n    }\n    /**\n     * Identity of the member.\n     */\n  }, {\n    key: \"identity\",\n    get: function get() {\n      return this.state.identity;\n    }\n    /**\n     * Indicates whether the member is currently typing.\n     */\n  }, {\n    key: \"isTyping\",\n    get: function get() {\n      return this.state.isTyping;\n    }\n    /**\n     * The index of the last consumed message by the member.\n     * Note that retrieving messages on a client endpoint does not mean that messages are read,\n     * please consider reading about the [Read Horizon feature](https://www.twilio.com/docs/api/chat/guides/consumption-horizon)\n     * to find out about the proper way to mark messages as read.\n     */\n  }, {\n    key: \"lastConsumedMessageIndex\",\n    get: function get() {\n      return this.state.lastConsumedMessageIndex;\n    }\n    /**\n     * Date of the most recent consumption horizon update.\n     */\n  }, {\n    key: \"lastConsumptionTimestamp\",\n    get: function get() {\n      return this.state.lastConsumptionTimestamp;\n    }\n  }, {\n    key: \"roleSid\",\n    get: function get() {\n      return this.state.roleSid;\n    }\n    /**\n     * Message type of the member.\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.state.type;\n    }\n    /**\n     * Internal method used to start or reset the typing indicator timeout (with event emitting).\n     * @internal\n     */\n  }, {\n    key: \"_startTyping\",\n    value: function _startTyping(timeout) {\n      var _this2 = this;\n      clearTimeout(this.state.typingTimeout);\n      this.state.isTyping = true;\n      this.emit('typingStarted', this);\n      this.channel.emit('typingStarted', this);\n      this.state.typingTimeout = setTimeout(function () {\n        return _this2._endTyping();\n      }, timeout);\n      return this;\n    }\n    /**\n     * Internal method function used to stop typing indicator timeout (with event emitting).\n     * @internal\n     */\n  }, {\n    key: \"_endTyping\",\n    value: function _endTyping() {\n      if (!this.state.typingTimeout) {\n        return;\n      }\n      this.state.isTyping = false;\n      this.emit('typingEnded', this);\n      this.channel.emit('typingEnded', this);\n      clearInterval(this.state.typingTimeout);\n      this.state.typingTimeout = null;\n    }\n    /**\n     * Internal method function used update local object's property roleSid with a new value.\n     * @internal\n     */\n  }, {\n    key: \"_update\",\n    value: function _update(data) {\n      var _this$state$dateUpdat, _this$state$dateCreat, _this$state$lastConsu;\n      var updateReasons = [];\n      var updateAttributes = parseAttributes(data.attributes, 'Retrieved malformed attributes from the server for member: ' + this.state.sid, log$8);\n      if (data.attributes && !isEqual__default['default'](this.state.attributes, updateAttributes)) {\n        this.state.attributes = updateAttributes;\n        updateReasons.push('attributes');\n      }\n      var updatedDateUpdated = parseTime$1(data.dateUpdated);\n      if (data.dateUpdated && (updatedDateUpdated === null || updatedDateUpdated === void 0 ? void 0 : updatedDateUpdated.getTime()) !== ((_this$state$dateUpdat = this.state.dateUpdated) === null || _this$state$dateUpdat === void 0 ? void 0 : _this$state$dateUpdat.getTime())) {\n        this.state.dateUpdated = updatedDateUpdated;\n        updateReasons.push('dateUpdated');\n      }\n      var updatedDateCreated = parseTime$1(data.dateCreated);\n      if (data.dateCreated && (updatedDateCreated === null || updatedDateCreated === void 0 ? void 0 : updatedDateCreated.getTime()) !== ((_this$state$dateCreat = this.state.dateCreated) === null || _this$state$dateCreat === void 0 ? void 0 : _this$state$dateCreat.getTime())) {\n        this.state.dateCreated = updatedDateCreated;\n        updateReasons.push('dateCreated');\n      }\n      if (data.roleSid && this.state.roleSid !== data.roleSid) {\n        this.state.roleSid = data.roleSid;\n        updateReasons.push('roleSid');\n      }\n      var indexIsValid = Number.isInteger(data.lastConsumedMessageIndex) || data.lastConsumedMessageIndex === null;\n      if (indexIsValid && this.state.lastConsumedMessageIndex !== data.lastConsumedMessageIndex) {\n        this.state.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n        updateReasons.push('lastConsumedMessageIndex');\n      }\n      var updatedTimestamp = parseTime$1(data.lastConsumptionTimestamp);\n      if (data.lastConsumptionTimestamp && (updatedTimestamp === null || updatedTimestamp === void 0 ? void 0 : updatedTimestamp.getTime()) !== ((_this$state$lastConsu = this.state.lastConsumptionTimestamp) === null || _this$state$lastConsu === void 0 ? void 0 : _this$state$lastConsu.getTime())) {\n        this.state.lastConsumptionTimestamp = updatedTimestamp;\n        updateReasons.push('lastConsumptionTimestamp');\n      }\n      if (updateReasons.length > 0) {\n        this.emit('updated', {\n          member: this,\n          updateReasons: updateReasons\n        });\n      }\n      return this;\n    }\n    /**\n     * Get the user descriptor for this member. Supported only for members of type `chat`.\n     */\n  }, {\n    key: \"getUserDescriptor\",\n    value: function () {\n      var _getUserDescriptor = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.type != 'chat')) {\n                  _context.next = 2;\n                  break;\n                }\n                throw new Error('Getting User Descriptor is not supported for this Member type: ' + this.type);\n              case 2:\n                return _context.abrupt(\"return\", this.services.users.getUserDescriptor(this.state.identity));\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getUserDescriptor() {\n        return _getUserDescriptor.apply(this, arguments);\n      }\n      return getUserDescriptor;\n    }()\n    /**\n     * Get the user for this member and subscribes to it. Supported only for members of type `chat`.\n     */\n  }, {\n    key: \"getUser\",\n    value: function () {\n      var _getUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.type != 'chat')) {\n                  _context2.next = 2;\n                  break;\n                }\n                throw new Error('Getting User is not supported for this Member type: ' + this.type);\n              case 2:\n                return _context2.abrupt(\"return\", this.services.users.getUser(this.state.identity, this.state.userInfo));\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getUser() {\n        return _getUser.apply(this, arguments);\n      }\n      return getUser;\n    }()\n    /**\n     * Remove the member from the channel.\n     */\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.channel.removeMember(this));\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function remove() {\n        return _remove.apply(this, arguments);\n      }\n      return remove;\n    }()\n    /**\n     * Update the attributes of the member.\n     * @param attributes New attributes.\n     */\n  }, {\n    key: \"updateAttributes\",\n    value: function () {\n      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(attributes) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.services.commandExecutor.mutateResource('post', this.links.self, {\n                  attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n                });\n              case 2:\n                return _context4.abrupt(\"return\", this);\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function updateAttributes(_x) {\n        return _updateAttributes.apply(this, arguments);\n      }\n      return updateAttributes;\n    }()\n  }]);\n  return Member;\n}(replayEventEmitter.ReplayEventEmitter);\n_defineProperty__default['default'](Member, \"typingStarted\", 'typingStarted');\n_defineProperty__default['default'](Member, \"typingEnded\", 'typingEnded');\n_defineProperty__default['default'](Member, \"updated\", 'updated');\n__decorate([declarativeTypeValidator.validateTypesAsync(['string', 'number', 'boolean', 'object', declarativeTypeValidator.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Promise)], Member.prototype, \"updateAttributes\", null);\nfunction _createSuper$6(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$6();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf__default['default'](Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf__default['default'](this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn__default['default'](this, result);\n  };\n}\nfunction _isNativeReflectConstruct$6() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar log$7 = Logger.scope('Members');\n/**\n * @classdesc Represents the collection of members for the channel\n * @fires Members#memberJoined\n * @fires Members#memberLeft\n * @fires Members#memberUpdated\n */\n\nvar Members = /*#__PURE__*/function (_ReplayEventEmitter) {\n  _inherits__default['default'](Members, _ReplayEventEmitter);\n  var _super = _createSuper$6(Members);\n  function Members(channel, members, links, configuration, services) {\n    var _this;\n    _classCallCheck__default['default'](this, Members);\n    _this = _super.call(this);\n    _this.channel = channel;\n    _this.members = members;\n    _this.links = links;\n    _this.configuration = configuration;\n    _this.services = services;\n    return _this;\n  }\n  _createClass__default['default'](Members, [{\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {\n        var entity;\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.rosterEntityPromise) {\n                  _context.next = 6;\n                  break;\n                }\n                _context.next = 3;\n                return this.rosterEntityPromise;\n              case 3:\n                entity = _context.sent;\n                entity.close();\n                this.rosterEntityPromise = null;\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function unsubscribe() {\n        return _unsubscribe.apply(this, arguments);\n      }\n      return unsubscribe;\n    }()\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(rosterObjectName) {\n        var _this2 = this;\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.rosterEntityPromise = this.rosterEntityPromise || this.services.syncClient.map({\n                  id: rosterObjectName,\n                  mode: 'open_existing'\n                }).then(function (rosterMap) {\n                  rosterMap.on('itemAdded', function (args) {\n                    log$7.debug(_this2.channel.sid + ' itemAdded: ' + args.item.key);\n                    _this2.upsertMember(args.item.key, args.item.data).then(function (member) {\n                      _this2.emit('memberJoined', member);\n                    });\n                  });\n                  rosterMap.on('itemRemoved', function (args) {\n                    log$7.debug(_this2.channel.sid + ' itemRemoved: ' + args.key);\n                    var memberSid = args.key;\n                    if (!_this2.members.has(memberSid)) {\n                      return;\n                    }\n                    var leftMember = _this2.members.get(memberSid);\n                    _this2.members.delete(memberSid);\n                    _this2.emit('memberLeft', leftMember);\n                  });\n                  rosterMap.on('itemUpdated', function (args) {\n                    log$7.debug(_this2.channel.sid + ' itemUpdated: ' + args.item.key);\n                    _this2.upsertMember(args.item.key, args.item.data);\n                  });\n                  var membersPromises = [];\n                  var that = _this2;\n                  var rosterMapHandler = function rosterMapHandler(paginator) {\n                    paginator.items.forEach(function (item) {\n                      membersPromises.push(that.upsertMember(item.key, item.data));\n                    });\n                    return paginator.hasNextPage ? paginator.nextPage().then(rosterMapHandler) : null;\n                  };\n                  return rosterMap.getItems().then(rosterMapHandler).then(function () {\n                    return Promise.all(membersPromises);\n                  }).then(function () {\n                    return rosterMap;\n                  });\n                }).catch(function (err) {\n                  _this2.rosterEntityPromise = null;\n                  if (_this2.services.syncClient.connectionState != 'disconnected') {\n                    log$7.error('Failed to get roster object for channel', _this2.channel.sid, err);\n                  }\n                  log$7.debug('ERROR: Failed to get roster object for channel', _this2.channel.sid, err);\n                  throw err;\n                }));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function subscribe(_x) {\n        return _subscribe.apply(this, arguments);\n      }\n      return subscribe;\n    }()\n  }, {\n    key: \"upsertMember\",\n    value: function () {\n      var _upsertMember = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(memberSid, data) {\n        var _this3 = this;\n        var member, links;\n        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                member = this.members.get(memberSid);\n                if (!member) {\n                  _context3.next = 3;\n                  break;\n                }\n                return _context3.abrupt(\"return\", member._update(data));\n              case 3:\n                links = {\n                  self: \"\".concat(this.links.participants, \"/\").concat(memberSid)\n                };\n                member = new Member(data, memberSid, this.channel, links, this.services);\n                this.members.set(memberSid, member);\n                member.on('updated', function (args) {\n                  return _this3.emit('memberUpdated', args);\n                });\n                return _context3.abrupt(\"return\", member);\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function upsertMember(_x2, _x3) {\n        return _upsertMember.apply(this, arguments);\n      }\n      return upsertMember;\n    }()\n    /**\n     * @returns {Promise<Array<Member>>} returns list of members {@see Member}\n     */\n  }, {\n    key: \"getMembers\",\n    value: function () {\n      var _getMembers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {\n        var _this4 = this;\n        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.rosterEntityPromise.then(function () {\n                  var members = [];\n                  _this4.members.forEach(function (member) {\n                    return members.push(member);\n                  });\n                  return members;\n                }));\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function getMembers() {\n        return _getMembers.apply(this, arguments);\n      }\n      return getMembers;\n    }()\n    /**\n     * Get member by SID from channel\n     * @returns {Promise<Member>}\n     */\n  }, {\n    key: \"getMemberBySid\",\n    value: function () {\n      var _getMemberBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(memberSid) {\n        var _this5 = this;\n        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.rosterEntityPromise.then(function () {\n                  var member = _this5.members.get(memberSid);\n                  if (!member) {\n                    throw new Error('Member with SID ' + memberSid + ' was not found');\n                  }\n                  return member;\n                }));\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getMemberBySid(_x4) {\n        return _getMemberBySid.apply(this, arguments);\n      }\n      return getMemberBySid;\n    }()\n    /**\n     * Get member by identity from channel\n     * @returns {Promise<Member>}\n     */\n  }, {\n    key: \"getMemberByIdentity\",\n    value: function () {\n      var _getMemberByIdentity = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(identity) {\n        var _this6 = this;\n        var foundMember;\n        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                foundMember = null;\n                return _context6.abrupt(\"return\", this.rosterEntityPromise.then(function () {\n                  _this6.members.forEach(function (member) {\n                    if (member.identity === identity) {\n                      foundMember = member;\n                    }\n                  });\n                  if (!foundMember) {\n                    throw new Error('Member with identity ' + identity + ' was not found');\n                  }\n                  return foundMember;\n                }));\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function getMemberByIdentity(_x5) {\n        return _getMemberByIdentity.apply(this, arguments);\n      }\n      return getMemberByIdentity;\n    }()\n    /**\n     * Add user to the channel\n     * @returns {Promise<any>}\n     */\n  }, {\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(identity) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.services.commandExecutor.mutateResource('post', this.links.participants, {\n                  identity: identity\n                });\n              case 2:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function add(_x6) {\n        return _add.apply(this, arguments);\n      }\n      return add;\n    }()\n    /**\n     * Invites user to the channel\n     * User can choose either to join or not\n     * @returns {Promise<any>}\n     */\n  }, {\n    key: \"invite\",\n    value: function () {\n      var _invite = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(identity) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.services.commandExecutor.mutateResource('post', this.channel.links.invites, {\n                  identity: identity\n                });\n              case 2:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function invite(_x7) {\n        return _invite.apply(this, arguments);\n      }\n      return invite;\n    }()\n    /**\n     * Remove member from channel\n     * @returns {Promise<any>}\n     */\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9(identity) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.services.commandExecutor.mutateResource('delete', \"\".concat(this.links.participants, \"/\").concat(identity));\n              case 2:\n                return _context9.abrupt(\"return\", _context9.sent);\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function remove(_x8) {\n        return _remove.apply(this, arguments);\n      }\n      return remove;\n    }()\n  }]);\n  return Members;\n}(replayEventEmitter.ReplayEventEmitter);\n/**\n * Fired when member joined channel\n * @event Members#memberJoined\n * @type {Member}\n */\n\n/**\n * Fired when member left channel\n * @event Members#memberLeft\n * @type {Member}\n */\n\n/**\n * Fired when member updated\n * @event Members#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n\n/**\n * Represents media information for a message in a channel.\n */\nvar Media = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Media(data, services) {\n    _classCallCheck__default['default'](this, Media);\n    _defineProperty__default['default'](this, \"mcsMedia\", null);\n    this.services = services;\n    this.state = {\n      sid: data.sid,\n      filename: data.filename,\n      contentType: data.contentType,\n      size: data.size\n    };\n  }\n  /**\n   * Server-assigned unique identifier for the media.\n   */\n\n  _createClass__default['default'](Media, [{\n    key: \"sid\",\n    get: function get() {\n      return this.state.sid;\n    }\n    /**\n     * File name. Null if absent.\n     */\n  }, {\n    key: \"filename\",\n    get: function get() {\n      return this.state.filename;\n    }\n    /**\n     * Content type of the media.\n     */\n  }, {\n    key: \"contentType\",\n    get: function get() {\n      return this.state.contentType;\n    }\n    /**\n     * Size of the media in bytes.\n     */\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.state.size;\n    }\n    /**\n     * Returns the direct content URL for the media.\n     *\n     * This URL is impermanent, it will expire in several minutes and cannot be cached.\n     * If the URL becomes expired, you need to request a new one.\n     * Each call to this function produces a new temporary URL.\n     */\n  }, {\n    key: \"getContentTemporaryUrl\",\n    value: function () {\n      var _getContentTemporaryUrl = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.mcsMedia) {\n                  _context.next = 8;\n                  break;\n                }\n                if (!this.services.mcsClient) {\n                  _context.next = 7;\n                  break;\n                }\n                _context.next = 4;\n                return this.services.mcsClient.get(this.state.sid);\n              case 4:\n                this.mcsMedia = _context.sent;\n                _context.next = 8;\n                break;\n              case 7:\n                throw new Error('Media Content Service is unavailable');\n              case 8:\n                return _context.abrupt(\"return\", this.mcsMedia.getContentUrl());\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getContentTemporaryUrl() {\n        return _getContentTemporaryUrl.apply(this, arguments);\n      }\n      return getContentTemporaryUrl;\n    }()\n  }]);\n  return Media;\n}();\nfunction _createSuper$5(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$5();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf__default['default'](Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf__default['default'](this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn__default['default'](this, result);\n  };\n}\nfunction _isNativeReflectConstruct$5() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar log$6 = Logger.scope('Message');\n/**\n * A message in a channel.\n */\n\nvar Message = /*#__PURE__*/function (_ReplayEventEmitter) {\n  _inherits__default['default'](Message, _ReplayEventEmitter);\n  var _super = _createSuper$5(Message);\n\n  /**\n   * Channel that the message is in.\n   */\n\n  /**\n   * @internal\n   */\n  function Message(index, data, channel, links, configuration, services) {\n    var _this;\n    _classCallCheck__default['default'](this, Message);\n    _this = _super.call(this);\n    _this.channel = channel;\n    _this.links = links;\n    _this.configuration = configuration;\n    _this.services = services;\n    _this.state = {\n      sid: data.sid,\n      index: index,\n      author: data.author == null ? null : data.author,\n      body: data.text,\n      timestamp: data.timestamp ? new Date(data.timestamp) : null,\n      dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,\n      lastUpdatedBy: data.lastUpdatedBy ? data.lastUpdatedBy : null,\n      attributes: parseAttributes(data.attributes, \"Got malformed attributes for the message \".concat(data.sid), log$6),\n      type: data.type ? data.type : 'text',\n      media: data.type && data.type === 'media' && data.media ? new Media(data.media, _this.services) : null,\n      memberSid: data.memberSid == null ? null : data.memberSid\n    };\n    return _this;\n  }\n  /**\n   * Fired when the properties or the body of the message have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} message - the message in question\n   *     * {@link MessageUpdateReason}[] updateReasons - array of reasons for the update\n   */\n\n  _createClass__default['default'](Message, [{\n    key: \"sid\",\n    get:\n    /**\n     * The server-assigned unique identifier for the message.\n     */\n    function get() {\n      return this.state.sid;\n    }\n    /**\n     * Name of the user that sent the message.\n     */\n  }, {\n    key: \"author\",\n    get: function get() {\n      return this.state.author;\n    }\n    /**\n     * Body of the message. Null if the message is a media message.\n     */\n  }, {\n    key: \"body\",\n    get: function get() {\n      if (this.type === 'media') {\n        return null;\n      }\n      return this.state.body;\n    }\n    /**\n     * Date this message was last updated on.\n     */\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.state.dateUpdated;\n    }\n    /**\n     * Index of the message in the channel's messages list.\n     * By design of the Programmable Chat system, the message indices may have arbitrary gaps between them,\n     * that does not necessarily mean they were deleted or otherwise modified - just that\n     * messages may have some non-contiguous indices even if they are being sent immediately one after another.\n     *\n     * Trying to use indices for some calculations is going to be unreliable.\n     *\n     * To calculate the number of unread messages it is better to use the read horizon API.\n     * See {@link Channel.getUnconsumedMessagesCount} for details.\n     */\n  }, {\n    key: \"index\",\n    get: function get() {\n      return this.state.index;\n    }\n    /**\n     * Identity of the last user that updated the message.\n     */\n  }, {\n    key: \"lastUpdatedBy\",\n    get: function get() {\n      return this.state.lastUpdatedBy;\n    }\n    /**\n     * Date this message was created on.\n     */\n  }, {\n    key: \"dateCreated\",\n    get: function get() {\n      return this.state.timestamp;\n    }\n    /**\n     * Custom attributes of the message.\n     */\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return this.state.attributes;\n    }\n    /**\n     * Push notification type of the message.\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.state.type;\n    }\n    /**\n     * Media information (if present).\n     */\n  }, {\n    key: \"media\",\n    get: function get() {\n      return this.state.media;\n    }\n    /**\n     * The server-assigned unique identifier of the authoring member.\n     */\n  }, {\n    key: \"memberSid\",\n    get: function get() {\n      return this.state.memberSid;\n    }\n  }, {\n    key: \"_update\",\n    value: function _update(data) {\n      var updateReasons = [];\n      if ((data.text || typeof data.text === 'string') && data.text !== this.state.body) {\n        this.state.body = data.text;\n        updateReasons.push('body');\n      }\n      if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {\n        this.state.lastUpdatedBy = data.lastUpdatedBy;\n        updateReasons.push('lastUpdatedBy');\n      }\n      if (data.author && data.author !== this.state.author) {\n        this.state.author = data.author;\n        updateReasons.push('author');\n      }\n      if (data.dateUpdated && new Date(data.dateUpdated).getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {\n        this.state.dateUpdated = new Date(data.dateUpdated);\n        updateReasons.push('dateUpdated');\n      }\n      if (data.timestamp && new Date(data.timestamp).getTime() !== (this.state.timestamp && this.state.timestamp.getTime())) {\n        this.state.timestamp = new Date(data.timestamp);\n        updateReasons.push('dateCreated');\n      }\n      var updatedAttributes = parseAttributes(data.attributes, \"Got malformed attributes for the message \".concat(this.sid), log$6);\n      if (!isEqual__default['default'](this.state.attributes, updatedAttributes)) {\n        this.state.attributes = updatedAttributes;\n        updateReasons.push('attributes');\n      }\n      if (updateReasons.length > 0) {\n        this.emit('updated', {\n          message: this,\n          updateReasons: updateReasons\n        });\n      }\n    }\n    /**\n     * Get the member who is the author of the message.\n     */\n  }, {\n    key: \"getMember\",\n    value: function () {\n      var _getMember = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {\n        var _this2 = this;\n        var member, errorMesage;\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                member = null;\n                if (!this.state.memberSid) {\n                  _context.next = 5;\n                  break;\n                }\n                _context.next = 4;\n                return this.channel.getMemberBySid(this.memberSid).catch(function () {\n                  log$6.debug('Member with sid \"' + _this2.memberSid + '\" not found for message ' + _this2.sid);\n                  return null;\n                });\n              case 4:\n                member = _context.sent;\n              case 5:\n                if (!(!member && this.state.author)) {\n                  _context.next = 9;\n                  break;\n                }\n                _context.next = 8;\n                return this.channel.getMemberByIdentity(this.state.author).catch(function () {\n                  log$6.debug('Member with identity \"' + _this2.author + '\" not found for message ' + _this2.sid);\n                  return null;\n                });\n              case 8:\n                member = _context.sent;\n              case 9:\n                if (!member) {\n                  _context.next = 11;\n                  break;\n                }\n                return _context.abrupt(\"return\", member);\n              case 11:\n                errorMesage = 'Member with ';\n                if (this.state.memberSid) {\n                  errorMesage += 'SID \\'' + this.state.memberSid + '\\' ';\n                }\n                if (this.state.author) {\n                  if (this.state.memberSid) {\n                    errorMesage += 'or ';\n                  }\n                  errorMesage += 'identity \\'' + this.state.author + '\\' ';\n                }\n                if (errorMesage === 'Member with ') {\n                  errorMesage = 'Member ';\n                }\n                errorMesage += 'was not found';\n                throw new Error(errorMesage);\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getMember() {\n        return _getMember.apply(this, arguments);\n      }\n      return getMember;\n    }()\n    /**\n     * Remove the message.\n     */\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.services.commandExecutor.mutateResource('delete', this.links.self);\n              case 2:\n                return _context2.abrupt(\"return\", this);\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function remove() {\n        return _remove.apply(this, arguments);\n      }\n      return remove;\n    }()\n    /**\n     * Edit the message body.\n     * @param body New body of the message.\n     */\n  }, {\n    key: \"updateBody\",\n    value: function () {\n      var _updateBody = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(body) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.services.commandExecutor.mutateResource('post', this.links.self, {\n                  body: body\n                });\n              case 2:\n                return _context3.abrupt(\"return\", this);\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function updateBody(_x) {\n        return _updateBody.apply(this, arguments);\n      }\n      return updateBody;\n    }()\n    /**\n     * Edit the message attributes.\n     * @param attributes New attributes.\n     */\n  }, {\n    key: \"updateAttributes\",\n    value: function () {\n      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(attributes) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.services.commandExecutor.mutateResource('post', this.links.self, {\n                  attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n                });\n              case 2:\n                return _context4.abrupt(\"return\", this);\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function updateAttributes(_x2) {\n        return _updateAttributes.apply(this, arguments);\n      }\n      return updateAttributes;\n    }()\n  }]);\n  return Message;\n}(replayEventEmitter.ReplayEventEmitter);\n_defineProperty__default['default'](Message, \"updated\", 'updated');\n__decorate([declarativeTypeValidator.validateTypesAsync('string'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], Message.prototype, \"updateBody\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(['string', 'number', 'boolean', 'object', declarativeTypeValidator.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Promise)], Message.prototype, \"updateAttributes\", null);\nfunction _createSuper$4(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$4();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf__default['default'](Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf__default['default'](this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn__default['default'](this, result);\n  };\n}\nfunction _isNativeReflectConstruct$4() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar log$5 = Logger.scope('Messages');\n/**\n * Represents the collection of messages in a channel\n */\n\nvar Messages = /*#__PURE__*/function (_ReplayEventEmitter) {\n  _inherits__default['default'](Messages, _ReplayEventEmitter);\n  var _super = _createSuper$4(Messages);\n  function Messages(channel, configuration, services) {\n    var _this;\n    _classCallCheck__default['default'](this, Messages);\n    _this = _super.call(this);\n    _this.channel = channel;\n    _this.configuration = configuration;\n    _this.services = services;\n    _this.messagesByIndex = new Map();\n    _this.messagesListPromise = null;\n    return _this;\n  }\n  /**\n   * Subscribe to the Messages Event Stream\n   * @param {String} name - The name of Sync object for the Messages resource.\n   * @returns {Promise}\n   */\n\n  _createClass__default['default'](Messages, [{\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(name) {\n        var _this2 = this;\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.messagesListPromise = this.messagesListPromise || this.services.syncClient.list({\n                  id: name,\n                  mode: 'open_existing'\n                }).then(function (list) {\n                  list.on('itemAdded', function (args) {\n                    log$5.debug(_this2.channel.sid + ' itemAdded: ' + args.item.index);\n                    var links = {\n                      self: \"\".concat(_this2.channel.links.messages, \"/\").concat(args.item.data.sid),\n                      conversation: _this2.channel.links.self,\n                      messages_receipts: \"\".concat(_this2.channel.links.messages, \"/\").concat(args.item.data.sid, \"/Receipts\")\n                    };\n                    var message = new Message(args.item.index, args.item.data, _this2.channel, links, _this2.configuration, _this2.services);\n                    if (_this2.messagesByIndex.has(message.index)) {\n                      log$5.debug('Message arrived, but already known and ignored', _this2.channel.sid, message.index);\n                      return;\n                    }\n                    _this2.messagesByIndex.set(message.index, message);\n                    message.on('updated', function (args) {\n                      return _this2.emit('messageUpdated', args);\n                    });\n                    _this2.emit('messageAdded', message);\n                  });\n                  list.on('itemRemoved', function (args) {\n                    log$5.debug(_this2.channel.sid + ' itemRemoved: ' + args.index);\n                    var index = args.index;\n                    if (_this2.messagesByIndex.has(index)) {\n                      var message = _this2.messagesByIndex.get(index);\n                      _this2.messagesByIndex.delete(message.index);\n                      message.removeAllListeners('updated');\n                      _this2.emit('messageRemoved', message);\n                    }\n                  });\n                  list.on('itemUpdated', function (args) {\n                    log$5.debug(_this2.channel.sid + ' itemUpdated: ' + args.item.index);\n                    var message = _this2.messagesByIndex.get(args.item.index);\n                    if (message) {\n                      message._update(args.item.data);\n                    }\n                  });\n                  return list;\n                }).catch(function (err) {\n                  _this2.messagesListPromise = null;\n                  if (_this2.services.syncClient.connectionState != 'disconnected') {\n                    log$5.error('Failed to get messages object for channel', _this2.channel.sid, err);\n                  }\n                  log$5.debug('ERROR: Failed to get messages object for channel', _this2.channel.sid, err);\n                  throw err;\n                }));\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function subscribe(_x) {\n        return _subscribe.apply(this, arguments);\n      }\n      return subscribe;\n    }()\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {\n        var entity;\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.messagesListPromise) {\n                  _context2.next = 6;\n                  break;\n                }\n                _context2.next = 3;\n                return this.messagesListPromise;\n              case 3:\n                entity = _context2.sent;\n                entity.close();\n                this.messagesListPromise = null;\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function unsubscribe() {\n        return _unsubscribe.apply(this, arguments);\n      }\n      return unsubscribe;\n    }()\n    /**\n     * Send Message to the channel\n     * @param {String} message - Message to post\n     * @param {any} attributes Message attributes\n     * @returns Returns promise which can fail\n     */\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(message) {\n        var attributes,\n          _args3 = arguments;\n        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                attributes = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                log$5.debug('Sending text message', message, attributes);\n                _context3.next = 4;\n                return this.services.commandExecutor.mutateResource('post', this.channel.links.messages, {\n                  body: message || '',\n                  attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n                });\n              case 4:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function send(_x2) {\n        return _send.apply(this, arguments);\n      }\n      return send;\n    }()\n    /**\n     * Send Media Message to the channel\n     * @param {FormData | Channel#SendMediaOptions} mediaContent - Media content to post\n     * @param {any} attributes Message attributes\n     * @returns Returns promise which can fail\n     */\n  }, {\n    key: \"sendMedia\",\n    value: function () {\n      var _sendMedia = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(mediaContent) {\n        var attributes,\n          media,\n          mediaOptions,\n          _args4 = arguments;\n        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                attributes = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                log$5.debug('Sending media message', mediaContent, attributes);\n                if (!(typeof FormData !== 'undefined' && mediaContent instanceof FormData)) {\n                  _context4.next = 9;\n                  break;\n                }\n                log$5.debug('Sending media message as FormData', mediaContent, attributes);\n                _context4.next = 6;\n                return this.services.mcsClient.postFormData(mediaContent);\n              case 6:\n                media = _context4.sent;\n                _context4.next = 16;\n                break;\n              case 9:\n                log$5.debug('Sending media message as SendMediaOptions', mediaContent, attributes);\n                mediaOptions = mediaContent;\n                if (!(!mediaOptions.contentType || !mediaOptions.media)) {\n                  _context4.next = 13;\n                  break;\n                }\n                throw new Error('Media content <Channel#SendMediaOptions> must contain non-empty contentType and media');\n              case 13:\n                _context4.next = 15;\n                return this.services.mcsClient.post(mediaOptions.contentType, mediaOptions.media, null);\n              case 15:\n                media = _context4.sent;\n              case 16:\n                _context4.next = 18;\n                return this.services.commandExecutor.mutateResource('post', this.channel.links.messages, {\n                  media_sid: media.sid,\n                  attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n                });\n              case 18:\n                return _context4.abrupt(\"return\", _context4.sent);\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function sendMedia(_x3) {\n        return _sendMedia.apply(this, arguments);\n      }\n      return sendMedia;\n    }()\n    /**\n     * Returns messages from channel using paginator interface\n     * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n     * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n     * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n     * @returns {Promise<Paginator<Message>>} last page of messages by default\n     */\n  }, {\n    key: \"getMessages\",\n    value: function () {\n      var _getMessages2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(pageSize, anchor, direction) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                anchor = typeof anchor !== 'undefined' ? anchor : 'end';\n                direction = direction || 'backwards';\n                return _context5.abrupt(\"return\", this._getMessages(pageSize, anchor, direction));\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getMessages(_x4, _x5, _x6) {\n        return _getMessages2.apply(this, arguments);\n      }\n      return getMessages;\n    }()\n  }, {\n    key: \"wrapPaginator\",\n    value: function () {\n      var _wrapPaginator = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(order, page, op) {\n        var _this3 = this;\n        var shouldReverse, np, pp;\n        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                // We should swap next and prev page here, because of misfit of Sync and Chat paging conceptions\n                shouldReverse = order === 'desc';\n                np = function np() {\n                  return page.nextPage().then(function (x) {\n                    return _this3.wrapPaginator(order, x, op);\n                  });\n                };\n                pp = function pp() {\n                  return page.prevPage().then(function (x) {\n                    return _this3.wrapPaginator(order, x, op);\n                  });\n                };\n                return _context6.abrupt(\"return\", op(page.items).then(function (items) {\n                  return {\n                    items: items.sort(function (x, y) {\n                      return x.index - y.index;\n                    }),\n                    hasPrevPage: shouldReverse ? page.hasNextPage : page.hasPrevPage,\n                    hasNextPage: shouldReverse ? page.hasPrevPage : page.hasNextPage,\n                    prevPage: shouldReverse ? np : pp,\n                    nextPage: shouldReverse ? pp : np\n                  };\n                }));\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n      function wrapPaginator(_x7, _x8, _x9) {\n        return _wrapPaginator.apply(this, arguments);\n      }\n      return wrapPaginator;\n    }()\n  }, {\n    key: \"_upsertMessage\",\n    value: function _upsertMessage(index, value) {\n      var _this4 = this;\n      var cachedMessage = this.messagesByIndex.get(index);\n      if (cachedMessage) {\n        return cachedMessage;\n      }\n      var links = {\n        self: \"\".concat(this.channel.links.messages, \"/\").concat(value.sid),\n        conversation: this.channel.links.self,\n        messages_receipts: \"\".concat(this.channel.links.messages, \"/\").concat(value.sid, \"/Receipts\")\n      };\n      var message = new Message(index, value, this.channel, links, this.configuration, this.services);\n      this.messagesByIndex.set(message.index, message);\n      message.on('updated', function (args) {\n        return _this4.emit('messageUpdated', args);\n      });\n      return message;\n    }\n    /**\n     * Returns last messages from channel\n     * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n     * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n     * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n     * @returns {Promise<SyncPaginator<Message>>} last page of messages by default\n     * @private\n     */\n  }, {\n    key: \"_getMessages\",\n    value: function () {\n      var _getMessages3 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(pageSize, anchor, direction) {\n        var _this5 = this;\n        var order;\n        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                anchor = typeof anchor !== 'undefined' ? anchor : 'end';\n                pageSize = pageSize || 30;\n                order = direction === 'backwards' ? 'desc' : 'asc';\n                return _context7.abrupt(\"return\", this.messagesListPromise.then(function (messagesList) {\n                  return messagesList.getItems({\n                    from: anchor !== 'end' ? anchor : void 0,\n                    pageSize: pageSize,\n                    order: order,\n                    limit: pageSize // @todo Limit equals pageSize by default in Sync. This is probably not ideal.\n                  });\n                }).then(function (page) {\n                  return _this5.wrapPaginator(order, page, function (items) {\n                    return Promise.all(items.map(function (item) {\n                      return _this5._upsertMessage(item.index, item.data);\n                    }));\n                  });\n                }));\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function _getMessages(_x10, _x11, _x12) {\n        return _getMessages3.apply(this, arguments);\n      }\n      return _getMessages;\n    }()\n  }]);\n  return Messages;\n}(replayEventEmitter.ReplayEventEmitter);\nfunction _createForOfIteratorHelper$1(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$1(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);\n}\nfunction _arrayLikeToArray$1(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _createSuper$3(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf__default['default'](Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf__default['default'](this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn__default['default'](this, result);\n  };\n}\nfunction _isNativeReflectConstruct$3() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar log$4 = Logger.scope('Channel');\nvar fieldMappings = {\n  lastMessage: 'lastMessage',\n  attributes: 'attributes',\n  createdBy: 'createdBy',\n  dateCreated: 'dateCreated',\n  dateUpdated: 'dateUpdated',\n  friendlyName: 'friendlyName',\n  lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n  notificationLevel: 'notificationLevel',\n  sid: 'sid',\n  status: 'status',\n  type: 'type',\n  uniqueName: 'uniqueName',\n  state: 'state'\n};\nfunction parseTime(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n/**\n * A channel represents a remote channel of communication between multiple Programmable Chat clients.\n */\n\nvar Channel = /*#__PURE__*/function (_ReplayEventEmitter) {\n  _inherits__default['default'](Channel, _ReplayEventEmitter);\n  var _super = _createSuper$3(Channel);\n\n  /**\n   * Unique system identifier of the channel.\n   */\n\n  /**\n   * @internal\n   */\n  function Channel(descriptor, sid, links, configuration, services) {\n    var _this;\n    _classCallCheck__default['default'](this, Channel);\n    _this = _super.call(this);\n    _this.sid = sid;\n    _this.links = links;\n    _this.configuration = configuration;\n    _this.services = services;\n    var attributes = descriptor.attributes || {};\n    var createdBy = descriptor.createdBy;\n    var dateCreated = parseTime(descriptor.dateCreated);\n    var dateUpdated = parseTime(descriptor.dateUpdated);\n    var friendlyName = descriptor.friendlyName || null;\n    var lastConsumedMessageIndex = Number.isInteger(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n    var uniqueName = descriptor.uniqueName || null;\n    try {\n      JSON.stringify(attributes);\n    } catch (e) {\n      throw new Error('Attributes must be a valid JSON object.');\n    }\n    _this.entityName = descriptor.channel;\n    _this.channelState = {\n      uniqueName: uniqueName,\n      status: 'notParticipating',\n      type: descriptor.type,\n      attributes: attributes,\n      createdBy: createdBy,\n      dateCreated: dateCreated,\n      dateUpdated: dateUpdated,\n      friendlyName: friendlyName,\n      lastConsumedMessageIndex: lastConsumedMessageIndex\n    };\n    if (descriptor.notificationLevel) {\n      _this.channelState.notificationLevel = descriptor.notificationLevel;\n    }\n    var membersLinks = {\n      participants: _this.links.participants\n    };\n    _this.members = new Map();\n    _this.membersEntity = new Members(_assertThisInitialized__default['default'](_this), _this.members, membersLinks, _this.configuration, _this.services);\n    _this.membersEntity.on('memberJoined', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'memberJoined'));\n    _this.membersEntity.on('memberLeft', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'memberLeft'));\n    _this.membersEntity.on('memberUpdated', function (args) {\n      return _this.emit('memberUpdated', args);\n    });\n    _this.messagesEntity = new Messages(_assertThisInitialized__default['default'](_this), _this.configuration, services);\n    _this.messagesEntity.on('messageAdded', function (message) {\n      return _this._onMessageAdded(message);\n    });\n    _this.messagesEntity.on('messageUpdated', function (args) {\n      return _this.emit('messageUpdated', args);\n    });\n    _this.messagesEntity.on('messageRemoved', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'messageRemoved'));\n    return _this;\n  }\n  /**\n   * Fired when a member has joined the channel.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - member that joined the channel\n   * @event\n   */\n\n  _createClass__default['default'](Channel, [{\n    key: \"status\",\n    get:\n    /**\n     * Delivery status of the channel.\n     */\n    function get() {\n      return this.channelState.status;\n    }\n    /**\n     * MemberType of the channel.\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.channelState.type;\n    }\n    /**\n     * Unique name of the channel.\n     */\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return this.channelState.uniqueName;\n    }\n    /**\n     * Signifies whether the channel is private.\n     */\n  }, {\n    key: \"isPrivate\",\n    get: function get() {\n      return this.channelState.type === 'private';\n    }\n    /**\n     * Name of the channel.\n     */\n  }, {\n    key: \"friendlyName\",\n    get: function get() {\n      return this.channelState.friendlyName;\n    }\n    /**\n     * Date this channel was last updated on.\n     */\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.channelState.dateUpdated;\n    }\n    /**\n     * Date this channel was created on.\n     */\n  }, {\n    key: \"dateCreated\",\n    get: function get() {\n      return this.channelState.dateCreated;\n    }\n    /**\n     * Identity of the user that created this channel.\n     */\n  }, {\n    key: \"createdBy\",\n    get: function get() {\n      return this.channelState.createdBy;\n    }\n    /**\n     * Custom attributes of the channel.\n     */\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return this.channelState.attributes;\n    }\n    /**\n     * Index of the last message the user has read in this channel.\n     */\n  }, {\n    key: \"lastConsumedMessageIndex\",\n    get: function get() {\n      return this.channelState.lastConsumedMessageIndex;\n    }\n    /**\n     * Last message sent to this channel.\n     */\n  }, {\n    key: \"lastMessage\",\n    get: function get() {\n      return this.channelState.lastMessage;\n    }\n    /**\n     * User notification level for this channel.\n     */\n  }, {\n    key: \"notificationLevel\",\n    get: function get() {\n      return this.channelState.notificationLevel;\n    }\n    /**\n     * State of the channel.\n     */\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.channelState.state;\n    }\n    /**\n     * Load and subscribe to this channel and do not subscribe to its members and messages.\n     * This or _subscribeStreams will need to be called before any events on channel will fire.\n     * @internal\n     */\n  }, {\n    key: \"_subscribe\",\n    value: function () {\n      var _subscribe2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {\n        var _this2 = this;\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.entityPromise) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\", this.entityPromise);\n              case 2:\n                return _context.abrupt(\"return\", this.entityPromise = this.entityPromise || this.services.syncClient.document({\n                  id: this.entityName,\n                  mode: 'open_existing'\n                }).then(function (entity) {\n                  _this2.entity = entity;\n                  _this2.entity.on('updated', function (args) {\n                    _this2._update(args.data);\n                  });\n                  _this2.entity.on('removed', function () {\n                    return _this2.emit('removed', _this2);\n                  });\n                  _this2._update(_this2.entity.data);\n                  return entity;\n                }).catch(function (err) {\n                  _this2.entity = null;\n                  _this2.entityPromise = null;\n                  if (_this2.services.syncClient.connectionState != 'disconnected') {\n                    log$4.error('Failed to get channel object', err);\n                  }\n                  log$4.debug('ERROR: Failed to get channel object', err);\n                  throw err;\n                }));\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function _subscribe() {\n        return _subscribe2.apply(this, arguments);\n      }\n      return _subscribe;\n    }()\n    /**\n     * Load the attributes of this channel and instantiate its members and messages.\n     * This or _subscribe will need to be called before any events on the channel will fire.\n     * This will need to be called before any events on members or messages will fire\n     * @internal\n     */\n  }, {\n    key: \"_subscribeStreams\",\n    value: function () {\n      var _subscribeStreams2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {\n        var messagesObjectName, rosterObjectName;\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this._subscribe();\n              case 3:\n                log$4.trace('_subscribeStreams, this.entity.data=', this.entity.data);\n                messagesObjectName = this.entity.data.messages;\n                rosterObjectName = this.entity.data.roster;\n                _context2.next = 8;\n                return Promise.all([this.messagesEntity.subscribe(messagesObjectName), this.membersEntity.subscribe(rosterObjectName)]);\n              case 8:\n                _context2.next = 15;\n                break;\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](0);\n                if (this.services.syncClient.connectionState !== 'disconnected') {\n                  log$4.error('Failed to subscribe on channel objects', this.sid, _context2.t0);\n                }\n                log$4.debug('ERROR: Failed to subscribe on channel objects', this.sid, _context2.t0);\n                throw _context2.t0;\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 10]]);\n      }));\n      function _subscribeStreams() {\n        return _subscribeStreams2.apply(this, arguments);\n      }\n      return _subscribeStreams;\n    }()\n    /**\n     * Stop listening for and firing events on this channel.\n     * @internal\n     */\n  }, {\n    key: \"_unsubscribe\",\n    value: function () {\n      var _unsubscribe2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.isPrivate && this.entity)) {\n                  _context3.next = 5;\n                  break;\n                }\n                _context3.next = 3;\n                return this.entity.close();\n              case 3:\n                this.entity = null;\n                this.entityPromise = null;\n              case 5:\n                return _context3.abrupt(\"return\", Promise.all([this.membersEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function _unsubscribe() {\n        return _unsubscribe2.apply(this, arguments);\n      }\n      return _unsubscribe;\n    }()\n    /**\n     * Set channel status.\n     * @internal\n     */\n  }, {\n    key: \"_setStatus\",\n    value: function _setStatus(status, source) {\n      var _this3 = this;\n      this.statusSource = source;\n      if (this.channelState.status === status) {\n        return;\n      }\n      this.channelState.status = status;\n      if (status === 'joined') {\n        this._subscribeStreams().catch(function (err) {\n          log$4.debug('ERROR while setting channel status ' + status, err);\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      } else if (status === 'invited') {\n        this._subscribe().catch(function (err) {\n          log$4.debug('ERROR while setting channel status ' + status, err);\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      } else if (this.entityPromise) {\n        this._unsubscribe().catch(function (err) {\n          log$4.debug('ERROR while setting channel status ' + status, err);\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      }\n    }\n    /**\n     * Update source of the channel.\n     * @internal\n     */\n  }, {\n    key: \"_statusSource\",\n    value: function _statusSource() {\n      return this.statusSource;\n    }\n  }, {\n    key: \"_update\",\n    value:\n    /**\n     * Update the local channel object with new values.\n     * @internal\n     */\n    function _update(update) {\n      var _update$lastMessage, _update$lastMessage2, _this$channelState$la, _this$channelState$la2, _this$channelState$lo;\n      log$4.trace('_update', update);\n      Channel.preprocessUpdate(update, this.sid);\n      var updateReasons = new Set();\n      for (var _i = 0, _Object$keys = Object.keys(update); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        var localKey = fieldMappings[key];\n        if (!localKey) {\n          continue;\n        }\n        switch (localKey) {\n          case fieldMappings.status:\n            if (!update.status || update.status === 'unknown' || this.channelState.status === update.status) {\n              break;\n            }\n            this.channelState.status = update.status;\n            updateReasons.add(localKey);\n            break;\n          case fieldMappings.attributes:\n            if (isEqual__default['default'](this.channelState.attributes, update.attributes)) {\n              break;\n            }\n            this.channelState.attributes = update.attributes;\n            updateReasons.add(localKey);\n            break;\n          case fieldMappings.lastConsumedMessageIndex:\n            if (update.lastConsumedMessageIndex === undefined || update.lastConsumedMessageIndex === this.channelState.lastConsumedMessageIndex) {\n              break;\n            }\n            this.channelState.lastConsumedMessageIndex = update.lastConsumedMessageIndex;\n            updateReasons.add(localKey);\n            break;\n          case fieldMappings.lastMessage:\n            if (this.channelState.lastMessage && !update.lastMessage) {\n              delete this.channelState.lastMessage;\n              updateReasons.add(localKey);\n              break;\n            }\n            this.channelState.lastMessage = this.channelState.lastMessage || {};\n            if (((_update$lastMessage = update.lastMessage) === null || _update$lastMessage === void 0 ? void 0 : _update$lastMessage.index) !== undefined && update.lastMessage.index !== this.channelState.lastMessage.index) {\n              this.channelState.lastMessage.index = update.lastMessage.index;\n              updateReasons.add(localKey);\n            }\n            if (((_update$lastMessage2 = update.lastMessage) === null || _update$lastMessage2 === void 0 ? void 0 : _update$lastMessage2.timestamp) !== undefined && ((_this$channelState$la = this.channelState.lastMessage) === null || _this$channelState$la === void 0 ? void 0 : (_this$channelState$la2 = _this$channelState$la.dateCreated) === null || _this$channelState$la2 === void 0 ? void 0 : _this$channelState$la2.getTime()) !== update.lastMessage.timestamp.getTime()) {\n              this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\n              updateReasons.add(localKey);\n            }\n            if (isEqual__default['default'](this.channelState.lastMessage, {})) {\n              delete this.channelState.lastMessage;\n            }\n            break;\n          case fieldMappings.state:\n            var state = update.state || undefined;\n            if (state !== undefined) {\n              state.dateUpdated = new Date(state.dateUpdated);\n            }\n            if (isEqual__default['default'](this.channelState.state, state)) {\n              break;\n            }\n            this.channelState.state = state;\n            updateReasons.add(localKey);\n            break;\n          default:\n            var isDate = update[key] instanceof Date;\n            var keysMatchAsDates = isDate && ((_this$channelState$lo = this.channelState[localKey]) === null || _this$channelState$lo === void 0 ? void 0 : _this$channelState$lo.getTime()) === update[key].getTime();\n            var keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n            if (keysMatchAsDates || keysMatchAsNonDates) {\n              break;\n            }\n            this.channelState[localKey] = update[key];\n            updateReasons.add(localKey);\n        }\n      }\n      if (updateReasons.size > 0) {\n        this.emit('updated', {\n          channel: this,\n          updateReasons: _toConsumableArray__default['default'](updateReasons)\n        });\n      }\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_onMessageAdded\",\n    value: function _onMessageAdded(message) {\n      var _iterator = _createForOfIteratorHelper$1(this.members.values()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var member = _step.value;\n          if (member.identity === message.author) {\n            member._endTyping();\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this.emit('messageAdded', message);\n    }\n  }, {\n    key: \"_setLastConsumedMessageIndex\",\n    value: function () {\n      var _setLastConsumedMessageIndex2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(index) {\n        var result;\n        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.services.commandExecutor.mutateResource('post', \"\".concat(this.configuration.links.myConversations, \"/\").concat(this.sid), {\n                  last_consumed_message_index: index\n                });\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result.unread_messages_count);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function _setLastConsumedMessageIndex(_x) {\n        return _setLastConsumedMessageIndex2.apply(this, arguments);\n      }\n      return _setLastConsumedMessageIndex;\n    }()\n    /**\n     * Add a member to the channel by its identity.\n     * @param identity Identity of the Client to add.\n     */\n  }, {\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(identity) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.membersEntity.add(identity);\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function add(_x2) {\n        return _add.apply(this, arguments);\n      }\n      return add;\n    }()\n    /**\n     * Advance the channel's last consumed message index to the current read horizon.\n     * Rejects if the user is not a member of the channel.\n     * Last consumed message index is updated only if the new index value is higher than the previous.\n     * @param index Message index to advance to.\n     * @return Resulting unread messages count in the channel.\n     */\n  }, {\n    key: \"advanceLastConsumedMessageIndex\",\n    value: function () {\n      var _advanceLastConsumedMessageIndex = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(index) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._subscribeStreams();\n              case 2:\n                if (!(index < this.lastConsumedMessageIndex)) {\n                  _context6.next = 6;\n                  break;\n                }\n                _context6.next = 5;\n                return this._setLastConsumedMessageIndex(this.lastConsumedMessageIndex);\n              case 5:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 6:\n                _context6.next = 8;\n                return this._setLastConsumedMessageIndex(index);\n              case 8:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function advanceLastConsumedMessageIndex(_x3) {\n        return _advanceLastConsumedMessageIndex.apply(this, arguments);\n      }\n      return advanceLastConsumedMessageIndex;\n    }()\n    /**\n     * Decline an invitation to the channel and unsubscribe from its events.\n     */\n  }, {\n    key: \"decline\",\n    value: function () {\n      var _decline = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.services.commandExecutor.mutateResource('delete', \"\".concat(this.links.invites, \"/\").concat(this.configuration.userIdentity));\n              case 2:\n                return _context7.abrupt(\"return\", this);\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function decline() {\n        return _decline.apply(this, arguments);\n      }\n      return decline;\n    }()\n    /**\n     * Delete the channel and unsubscribe from its events.\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.services.commandExecutor.mutateResource('delete', this.links.self);\n              case 2:\n                return _context8.abrupt(\"return\", this);\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\n     * Get the custom attributes of this Channel.\n     *\n     * *Note: {@link Channel.attributes} will be empty for public channels until this function is called.*\n     */\n  }, {\n    key: \"getAttributes\",\n    value: function () {\n      var _getAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this._subscribe();\n              case 2:\n                return _context9.abrupt(\"return\", this.attributes);\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function getAttributes() {\n        return _getAttributes.apply(this, arguments);\n      }\n      return getAttributes;\n    }()\n    /**\n     * Return messages from the channel using the paginator interface.\n     * @param pageSize Number of messages to return in a single chunk. Default is 30.\n     * @param anchor Index of the newest message to fetch. Default is from the end.\n     * @param direction Query direction. By default it queries backwards\n     * from newer to older. The `\"forward\"` value will query in the opposite direction.\n     * @return A page of messages.\n     */\n  }, {\n    key: \"getMessages\",\n    value: function () {\n      var _getMessages = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee10(pageSize, anchor, direction) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this._subscribeStreams();\n              case 2:\n                _context10.next = 4;\n                return this.messagesEntity.getMessages(pageSize, anchor, direction);\n              case 4:\n                return _context10.abrupt(\"return\", _context10.sent);\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function getMessages(_x4, _x5, _x6) {\n        return _getMessages.apply(this, arguments);\n      }\n      return getMessages;\n    }()\n    /**\n     * Get a list of all the members who are joined to this channel.\n     */\n  }, {\n    key: \"getMembers\",\n    value: function () {\n      var _getMembers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee11() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this._subscribeStreams();\n              case 2:\n                _context11.next = 4;\n                return this.membersEntity.getMembers();\n              case 4:\n                return _context11.abrupt(\"return\", _context11.sent);\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function getMembers() {\n        return _getMembers.apply(this, arguments);\n      }\n      return getMembers;\n    }()\n    /**\n     * Get channel members count.\n     *\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not\n     * provide real time events for counter values changes.\n     *\n     * This is useful for any UI badges, but it is not recommended to build any core application\n     * logic based on these counters being accurate in real time.\n     */\n  }, {\n    key: \"getMembersCount\",\n    value: function () {\n      var _getMembersCount = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee12() {\n        var url, response;\n        return _regeneratorRuntime__default['default'].wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n                _context12.next = 3;\n                return this.services.network.get(url);\n              case 3:\n                response = _context12.sent;\n                return _context12.abrupt(\"return\", response.body.participants_count);\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function getMembersCount() {\n        return _getMembersCount.apply(this, arguments);\n      }\n      return getMembersCount;\n    }()\n    /**\n     * Get a member by its SID.\n     * @param memberSid Member SID.\n     */\n  }, {\n    key: \"getMemberBySid\",\n    value: function () {\n      var _getMemberBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee13(memberSid) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.membersEntity.getMemberBySid(memberSid);\n              case 2:\n                return _context13.abrupt(\"return\", _context13.sent);\n              case 3:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function getMemberBySid(_x7) {\n        return _getMemberBySid.apply(this, arguments);\n      }\n      return getMemberBySid;\n    }()\n    /**\n     * Get a member by its identity.\n     * @param identity Member identity.\n     */\n  }, {\n    key: \"getMemberByIdentity\",\n    value: function () {\n      var _getMemberByIdentity = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee14(identity) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.membersEntity.getMemberByIdentity(identity);\n              case 2:\n                return _context14.abrupt(\"return\", _context14.sent);\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function getMemberByIdentity(_x8) {\n        return _getMemberByIdentity.apply(this, arguments);\n      }\n      return getMemberByIdentity;\n    }()\n    /**\n     * Get the total message count in the channel.\n     *\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not\n     * provide real time events for counter values changes.\n     *\n     * This is useful for any UI badges, but it is not recommended to build any core application\n     * logic based on these counters being accurate in real time.\n     */\n  }, {\n    key: \"getMessagesCount\",\n    value: function () {\n      var _getMessagesCount = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee15() {\n        var url, response;\n        return _regeneratorRuntime__default['default'].wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n                _context15.next = 3;\n                return this.services.network.get(url);\n              case 3:\n                response = _context15.sent;\n                return _context15.abrupt(\"return\", response.body.messages_count);\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function getMessagesCount() {\n        return _getMessagesCount.apply(this, arguments);\n      }\n      return getMessagesCount;\n    }()\n    /**\n     * Get unread messages count for the user if they are a member of this channel.\n     * Rejects if the user is not a member of the channel.\n     *\n     * Use this method to obtain the number of unread messages together with\n     * {@link Channel.updateLastConsumedMessageIndex} instead of relying on the\n     * message indices which may have gaps. See {@link Message.index} for details.\n     *\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not\n     * provide real time events for counter values changes.\n     *\n     * This is useful for any UI badges, but it is not recommended to build any core application\n     * logic based on these counters being accurate in real time.\n     */\n  }, {\n    key: \"getUnconsumedMessagesCount\",\n    value: function () {\n      var _getUnconsumedMessagesCount = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee16() {\n        var url, response, unreadMessageCount;\n        return _regeneratorRuntime__default['default'].wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                url = new UriBuilder(this.configuration.links.myConversations).path(this.sid).build();\n                _context16.next = 3;\n                return this.services.network.get(url);\n              case 3:\n                response = _context16.sent;\n                if (!(response.body.conversation_sid !== this.sid)) {\n                  _context16.next = 6;\n                  break;\n                }\n                throw new Error('Channel was not found in the user channels list');\n              case 6:\n                unreadMessageCount = response.body.unread_messages_count;\n                if (!(typeof unreadMessageCount === 'number')) {\n                  _context16.next = 9;\n                  break;\n                }\n                return _context16.abrupt(\"return\", unreadMessageCount);\n              case 9:\n                return _context16.abrupt(\"return\", null);\n              case 10:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function getUnconsumedMessagesCount() {\n        return _getUnconsumedMessagesCount.apply(this, arguments);\n      }\n      return getUnconsumedMessagesCount;\n    }()\n    /**\n     * Invite a user to the channel by their identity.\n     * @param identity Identity of the user.\n     */\n  }, {\n    key: \"invite\",\n    value: function () {\n      var _invite = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee17(identity) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.membersEntity.invite(identity);\n              case 2:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function invite(_x9) {\n        return _invite.apply(this, arguments);\n      }\n      return invite;\n    }()\n    /**\n     * Join the channel and subscribe to its events.\n     */\n  }, {\n    key: \"join\",\n    value: function () {\n      var _join = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee18() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.services.commandExecutor.mutateResource('post', this.links.participants, {\n                  identity: this.configuration.userIdentity\n                });\n              case 2:\n                return _context18.abrupt(\"return\", this);\n              case 3:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n      function join() {\n        return _join.apply(this, arguments);\n      }\n      return join;\n    }()\n    /**\n     * Leave the channel.\n     */\n  }, {\n    key: \"leave\",\n    value: function () {\n      var _leave = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee19() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                if (!(this.channelState.status === 'joined')) {\n                  _context19.next = 3;\n                  break;\n                }\n                _context19.next = 3;\n                return this.services.commandExecutor.mutateResource('delete', \"\".concat(this.links.participants, \"/\").concat(this.configuration.userIdentity));\n              case 3:\n                return _context19.abrupt(\"return\", this);\n              case 4:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n      function leave() {\n        return _leave.apply(this, arguments);\n      }\n      return leave;\n    }()\n    /**\n     * Remove a member from the channel. When a string is passed as the argument, it will assume that the string is an identity.\n     * @param member Identity or the member object to remove.\n     */\n  }, {\n    key: \"removeMember\",\n    value: function () {\n      var _removeMember = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee20(member) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this.membersEntity.remove(typeof member === 'string' ? member : member.sid);\n              case 2:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n      function removeMember(_x10) {\n        return _removeMember.apply(this, arguments);\n      }\n      return removeMember;\n    }()\n    /**\n     * Send a message to the channel.\n     * @param message Message body for the text message,\n     * `FormData` or {@link Channel.MediaOptions) for media content. Sending FormData is supported only with the browser engine.\n     * @param messageAttributes Attributes for the message.\n     * @return Index of the new message.\n     */\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _sendMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee21(message, messageAttributes) {\n        var _response, response;\n        return _regeneratorRuntime__default['default'].wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                if (!(typeof message === 'string' || message === null)) {\n                  _context21.next = 5;\n                  break;\n                }\n                _context21.next = 3;\n                return this.messagesEntity.send(message, messageAttributes);\n              case 3:\n                _response = _context21.sent;\n                return _context21.abrupt(\"return\", parseToNumber(_response.index));\n              case 5:\n                _context21.next = 7;\n                return this.messagesEntity.sendMedia(message, messageAttributes);\n              case 7:\n                response = _context21.sent;\n                return _context21.abrupt(\"return\", parseToNumber(response.index));\n              case 9:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n      function sendMessage(_x11, _x12) {\n        return _sendMessage.apply(this, arguments);\n      }\n      return sendMessage;\n    }()\n    /**\n     * Set last consumed message index of the channel to the index of the last known message.\n     * @return Resulting unread messages count in the channel.\n     */\n  }, {\n    key: \"setAllMessagesConsumed\",\n    value: function () {\n      var _setAllMessagesConsumed = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee22() {\n        var messagesPage;\n        return _regeneratorRuntime__default['default'].wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this._subscribeStreams();\n              case 2:\n                _context22.next = 4;\n                return this.getMessages(1);\n              case 4:\n                messagesPage = _context22.sent;\n                if (!(messagesPage.items.length > 0)) {\n                  _context22.next = 7;\n                  break;\n                }\n                return _context22.abrupt(\"return\", this.advanceLastConsumedMessageIndex(messagesPage.items[0].index));\n              case 7:\n                return _context22.abrupt(\"return\", Promise.resolve(0));\n              case 8:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n      function setAllMessagesConsumed() {\n        return _setAllMessagesConsumed.apply(this, arguments);\n      }\n      return setAllMessagesConsumed;\n    }()\n    /**\n     * Set all messages in the channel unread.\n     * @return Resulting unread messages count in the channel.\n     */\n  }, {\n    key: \"setNoMessagesConsumed\",\n    value: function () {\n      var _setNoMessagesConsumed = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee23() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return this._subscribeStreams();\n              case 2:\n                _context23.next = 4;\n                return this._setLastConsumedMessageIndex(null);\n              case 4:\n                return _context23.abrupt(\"return\", _context23.sent);\n              case 5:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n      function setNoMessagesConsumed() {\n        return _setNoMessagesConsumed.apply(this, arguments);\n      }\n      return setNoMessagesConsumed;\n    }()\n    /**\n     * Set user notification level for this channel.\n     * @param notificationLevel New user notification level.\n     */\n  }, {\n    key: \"setUserNotificationLevel\",\n    value: function () {\n      var _setUserNotificationLevel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee24(notificationLevel) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.services.commandExecutor.mutateResource('post', \"\".concat(this.configuration.links.myConversations, \"/\").concat(this.sid), {\n                  notification_level: notificationLevel\n                });\n              case 2:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n      function setUserNotificationLevel(_x13) {\n        return _setUserNotificationLevel.apply(this, arguments);\n      }\n      return setUserNotificationLevel;\n    }()\n    /**\n     * Send a notification to the server indicating that this client is currently typing in this channel.\n     * Typing ended notification is sent after a while automatically, but by calling this method again you ensure that typing ended is not received.\n     */\n  }, {\n    key: \"typing\",\n    value: function typing() {\n      return this.services.typingIndicator.send(this.sid);\n    }\n    /**\n     * Update the attributes of the channel.\n     * @param attributes New attributes.\n     */\n  }, {\n    key: \"updateAttributes\",\n    value: function () {\n      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee25(attributes) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.next = 2;\n                return this.services.commandExecutor.mutateResource('post', this.links.self, {\n                  attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n                });\n              case 2:\n                return _context25.abrupt(\"return\", this);\n              case 3:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n      function updateAttributes(_x14) {\n        return _updateAttributes.apply(this, arguments);\n      }\n      return updateAttributes;\n    }()\n    /**\n     * Update the friendly name of the channel.\n     * @param friendlyName New friendly name.\n     */\n  }, {\n    key: \"updateFriendlyName\",\n    value: function () {\n      var _updateFriendlyName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee26(friendlyName) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                if (!(this.channelState.friendlyName !== friendlyName)) {\n                  _context26.next = 3;\n                  break;\n                }\n                _context26.next = 3;\n                return this.services.commandExecutor.mutateResource('post', this.links.self, {\n                  friendly_name: friendlyName\n                });\n              case 3:\n                return _context26.abrupt(\"return\", this);\n              case 4:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n      function updateFriendlyName(_x15) {\n        return _updateFriendlyName.apply(this, arguments);\n      }\n      return updateFriendlyName;\n    }()\n    /**\n     * Set the last consumed message index to the current read horizon.\n     * @param index Message index to set as last consumed.\n     * If null is provided, then the behavior is identical to {@link Channel.setNoMessagesConsumed}.\n     * @returns Resulting unread messages count in the channel.\n     */\n  }, {\n    key: \"updateLastConsumedMessageIndex\",\n    value: function () {\n      var _updateLastConsumedMessageIndex = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee27(index) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.next = 2;\n                return this._subscribeStreams();\n              case 2:\n                _context27.next = 4;\n                return this._setLastConsumedMessageIndex(index);\n              case 4:\n                return _context27.abrupt(\"return\", _context27.sent);\n              case 5:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n      function updateLastConsumedMessageIndex(_x16) {\n        return _updateLastConsumedMessageIndex.apply(this, arguments);\n      }\n      return updateLastConsumedMessageIndex;\n    }()\n    /**\n     * Update the unique name of the channel.\n     * @param uniqueName New unique name for the channel. Setting unique name to null removes it.\n     */\n  }, {\n    key: \"updateUniqueName\",\n    value: function () {\n      var _updateUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee28(uniqueName) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                if (!(this.channelState.uniqueName !== uniqueName)) {\n                  _context28.next = 4;\n                  break;\n                }\n                if (!uniqueName) {\n                  uniqueName = '';\n                }\n                _context28.next = 4;\n                return this.services.commandExecutor.mutateResource('post', this.links.self, {\n                  unique_name: uniqueName\n                });\n              case 4:\n                return _context28.abrupt(\"return\", this);\n              case 5:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n      function updateUniqueName(_x17) {\n        return _updateUniqueName.apply(this, arguments);\n      }\n      return updateUniqueName;\n    }()\n    /**\n     * Get user descriptors of this channel.\n     */\n  }, {\n    key: \"getUserDescriptors\",\n    value: function () {\n      var _getUserDescriptors = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee29() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return this.services.users.getChannelUserDescriptors(this.sid);\n              case 2:\n                return _context29.abrupt(\"return\", _context29.sent);\n              case 3:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n      function getUserDescriptors() {\n        return _getUserDescriptors.apply(this, arguments);\n      }\n      return getUserDescriptors;\n    }()\n  }], [{\n    key: \"preprocessUpdate\",\n    value: function preprocessUpdate(update, channelSid) {\n      try {\n        if (typeof update.attributes === 'string') {\n          update.attributes = JSON.parse(update.attributes);\n        } else if (update.attributes) {\n          JSON.stringify(update.attributes);\n        }\n      } catch (e) {\n        log$4.warn('Retrieved malformed attributes from the server for channel: ' + channelSid);\n        update.attributes = {};\n      }\n      try {\n        if (update.dateCreated) {\n          update.dateCreated = new Date(update.dateCreated);\n        }\n      } catch (e) {\n        log$4.warn('Retrieved malformed dateCreated from the server for channel: ' + channelSid);\n        delete update.dateCreated;\n      }\n      try {\n        if (update.dateUpdated) {\n          update.dateUpdated = new Date(update.dateUpdated);\n        }\n      } catch (e) {\n        log$4.warn('Retrieved malformed dateUpdated from the server for channel: ' + channelSid);\n        delete update.dateUpdated;\n      }\n      try {\n        if (update.lastMessage && update.lastMessage.timestamp) {\n          update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n        }\n      } catch (e) {\n        log$4.warn('Retrieved malformed lastMessage.timestamp from the server for channel: ' + channelSid);\n        delete update.lastMessage.timestamp;\n      }\n    }\n  }]);\n  return Channel;\n}(replayEventEmitter.ReplayEventEmitter);\n_defineProperty__default['default'](Channel, \"memberJoined\", 'memberJoined');\n_defineProperty__default['default'](Channel, \"memberLeft\", 'memberLeft');\n_defineProperty__default['default'](Channel, \"memberUpdated\", 'memberUpdated');\n_defineProperty__default['default'](Channel, \"messageAdded\", 'messageAdded');\n_defineProperty__default['default'](Channel, \"messageRemoved\", 'messageRemoved');\n_defineProperty__default['default'](Channel, \"messageUpdated\", 'messageUpdated');\n_defineProperty__default['default'](Channel, \"typingEnded\", 'typingEnded');\n_defineProperty__default['default'](Channel, \"typingStarted\", 'typingStarted');\n_defineProperty__default['default'](Channel, \"updated\", 'updated');\n_defineProperty__default['default'](Channel, \"removed\", 'removed');\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], Channel.prototype, \"add\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonNegativeInteger), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", Promise)], Channel.prototype, \"advanceLastConsumedMessageIndex\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(['undefined', declarativeTypeValidator.nonNegativeInteger], ['undefined', declarativeTypeValidator.nonNegativeInteger], ['undefined', declarativeTypeValidator.literal('backwards', 'forward')]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Number, String]), __metadata(\"design:returntype\", Promise)], Channel.prototype, \"getMessages\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], Channel.prototype, \"getMemberBySid\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], Channel.prototype, \"getMemberByIdentity\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], Channel.prototype, \"invite\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync([declarativeTypeValidator.nonEmptyString, Member]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Promise)], Channel.prototype, \"removeMember\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(['string', declarativeTypeValidator.literal(null),\n// Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.\ndeclarativeTypeValidator.custom(function (value) {\n  return [value instanceof FormData, 'an instance of FormData'];\n}), declarativeTypeValidator.objectSchema('media options', {\n  contentType: [declarativeTypeValidator.nonEmptyString, 'undefined'],\n  media: declarativeTypeValidator.custom(function (value) {\n    var isValid = typeof value === 'string' && value.length > 0 || value instanceof Uint8Array || value instanceof ArrayBuffer;\n    if (typeof Blob === 'function') {\n      isValid = isValid || value instanceof Blob;\n    }\n    return [isValid, 'a non-empty string, an instance of Buffer or an instance of Blob'];\n  })\n})], ['undefined', 'string', 'number', 'boolean', 'object', declarativeTypeValidator.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", Promise)], Channel.prototype, \"sendMessage\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.literal('default', 'muted')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], Channel.prototype, \"setUserNotificationLevel\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(['string', 'number', 'boolean', 'object', declarativeTypeValidator.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Promise)], Channel.prototype, \"updateAttributes\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync('string'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], Channel.prototype, \"updateFriendlyName\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync([declarativeTypeValidator.literal(null), declarativeTypeValidator.nonNegativeInteger]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", Promise)], Channel.prototype, \"updateLastConsumedMessageIndex\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(['string', declarativeTypeValidator.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], Channel.prototype, \"updateUniqueName\", null);\nvar Deferred = /*#__PURE__*/function () {\n  function Deferred() {\n    var _this = this;\n    _classCallCheck__default['default'](this, Deferred);\n    this._promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n    });\n  }\n  _createClass__default['default'](Deferred, [{\n    key: \"promise\",\n    get: function get() {\n      return this._promise;\n    }\n  }, {\n    key: \"update\",\n    value: function update(value) {\n      this._resolve(value);\n    }\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      this.current = value;\n      this._resolve(value);\n    }\n  }, {\n    key: \"fail\",\n    value: function fail(e) {\n      this._reject(e);\n    }\n  }]);\n  return Deferred;\n}();\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$3(Object(source), true).forEach(function (key) {\n        _defineProperty__default['default'](target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$3(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper$2(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf__default['default'](Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf__default['default'](this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn__default['default'](this, result);\n  };\n}\nfunction _isNativeReflectConstruct$2() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar log$3 = Logger.scope('Channels');\n/**\n * Represents channels collection\n * {@see Channel}\n */\n\nvar Channels = /*#__PURE__*/function (_ReplayEventEmitter) {\n  _inherits__default['default'](Channels, _ReplayEventEmitter);\n  var _super = _createSuper$2(Channels);\n  function Channels(configuration, services) {\n    var _this;\n    _classCallCheck__default['default'](this, Channels);\n    _this = _super.call(this);\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"channels\", new Map());\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"tombstones\", new Set());\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"myChannelsFetched\", false);\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"myChannelsRead\", new Deferred());\n    _this.configuration = configuration;\n    _this.services = services;\n    return _this;\n  }\n  _createClass__default['default'](Channels, [{\n    key: \"getMap\",\n    value: function () {\n      var _getMap = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.services.syncClient.map({\n                  id: this.configuration.myConversations,\n                  mode: 'open_existing'\n                });\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getMap() {\n        return _getMap.apply(this, arguments);\n      }\n      return getMap;\n    }()\n    /**\n     * Add channel to server\n     * @private\n     * @returns {Promise<Channel>} Channel\n     */\n  }, {\n    key: \"addChannel\",\n    value: function () {\n      var _addChannel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(options) {\n        var attributes, response, channelSid, channelDocument, links, existingChannel, channel;\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (typeof options.attributes === 'undefined') {\n                  attributes = {};\n                } else {\n                  attributes = options.attributes;\n                }\n                _context2.next = 3;\n                return this.services.commandExecutor.mutateResource('post', this.configuration.links.conversations, {\n                  type: options.isPrivate ? 'private' : 'public',\n                  unique_name: options.uniqueName,\n                  friendly_name: options.friendlyName,\n                  attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n                });\n              case 3:\n                response = _context2.sent;\n                channelSid = response.sid || null;\n                channelDocument = response.sync_objects.conversation || null;\n                links = _objectSpread$3({\n                  self: response.url\n                }, response.links);\n                existingChannel = this.channels.get(channelSid);\n                if (!existingChannel) {\n                  _context2.next = 12;\n                  break;\n                }\n                _context2.next = 11;\n                return existingChannel._subscribe();\n              case 11:\n                return _context2.abrupt(\"return\", existingChannel);\n              case 12:\n                channel = new Channel({\n                  channel: channelDocument,\n                  entityName: null,\n                  uniqueName: null,\n                  attributes: null,\n                  createdBy: null,\n                  friendlyName: null,\n                  lastConsumedMessageIndex: null,\n                  type: options.isPrivate ? 'private' : 'public',\n                  dateCreated: null,\n                  dateUpdated: null\n                }, channelSid, links, this.configuration, this.services);\n                this.channels.set(channel.sid, channel);\n                this.registerForEvents(channel);\n                _context2.next = 17;\n                return channel._subscribe();\n              case 17:\n                this.emit('channelAdded', channel);\n                return _context2.abrupt(\"return\", channel);\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function addChannel(_x) {\n        return _addChannel.apply(this, arguments);\n      }\n      return addChannel;\n    }()\n    /**\n     * Fetch channels list and instantiate all necessary objects\n     */\n  }, {\n    key: \"fetchChannels\",\n    value: function () {\n      var _fetchChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {\n        var _this2 = this;\n        var map, myChannels, upserts, _iterator, _step, channel, errorMessage;\n        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return this.getMap();\n              case 3:\n                map = _context3.sent;\n                map.on('itemAdded', function (args) {\n                  log$3.debug(\"itemAdded: \".concat(args.item.key));\n                  _this2.upsertChannel('sync', args.item.key, args.item.data);\n                });\n                map.on('itemRemoved', function (args) {\n                  log$3.debug(\"itemRemoved: \".concat(args.key));\n                  var sid = args.key;\n                  if (!_this2.myChannelsFetched) {\n                    _this2.tombstones.add(sid);\n                  }\n                  var channel = _this2.channels.get(sid);\n                  if (!channel) {\n                    return;\n                  }\n                  if (channel.status === 'joined' || channel.status === 'invited') {\n                    channel._setStatus('notParticipating', 'sync');\n                    _this2.emit('channelLeft', channel);\n                  }\n                  if (channel.isPrivate) {\n                    _this2.channels.delete(sid);\n                    _this2.emit('channelRemoved', channel);\n                    channel.emit('removed', channel);\n                  }\n                });\n                map.on('itemUpdated', function (args) {\n                  log$3.debug(\"itemUpdated: \".concat(args.item.key));\n                  _this2.upsertChannel('sync', args.item.key, args.item.data);\n                });\n                _context3.next = 9;\n                return this._fetchMyChannels();\n              case 9:\n                myChannels = _context3.sent;\n                upserts = [];\n                _iterator = _createForOfIteratorHelper(myChannels);\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    channel = _step.value;\n                    upserts.push(this.upsertChannel('rest', channel.channel_sid, channel));\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n                this.myChannelsRead.set(true);\n                _context3.next = 16;\n                return Promise.all(upserts);\n              case 16:\n                this.myChannelsFetched = true;\n                this.tombstones.clear();\n                log$3.debug('The channels list has been successfully fetched');\n                return _context3.abrupt(\"return\", this);\n              case 22:\n                _context3.prev = 22;\n                _context3.t0 = _context3[\"catch\"](0);\n                errorMessage = 'Failed to fetch the channels list';\n                if (this.services.syncClient.connectionState !== 'disconnected') {\n                  log$3.error(errorMessage, _context3.t0);\n                }\n                log$3.debug(\"ERROR: \".concat(errorMessage), _context3.t0);\n                throw _context3.t0;\n              case 28:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 22]]);\n      }));\n      function fetchChannels() {\n        return _fetchChannels.apply(this, arguments);\n      }\n      return fetchChannels;\n    }()\n  }, {\n    key: \"_wrapPaginator\",\n    value: function () {\n      var _wrapPaginator2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(page, op) {\n        var _this3 = this;\n        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", op(page.items).then(function (items) {\n                  return {\n                    items: items,\n                    hasNextPage: page.hasNextPage,\n                    hasPrevPage: page.hasPrevPage,\n                    nextPage: function nextPage() {\n                      return page.nextPage().then(function (x) {\n                        return _this3._wrapPaginator(x, op);\n                      });\n                    },\n                    prevPage: function prevPage() {\n                      return page.prevPage().then(function (x) {\n                        return _this3._wrapPaginator(x, op);\n                      });\n                    }\n                  };\n                }));\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n      function _wrapPaginator(_x2, _x3) {\n        return _wrapPaginator2.apply(this, arguments);\n      }\n      return _wrapPaginator;\n    }()\n  }, {\n    key: \"getChannels\",\n    value: function () {\n      var _getChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(args) {\n        var _this4 = this;\n        var channelsMap, page;\n        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getMap();\n              case 2:\n                channelsMap = _context5.sent;\n                _context5.next = 5;\n                return channelsMap.getItems(args);\n              case 5:\n                page = _context5.sent;\n                return _context5.abrupt(\"return\", this._wrapPaginator(page, function (items) {\n                  return Promise.all(items.map(function (item) {\n                    return _this4.upsertChannel('sync', item.key, item.data);\n                  }));\n                }));\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getChannels(_x4) {\n        return _getChannels.apply(this, arguments);\n      }\n      return getChannels;\n    }()\n  }, {\n    key: \"getChannel\",\n    value: function () {\n      var _getChannel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(sid) {\n        var _this5 = this;\n        var channelsMap, page, items;\n        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.getMap();\n              case 2:\n                channelsMap = _context6.sent;\n                _context6.next = 5;\n                return channelsMap.getItems({\n                  key: sid\n                });\n              case 5:\n                page = _context6.sent;\n                items = page.items.map(function (item) {\n                  return _this5.upsertChannel('sync', item.key, item.data);\n                });\n                return _context6.abrupt(\"return\", items.length > 0 ? items[0] : null);\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function getChannel(_x5) {\n        return _getChannel.apply(this, arguments);\n      }\n      return getChannel;\n    }()\n  }, {\n    key: \"pushChannel\",\n    value: function () {\n      var _pushChannel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(descriptor) {\n        var sid, data;\n        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                sid = descriptor.sid;\n                data = {\n                  entityName: null,\n                  lastConsumedMessageIndex: descriptor.lastConsumedMessageIndex,\n                  type: descriptor.type,\n                  status: descriptor.status,\n                  friendlyName: descriptor.friendlyName,\n                  dateUpdated: descriptor.dateUpdated,\n                  dateCreated: descriptor.dateCreated,\n                  uniqueName: descriptor.uniqueName,\n                  createdBy: descriptor.createdBy,\n                  attributes: descriptor.attributes,\n                  channel: descriptor instanceof ChannelDescriptor ? descriptor.channel : null,\n                  notificationLevel: descriptor.notificationLevel,\n                  sid: sid\n                };\n                _context7.next = 4;\n                return this.upsertChannel('chat', sid, data);\n              case 4:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function pushChannel(_x6) {\n        return _pushChannel.apply(this, arguments);\n      }\n      return pushChannel;\n    }()\n  }, {\n    key: \"_updateChannel\",\n    value: function _updateChannel(source, channel, data) {\n      var _this6 = this;\n      var areSourcesDifferent = channel._statusSource() !== undefined && source !== channel._statusSource();\n      var isChannelSourceSync = source !== 'rest' || channel._statusSource() === 'sync';\n      if (areSourcesDifferent && isChannelSourceSync && source !== 'sync') {\n        log$3.trace('upsertChannel: the channel is known from sync and it came from chat, ignoring', {\n          sid: channel.sid,\n          data: data.status,\n          channel: channel.status\n        });\n        return;\n      }\n      if (['joined', 'invited'].includes(data.status) && channel.status !== data.status) {\n        channel._setStatus(data.status, source);\n        var updateData = {};\n        if (data.notificationLevel !== undefined) {\n          updateData.notificationLevel = data.notificationLevel;\n        }\n        if (data.lastConsumedMessageIndex !== undefined) {\n          updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n        }\n        if (!isEqual__default['default'](updateData, {})) {\n          channel._update(updateData);\n        }\n        channel._subscribe().then(function () {\n          _this6.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', channel);\n        });\n        return;\n      }\n      if (['joined', 'invited'].includes(channel.status) && data.status === 'notParticipating') {\n        channel._setStatus('notParticipating', source);\n        channel._update(data);\n        channel._subscribe().then(function () {\n          _this6.emit('channelLeft', channel);\n        });\n        return;\n      }\n      if (data.type === 'private' && data.status === 'notParticipating') {\n        channel._subscribe();\n        return;\n      }\n      channel._update(data);\n    }\n  }, {\n    key: \"upsertChannel\",\n    value: function () {\n      var _upsertChannel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(source, sid, data) {\n        var channel, baseLink, links, newChannel;\n        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                log$3.trace(\"upsertChannel called for \".concat(sid), data);\n                channel = this.channels.get(sid); // If the channel is known, update it\n\n                if (!channel) {\n                  _context8.next = 8;\n                  break;\n                }\n                log$3.trace(\"upsertChannel: the channel \".concat(channel.sid, \" is known;\") + \"its status is known from source \".concat(channel._statusSource(), \" \") + \"and the update came from source \".concat(source), channel);\n                this._updateChannel(source, channel, data);\n                _context8.next = 7;\n                return channel._subscribe();\n              case 7:\n                return _context8.abrupt(\"return\", channel);\n              case 8:\n                if (!(['chat', 'rest'].includes(source) && this.tombstones.has(sid))) {\n                  _context8.next = 11;\n                  break;\n                }\n                log$3.trace('upsertChannel: the channel is deleted but reappeared again from chat, ignoring', sid);\n                return _context8.abrupt(\"return\", null);\n              case 11:\n                // If the channel is unknown, fetch it\n                log$3.trace(\"upsertChannel: creating a local channel object with sid \".concat(sid), data);\n                baseLink = \"\".concat(this.configuration.links.conversations, \"/\").concat(sid);\n                links = {\n                  self: baseLink,\n                  messages: \"\".concat(baseLink, \"/Messages\"),\n                  participants: \"\".concat(baseLink, \"/Participants\"),\n                  invites: \"\".concat(baseLink, \"/Invites\")\n                };\n                newChannel = new Channel(data, sid, links, this.configuration, this.services);\n                this.channels.set(sid, newChannel);\n                _context8.next = 18;\n                return newChannel._subscribe();\n              case 18:\n                this.registerForEvents(newChannel);\n                this.emit('channelAdded', newChannel);\n                if (['joined', 'invited'].includes(data.status)) {\n                  newChannel._setStatus(data.status, source);\n                  this.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', newChannel);\n                }\n                return _context8.abrupt(\"return\", newChannel);\n              case 22:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function upsertChannel(_x7, _x8, _x9) {\n        return _upsertChannel.apply(this, arguments);\n      }\n      return upsertChannel;\n    }()\n  }, {\n    key: \"onChannelRemoved\",\n    value: function onChannelRemoved(sid) {\n      var channel = this.channels.get(sid);\n      if (channel) {\n        this.channels.delete(sid);\n        this.emit('channelRemoved', channel);\n      }\n    }\n  }, {\n    key: \"registerForEvents\",\n    value: function registerForEvents(channel) {\n      var _this7 = this;\n      channel.on('removed', function () {\n        return _this7.onChannelRemoved(channel.sid);\n      });\n      channel.on('updated', function (args) {\n        return _this7.emit('channelUpdated', args);\n      });\n      channel.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n      channel.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n      channel.on('memberUpdated', function (args) {\n        return _this7.emit('memberUpdated', args);\n      });\n      channel.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n      channel.on('messageUpdated', function (args) {\n        return _this7.emit('messageUpdated', args);\n      });\n      channel.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n      channel.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n      channel.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n    }\n  }, {\n    key: \"_fetchMyChannels\",\n    value: function () {\n      var _fetchMyChannels2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9() {\n        var channels, pageToken, url, response, preProcessedChannels;\n        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                channels = [];\n                pageToken = null;\n              case 2:\n                url = new UriBuilder(this.configuration.links.myConversations);\n                if (pageToken) {\n                  url.arg('PageToken', pageToken);\n                }\n                _context9.next = 6;\n                return this.services.network.get(url.build());\n              case 6:\n                response = _context9.sent;\n                preProcessedChannels = response.body.conversations.map(function (channelDescriptor) {\n                  return {\n                    descriptor: channelDescriptor,\n                    channel_sid: channelDescriptor.conversation_sid,\n                    status: channelDescriptor.status,\n                    channel: channelDescriptor.sync_objects.conversation,\n                    messages: channelDescriptor.sync_objects.messages,\n                    roster: \"\".concat(channelDescriptor.conversation_sid, \".roster\"),\n                    lastConsumedMessageIndex: channelDescriptor.last_consumed_message_index,\n                    notificationLevel: channelDescriptor.notification_level\n                  };\n                });\n                pageToken = response.body.meta.next_token;\n                channels = [].concat(_toConsumableArray__default['default'](channels), _toConsumableArray__default['default'](preProcessedChannels));\n              case 10:\n                if (pageToken) {\n                  _context9.next = 2;\n                  break;\n                }\n              case 11:\n                return _context9.abrupt(\"return\", channels);\n              case 12:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function _fetchMyChannels() {\n        return _fetchMyChannels2.apply(this, arguments);\n      }\n      return _fetchMyChannels;\n    }()\n  }]);\n  return Channels;\n}(replayEventEmitter.ReplayEventEmitter);\nvar log$2 = Logger.scope('UserDescriptor');\n/**\n * Contains extended user information.\n */\n\nvar UserDescriptor = /*#__PURE__*/function () {\n  /**\n   * User identity.\n   */\n\n  /**\n   * Friendly name of the user, null if not set.\n   */\n\n  /**\n   * Custom attributes of the user.\n   */\n\n  /**\n   * Status of the real-time conversation connection of the user.\n   *\n   * Works only when the reachability functionality is enabled.\n   * Refer to {@link Client.reachabilityEnabled}.\n   */\n\n  /**\n   * User push notification registration status.\n   *\n   * Works only when the reachability functionality is enabled.\n   * Refer to {@link Client.reachabilityEnabled}.\n   */\n\n  /**\n   * @internal\n   */\n  function UserDescriptor(services, descriptor) {\n    _classCallCheck__default['default'](this, UserDescriptor);\n    this.services = services;\n    this.descriptor = descriptor;\n    this.identity = descriptor.identity;\n    this.friendlyName = descriptor.friendly_name;\n    this.attributes = parseAttributes(descriptor.attributes, 'Failed to parse user attributes', log$2);\n    this.online = descriptor.is_online;\n    this.notifiable = descriptor.is_notifiable;\n  }\n  /**\n   * Get the user object from the descriptor and subscribe to it.\n   */\n\n  _createClass__default['default'](UserDescriptor, [{\n    key: \"subscribe\",\n    value: function subscribe() {\n      return this.services.users.getUser(this.identity, this.descriptor.sync_unique_name);\n    }\n  }, {\n    key: \"_getDescriptor\",\n    value: function _getDescriptor() {\n      return this.descriptor;\n    }\n  }]);\n  return UserDescriptor;\n}();\nvar UserDescriptors = /*#__PURE__*/function () {\n  function UserDescriptors(configuration, services) {\n    _classCallCheck__default['default'](this, UserDescriptors);\n    this.configuration = configuration;\n    this.services = services;\n  }\n  _createClass__default['default'](UserDescriptors, [{\n    key: \"getUserDescriptor\",\n    value: function () {\n      var _getUserDescriptor = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(identity) {\n        var url, response;\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = new UriBuilder(this.configuration.links.users).path(identity).build();\n                _context.next = 3;\n                return this.services.network.get(url);\n              case 3:\n                response = _context.sent;\n                return _context.abrupt(\"return\", new UserDescriptor(this.services, response.body));\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getUserDescriptor(_x) {\n        return _getUserDescriptor.apply(this, arguments);\n      }\n      return getUserDescriptor;\n    }()\n  }, {\n    key: \"getChannelUserDescriptors\",\n    value: function () {\n      var _getChannelUserDescriptors = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(channelSid) {\n        var _this = this;\n        var args,\n          url,\n          response,\n          _args2 = arguments;\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                args = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n                url = new UriBuilder(this.configuration.links.users).arg('ConversationSid', channelSid).arg('PageToken', args.pageToken).build();\n                _context2.next = 4;\n                return this.services.network.get(url);\n              case 4:\n                response = _context2.sent;\n                return _context2.abrupt(\"return\", new RestPaginator(response.body.users.map(function (x) {\n                  return new UserDescriptor(_this.services, x);\n                }), function (pageToken) {\n                  return _this.getChannelUserDescriptors(channelSid, {\n                    pageToken: pageToken\n                  });\n                }, response.body.meta.prev_token, response.body.meta.next_token));\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getChannelUserDescriptors(_x2) {\n        return _getChannelUserDescriptors.apply(this, arguments);\n      }\n      return getChannelUserDescriptors;\n    }()\n  }]);\n  return UserDescriptors;\n}();\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$2(Object(source), true).forEach(function (key) {\n        _defineProperty__default['default'](target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$2(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper$1(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf__default['default'](Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf__default['default'](this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn__default['default'](this, result);\n  };\n}\nfunction _isNativeReflectConstruct$1() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @classdesc Container for known users\n * @fires Users#userUpdated\n */\n\nvar Users = /*#__PURE__*/function (_ReplayEventEmitter) {\n  _inherits__default['default'](Users, _ReplayEventEmitter);\n  var _super = _createSuper$1(Users);\n  function Users(myself, configuration, services) {\n    var _this;\n    _classCallCheck__default['default'](this, Users);\n    _this = _super.call(this);\n    _this.configuration = configuration;\n    _this.services = services;\n    _this.fifoStack = [];\n    _this.myself = myself;\n    _this.myself.on('updated', function (args) {\n      return _this.emit('userUpdated', args);\n    });\n    _this.myself.on('userSubscribed', function () {\n      return _this.emit('userSubscribed', _this.myself);\n    });\n    _this.myself.on('userUnsubscribed', function () {\n      _this.emit('userUnsubscribed', _this.myself);\n      _this.myself._ensureFetched();\n    });\n    _this.subscribedUsers = new Map();\n    _this.userDescriptors = new UserDescriptors(_this.configuration, _objectSpread$2(_objectSpread$2({}, _this.services), {}, {\n      users: _assertThisInitialized__default['default'](_this)\n    }));\n    return _this;\n  }\n  _createClass__default['default'](Users, [{\n    key: \"handleUnsubscribeUser\",\n    value: function handleUnsubscribeUser(user) {\n      if (this.subscribedUsers.has(user.identity)) {\n        this.subscribedUsers.delete(user.identity);\n      }\n      var foundItemIndex = -1;\n      var foundItem = this.fifoStack.find(function (item, index) {\n        if (item == user.identity) {\n          foundItemIndex = index;\n          return true;\n        }\n        return false;\n      });\n      if (foundItem) {\n        this.fifoStack.splice(foundItemIndex, 1);\n      }\n      this.emit('userUnsubscribed', user);\n    }\n  }, {\n    key: \"handleSubscribeUser\",\n    value: function handleSubscribeUser(user) {\n      if (this.subscribedUsers.has(user.identity)) {\n        return;\n      }\n      if (this.fifoStack.length >= this.configuration.userInfosToSubscribe) {\n        this.subscribedUsers.get(this.fifoStack.shift()).unsubscribe();\n      }\n      this.fifoStack.push(user.identity);\n      this.subscribedUsers.set(user.identity, user);\n      this.emit('userSubscribed', user);\n    }\n    /**\n     * Gets user, if it's in subscribed list - then return the user object from it,\n     * if not - then subscribes and adds user to the FIFO stack\n     * @returns {Promise<User>} Fully initialized user\n     */\n  }, {\n    key: \"getUser\",\n    value: function () {\n      var _getUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(identity) {\n        var _this2 = this;\n        var entityName,\n          user,\n          userDescriptor,\n          _args = arguments;\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                entityName = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n                _context.next = 3;\n                return this.myself._ensureFetched();\n              case 3:\n                if (!(identity == this.myself.identity)) {\n                  _context.next = 5;\n                  break;\n                }\n                return _context.abrupt(\"return\", this.myself);\n              case 5:\n                user = this.subscribedUsers.get(identity);\n                if (user) {\n                  _context.next = 18;\n                  break;\n                }\n                if (entityName) {\n                  _context.next = 12;\n                  break;\n                }\n                _context.next = 10;\n                return this.getUserDescriptor(identity);\n              case 10:\n                userDescriptor = _context.sent;\n                entityName = userDescriptor._getDescriptor().sync_objects.user_info_map;\n              case 12:\n                user = new User(identity, entityName, this.configuration, this.services);\n                user.on('updated', function (args) {\n                  return _this2.emit('userUpdated', args);\n                });\n                user.on('userSubscribed', function () {\n                  return _this2.handleSubscribeUser(user);\n                });\n                user.on('userUnsubscribed', function () {\n                  return _this2.handleUnsubscribeUser(user);\n                });\n                _context.next = 18;\n                return user._ensureFetched();\n              case 18:\n                return _context.abrupt(\"return\", user);\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getUser(_x) {\n        return _getUser.apply(this, arguments);\n      }\n      return getUser;\n    }()\n    /**\n     * @returns {Promise<UserDescriptor>} User descriptor\n     */\n  }, {\n    key: \"getUserDescriptor\",\n    value: function () {\n      var _getUserDescriptor = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(identity) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.userDescriptors.getUserDescriptor(identity));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getUserDescriptor(_x2) {\n        return _getUserDescriptor.apply(this, arguments);\n      }\n      return getUserDescriptor;\n    }()\n    /**\n     * @returns {Promise<Paginator<UserDescriptor>>} Users descriptors page for given channel sid\n     */\n  }, {\n    key: \"getChannelUserDescriptors\",\n    value: function () {\n      var _getChannelUserDescriptors = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(channelSid) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.userDescriptors.getChannelUserDescriptors(channelSid));\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function getChannelUserDescriptors(_x3) {\n        return _getChannelUserDescriptors.apply(this, arguments);\n      }\n      return getChannelUserDescriptors;\n    }()\n    /**\n     * @returns {Promise<Array<User>>} returns list of subscribed User objects {@see User}\n     */\n  }, {\n    key: \"getSubscribedUsers\",\n    value: function () {\n      var _getSubscribedUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {\n        var users;\n        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.myself._ensureFetched();\n              case 2:\n                users = [this.myself];\n                this.subscribedUsers.forEach(function (user) {\n                  return users.push(user);\n                });\n                return _context4.abrupt(\"return\", users);\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function getSubscribedUsers() {\n        return _getSubscribedUsers.apply(this, arguments);\n      }\n      return getSubscribedUsers;\n    }()\n  }]);\n  return Users;\n}(replayEventEmitter.ReplayEventEmitter);\nvar log$1 = Logger.scope('TypingIndicator');\n/**\n * An important note in regards to typing timeout timers. There are two places that the SDK can get the \"typing_timeout\" attribute from. The first\n * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the\n * \"typing_timeout\" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a\n * notification of type \"twilio.ipmsg.typing_indicator\". In this case, the \"typing_timeout\" value will be +1 of that in the console. This\n * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,\n * the timeout returned from the notification should be used as the timeout for the \"typingEnded\" event, +1 is to account for latency.\n *\n * @private\n */\n\n/**\n * @class TypingIndicator\n *\n * @constructor\n * @private\n */\n\nvar TypingIndicator = /*#__PURE__*/function () {\n  function TypingIndicator(getChannel, configuration, services) {\n    _classCallCheck__default['default'](this, TypingIndicator);\n    this.getChannel = getChannel;\n    this.configuration = configuration;\n    this.services = services;\n    this.serviceTypingTimeout = null;\n    this.sentUpdates = new Map();\n  }\n  _createClass__default['default'](TypingIndicator, [{\n    key: \"typingTimeout\",\n    get: function get() {\n      return this.configuration.typingIndicatorTimeoutOverride || this.serviceTypingTimeout || this.configuration.typingIndicatorTimeoutDefault;\n    }\n    /**\n     * Initialize TypingIndicator controller\n     * Registers for needed message types and sets listeners\n     * @private\n     */\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var _this = this;\n      this.services.notificationClient.on('message', function (type, message) {\n        if (type === NotificationTypes.TYPING_INDICATOR) {\n          _this._handleRemoteTyping(message);\n        }\n      });\n    }\n    /**\n     * Remote members typing events handler\n     * @private\n     */\n  }, {\n    key: \"_handleRemoteTyping\",\n    value: function () {\n      var _handleRemoteTyping2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(message) {\n        var _this2 = this;\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                log$1.trace('Got new typing indicator ', message);\n                this.getChannel(message.channel_sid).then(function (channel) {\n                  if (!channel) {\n                    return;\n                  }\n                  channel.members.forEach(function (member) {\n                    if (member.identity !== message.identity) {\n                      return;\n                    }\n                    var timeout = _this2.configuration.typingIndicatorTimeoutOverride + 1000 || message.typing_timeout * 1000;\n                    member._startTyping(timeout);\n                  });\n                }).catch(function (err) {\n                  log$1.error(err);\n                  throw err;\n                });\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function _handleRemoteTyping(_x) {\n        return _handleRemoteTyping2.apply(this, arguments);\n      }\n      return _handleRemoteTyping;\n    }()\n    /**\n     * Send typing event for the given channel sid\n     * @param {String} channelSid\n     */\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(channelSid) {\n        var lastUpdate;\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                lastUpdate = this.sentUpdates.get(channelSid);\n                if (!(lastUpdate && lastUpdate > Date.now() - this.typingTimeout)) {\n                  _context2.next = 3;\n                  break;\n                }\n                return _context2.abrupt(\"return\", Promise.resolve());\n              case 3:\n                this.sentUpdates.set(channelSid, Date.now());\n                return _context2.abrupt(\"return\", this._send(channelSid));\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function send(_x2) {\n        return _send2.apply(this, arguments);\n      }\n      return send;\n    }()\n  }, {\n    key: \"_send\",\n    value: function () {\n      var _send3 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(channelSid) {\n        var _this3 = this;\n        var url, headers, body;\n        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                log$1.trace('Sending typing indicator');\n                url = this.configuration.links.typing;\n                headers = {\n                  'Content-Type': 'application/x-www-form-urlencoded'\n                };\n                body = 'ChannelSid=' + channelSid;\n                return _context3.abrupt(\"return\", this.services.transport.post(url, headers, body, this.configuration.productId).then(function (response) {\n                  if (response.body.hasOwnProperty('typing_timeout')) {\n                    _this3.serviceTypingTimeout = response.body.typing_timeout * 1000;\n                  }\n                }).catch(function (err) {\n                  log$1.error('Failed to send typing indicator:', err);\n                  throw err;\n                }));\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function _send(_x3) {\n        return _send3.apply(this, arguments);\n      }\n      return _send;\n    }()\n  }]);\n  return TypingIndicator;\n}();\n\n/**\n * Users channels collection\n * It's a cassandra-backed pull-based collection\n */\n\nvar UserChannels = /*#__PURE__*/function () {\n  function UserChannels(client, services, url) {\n    _classCallCheck__default['default'](this, UserChannels);\n    this.client = client;\n    this.services = services;\n    this.url = url;\n  }\n  _createClass__default['default'](UserChannels, [{\n    key: \"getChannels\",\n    value: function () {\n      var _getChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {\n        var _this = this;\n        var args,\n          url,\n          response,\n          _args = arguments;\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                args = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                url = new UriBuilder(this.url).arg('PageToken', args.pageToken).build();\n                _context.next = 4;\n                return this.services.network.get(url);\n              case 4:\n                response = _context.sent;\n                return _context.abrupt(\"return\", new RestPaginator(response.body.conversations.map(function (x) {\n                  return new ChannelDescriptor(_this.client, x);\n                }), function (pageToken) {\n                  return _this.getChannels({\n                    pageToken: pageToken\n                  });\n                }, response.body.meta.previous_token, response.body.meta.next_token));\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getChannels() {\n        return _getChannels.apply(this, arguments);\n      }\n      return getChannels;\n    }()\n  }]);\n  return UserChannels;\n}();\n\n/**\n * Push notification for a Conversations client.\n */\nvar PushNotification =\n/**\n * Title of the notification.\n */\n\n/**\n * Text of the notification.\n */\n\n/**\n * Sound of the notification.\n */\n\n/**\n * Number of the badge.\n */\n\n/**\n * Notification action (`click_action` in FCM/GCM terms and `category` in APN terms).\n */\n\n/**\n * Type of the notification.\n */\n\n/**\n * Additional data of the conversation.\n */\n\n/**\n * @internal\n */\nfunction PushNotification(data) {\n  _classCallCheck__default['default'](this, PushNotification);\n  this.title = data.title || null;\n  this.body = data.body || null;\n  this.sound = data.sound || null;\n  this.badge = data.badge || null;\n  this.action = data.action || null;\n  this.type = data.type || null;\n  this.data = data.data || {};\n};\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$1(Object(source), true).forEach(function (key) {\n        _defineProperty__default['default'](target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar trimSlashes = function trimSlashes(url) {\n  return url.replace(/(^\\/+|\\/+$)/g, '');\n};\nvar isMutationConflictResponse = function isMutationConflictResponse(response) {\n  return response.status.code === 202;\n};\nvar CommandExecutor = /*#__PURE__*/function () {\n  function CommandExecutor(_serviceUrl, _services, _productId) {\n    _classCallCheck__default['default'](this, CommandExecutor);\n    this._serviceUrl = _serviceUrl;\n    this._services = _services;\n    this._productId = _productId;\n  }\n  _createClass__default['default'](CommandExecutor, [{\n    key: \"_preProcessUrl\",\n    value: function _preProcessUrl(url) {\n      var trimmedUrl = trimSlashes(url);\n      if (/^https?:\\/\\//.test(url)) {\n        return trimmedUrl;\n      }\n      return \"\".concat(trimSlashes(this._serviceUrl), \"/\").concat(trimmedUrl);\n    }\n  }, {\n    key: \"_makeRequest\",\n    value: function () {\n      var _makeRequest2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(method, url, requestBody, headers) {\n        var preProcessedUrl, finalHeaders, response, getUrl;\n        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                preProcessedUrl = this._preProcessUrl(url);\n                finalHeaders = _objectSpread$1({\n                  'Content-Type': 'application/json; charset=utf-8'\n                }, headers || {});\n                _context.t0 = method;\n                _context.next = _context.t0 === 'get' ? 5 : _context.t0 === 'post' ? 11 : _context.t0 === 'delete' ? 15 : 19;\n                break;\n              case 5:\n                getUrl = preProcessedUrl;\n                if (requestBody) {\n                  getUrl += '?' + Object.entries(requestBody).map(function (entry) {\n                    return entry.map(encodeURIComponent).join('=');\n                  }).join('&');\n                }\n                _context.next = 9;\n                return this._services.transport.get(getUrl, finalHeaders, this._productId);\n              case 9:\n                response = _context.sent;\n                return _context.abrupt(\"break\", 19);\n              case 11:\n                _context.next = 13;\n                return this._services.transport.post(preProcessedUrl, finalHeaders, JSON.stringify(requestBody), this._productId);\n              case 13:\n                response = _context.sent;\n                return _context.abrupt(\"break\", 19);\n              case 15:\n                _context.next = 17;\n                return this._services.transport.delete(preProcessedUrl, finalHeaders, null, this._productId);\n              case 17:\n                response = _context.sent;\n                return _context.abrupt(\"break\", 19);\n              case 19:\n                if (!(response.status.code < 200 || response.status.code >= 300)) {\n                  _context.next = 21;\n                  break;\n                }\n                throw new Error(\"Request responded with a non-success code \".concat(response.status.code));\n              case 21:\n                return _context.abrupt(\"return\", response);\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function _makeRequest(_x, _x2, _x3, _x4) {\n        return _makeRequest2.apply(this, arguments);\n      }\n      return _makeRequest;\n    }()\n  }, {\n    key: \"fetchResource\",\n    value: function () {\n      var _fetchResource = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(url, requestBody) {\n        var _this = this;\n        var maxAttemptsCount, result;\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                maxAttemptsCount = 6;\n                _context2.prev = 1;\n                _context2.next = 4;\n                return new operationRetrier.AsyncRetrier({\n                  min: 50,\n                  max: 1600,\n                  maxAttemptsCount: maxAttemptsCount\n                }).run(function () {\n                  return _this._makeRequest('get', url, requestBody);\n                });\n              case 4:\n                result = _context2.sent;\n                _context2.next = 10;\n                break;\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](1);\n                throw new Error(\"Fetch resource from \\\"\".concat(url, \"\\\" failed.\"));\n              case 10:\n                return _context2.abrupt(\"return\", result.body);\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[1, 7]]);\n      }));\n      function fetchResource(_x5, _x6) {\n        return _fetchResource.apply(this, arguments);\n      }\n      return fetchResource;\n    }()\n  }, {\n    key: \"mutateResource\",\n    value: function () {\n      var _mutateResource = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(method, url, requestBody) {\n        var result;\n        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._makeRequest(method, url, requestBody, {\n                  'X-Twilio-Mutation-Id': uuid.v4()\n                });\n              case 2:\n                result = _context3.sent;\n                if (!isMutationConflictResponse(result)) {\n                  _context3.next = 7;\n                  break;\n                }\n                _context3.next = 6;\n                return this.fetchResource(result.body.resource_url);\n              case 6:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 7:\n                return _context3.abrupt(\"return\", result.body);\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function mutateResource(_x7, _x8, _x9) {\n        return _mutateResource.apply(this, arguments);\n      }\n      return mutateResource;\n    }()\n  }]);\n  return CommandExecutor;\n}();\nvar version = \"6.0.0\";\nvar _class, _temp;\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty__default['default'](target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf__default['default'](Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf__default['default'](this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn__default['default'](this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar Client_1;\nvar log = Logger.scope('Client');\nvar SDK_VERSION = version;\nvar ClientServices = function ClientServices() {\n  _classCallCheck__default['default'](this, ClientServices);\n};\n/**\n * A client is the starting point to the Twilio Programmable Chat functionality.\n */\n\nexports.Client = Client_1 = (_temp = _class = /*#__PURE__*/function (_ReplayEventEmitter) {\n  _inherits__default['default'](Client, _ReplayEventEmitter);\n  var _super = _createSuper(Client);\n\n  /**\n   * Client connection state.\n   */\n  // @todo make private?\n\n  /**\n   * Current version of the Chat client.\n   */\n\n  /**\n   * Current version of the Chat client.\n   */\n\n  /**\n   * Returned client instance is not yet fully initialized. Calling any operations will block until it is.\n   * Use connection events to monitor when client becomes fully available (connectionStateChanged with state\n   * 'connected') or not available (connectionStateChange with state 'denied', event tokenExpired, event connectionError).\n   *\n   * @param fpaToken Access token\n   * @param options Options to customize the Client\n   * @returns A not yet fully-initialized client.\n   */\n  function Client(fpaToken) {\n    var _this$options, _this$options$logLeve, _this$options$clientM, _this$options$Sync, _this$options$Sync2, _this$options$twilsoc, _this$options$transpo, _this$options$notific, _this$options$syncCli, _ref, _ref2, _this$options$Chat, _this$options2, _this$options3, _configurationOptions, _ref3, _configurationOptions2;\n    var _this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck__default['default'](this, Client);\n    _this = _super.call(this);\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"connectionState\", 'unknown');\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"_ensureReady\", null);\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"_resolveEnsureReady\", null);\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"_rejectEnsureReady\", null);\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"channelsPromise\", null);\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"configurationPromise\", null);\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"version\", SDK_VERSION);\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"parsePushNotification\", Client_1.parsePushNotification);\n    _this.fpaToken = fpaToken;\n    _this.options = options;\n    _this.options = (_this$options = _this.options) !== null && _this$options !== void 0 ? _this$options : {};\n    if (!_this.options.disableDeepClone) {\n      var _options = _objectSpread(_objectSpread({}, _this.options), {}, {\n        transport: undefined,\n        twilsockClient: undefined\n      });\n      _options = deepClone(_options);\n      _options.transport = _this.options.transport;\n      _options.twilsockClient = _this.options.twilsockClient;\n      _this.options = _options;\n    }\n    _this.options.logLevel = (_this$options$logLeve = _this.options.logLevel) !== null && _this$options$logLeve !== void 0 ? _this$options$logLeve : 'silent';\n    log.setLevel(_this.options.logLevel);\n    var productId = _this.options.productId = 'ip_messaging'; // Fill ClientMetadata\n\n    _this.options.clientMetadata = (_this$options$clientM = _this.options.clientMetadata) !== null && _this$options$clientM !== void 0 ? _this$options$clientM : {};\n    if (!_this.options.clientMetadata.hasOwnProperty('type')) {\n      _this.options.clientMetadata.type = 'chat';\n    }\n    if (!_this.options.clientMetadata.hasOwnProperty('sdk')) {\n      _this.options.clientMetadata.sdk = 'JS';\n      _this.options.clientMetadata.sdkv = SDK_VERSION;\n    } // Enable session local storage for Sync\n\n    _this.options.Sync = (_this$options$Sync = _this.options.Sync) !== null && _this$options$Sync !== void 0 ? _this$options$Sync : {};\n    if (!((_this$options$Sync2 = _this.options.Sync) !== null && _this$options$Sync2 !== void 0 && _this$options$Sync2.enableSessionStorage)) {\n      _this.options.Sync.enableSessionStorage = true;\n    }\n    if (_this.options.region) {\n      _this.options.Sync.region = _this.options.region;\n    }\n    _this.services = new ClientServices();\n    var startTwilsock = !_this.options.twilsockClient; // Create default init registrations if none were provided.\n    // Otherwise, the outside party have to list all the init registrations they need, including Sync ones.\n\n    if (!_this.options.initRegistrations) {\n      var initRegistration = new twilsock.InitRegistration(productId);\n      Client_1.populateInitRegistrations(initRegistration);\n      twilioSync.SyncClient.populateInitRegistrations(initRegistration);\n      _this.options.initRegistrations = [initRegistration];\n    }\n    _this.services.twilsockClient = _this.options.twilsockClient = (_this$options$twilsoc = _this.options.twilsockClient) !== null && _this$options$twilsoc !== void 0 ? _this$options$twilsoc : new twilsock.TwilsockClient(fpaToken, productId, _this.options);\n    _this.services.twilsockClient.on('tokenAboutToExpire', function (ttl) {\n      return _this.emit('tokenAboutToExpire', ttl);\n    });\n    _this.services.twilsockClient.on('tokenExpired', function () {\n      return _this.emit('tokenExpired');\n    });\n    _this.services.twilsockClient.on('connectionError', function (error) {\n      return _this.emit('connectionError', error);\n    });\n    _this.services.twilsockClient.on('stateChanged', function (state) {\n      log.debug(\"Handling stateChanged for ChatClient: new state \".concat(state));\n      if (state !== _this.connectionState) {\n        _this.connectionState = state;\n        _this.emit('connectionStateChanged', _this.connectionState);\n      }\n    });\n    _this.services.transport = _this.options.transport = (_this$options$transpo = _this.options.transport) !== null && _this$options$transpo !== void 0 ? _this$options$transpo : _this.options.twilsockClient;\n    _this.services.notificationClient = _this.options.notificationsClient = (_this$options$notific = _this.options.notificationsClient) !== null && _this$options$notific !== void 0 ? _this$options$notific : new notifications.Notifications(fpaToken, _this.options);\n    _this.services.syncClient = _this.options.syncClient = (_this$options$syncCli = _this.options.syncClient) !== null && _this$options$syncCli !== void 0 ? _this$options$syncCli : new twilioSync.SyncClient(fpaToken, _this.options);\n    var configurationOptions = (_ref = (_ref2 = (_this$options$Chat = (_this$options2 = _this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.Chat) !== null && _this$options$Chat !== void 0 ? _this$options$Chat : (_this$options3 = _this.options) === null || _this$options3 === void 0 ? void 0 : _this$options3.IPMessaging) !== null && _ref2 !== void 0 ? _ref2 : _this.options) !== null && _ref !== void 0 ? _ref : {};\n    var region = (_configurationOptions = configurationOptions.region) !== null && _configurationOptions !== void 0 ? _configurationOptions : _this.options.region;\n    var baseUrl = (_ref3 = (_configurationOptions2 = configurationOptions.apiUri) !== null && _configurationOptions2 !== void 0 ? _configurationOptions2 : configurationOptions.typingUri) !== null && _ref3 !== void 0 ? _ref3 : \"https://aim.\".concat(region || 'us1', \".twilio.com\");\n    _this.services.commandExecutor = new CommandExecutor(baseUrl, {\n      transport: _this.options.transport\n    }, productId);\n    var emitFailed = function emitFailed(err) {\n      _this._rejectEnsureReady(err);\n      _this.emit('stateChanged', 'failed');\n    };\n    _this.services.twilsockClient.once('connectionError', emitFailed);\n    _this.services.twilsockClient.once('disconnected', emitFailed); // ChatClient will be able to initialize only after twilsock is connected\n\n    _this.services.twilsockClient.once('connected', /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {\n      return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              log.debug(\"ChatClient started INITIALIZING\");\n              _this.services.twilsockClient.off('connectionError', emitFailed);\n              _this.services.twilsockClient.off('disconnected', emitFailed);\n              _context.prev = 3;\n              _context.next = 6;\n              return _this._initialize();\n            case 6:\n              _context.next = 12;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](3);\n\n              // Fail ChatClient if initialization is incomplete\n              _this._rejectEnsureReady(_context.t0);\n              _this.emit('stateChanged', 'failed');\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 8]]);\n    })));\n    _this._ensureReady = new Promise(function (resolve, reject) {\n      _this._resolveEnsureReady = resolve;\n      _this._rejectEnsureReady = reject;\n    }).catch(function (err) {}); // @todo How to process unhandled rejection here?\n\n    _this._myself = new User('', '', null, _this.services);\n    if (startTwilsock) {\n      _this.services.twilsockClient.connect();\n    }\n    return _this;\n  }\n  /**\n   * Fired when a channel becomes visible to the client. The event is also triggered when the client creates a new channel.\n   * Fired for all channels client has joined.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n\n  _createClass__default['default'](Client, [{\n    key: \"user\",\n    get:\n    /**\n     * Information of the logged-in user. Before client initialization, returns an\n     * uninitialized user. Will trigger a {@link Client.userUpdated} event after\n     * initialization.\n     */\n    function get() {\n      return this._myself;\n    }\n    /**\n     * Client reachability state. Throws if accessed before the client\n     * initialization was completed.\n     */\n  }, {\n    key: \"reachabilityEnabled\",\n    get: function get() {\n      if (!this.configuration) {\n        throw new Error('Reachability information could not yet be accessed as the client ' + \"has not yet been initialized. Subscribe to the 'stateChanged' event \" + 'to properly react to the client initialization.');\n      }\n      return this.configuration.reachabilityEnabled;\n    }\n  }, {\n    key: \"token\",\n    get: function get() {\n      return this.fpaToken;\n    }\n  }, {\n    key: \"_subscribeToPushNotifications\",\n    value: function _subscribeToPushNotifications(channelType) {\n      var _this2 = this;\n      [NotificationTypes.NEW_MESSAGE, NotificationTypes.ADDED_TO_CHANNEL, NotificationTypes.INVITED_TO_CHANNEL, NotificationTypes.REMOVED_FROM_CHANNEL, NotificationTypes.CONSUMPTION_UPDATE] // Supported only on iOS\n      .forEach(function (messageType) {\n        _this2.services.notificationClient.subscribe(channelType, messageType);\n      });\n    }\n  }, {\n    key: \"_unsubscribeFromPushNotifications\",\n    value: function _unsubscribeFromPushNotifications(channelType) {\n      var _this3 = this;\n      [NotificationTypes.NEW_MESSAGE, NotificationTypes.ADDED_TO_CHANNEL, NotificationTypes.INVITED_TO_CHANNEL, NotificationTypes.REMOVED_FROM_CHANNEL, NotificationTypes.CONSUMPTION_UPDATE] // Supported only on iOS\n      .forEach(function (messageType) {\n        _this3.services.notificationClient.unsubscribe(channelType, messageType);\n      });\n    }\n  }, {\n    key: \"_initialize\",\n    value: function () {\n      var _initialize2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {\n        var _this4 = this;\n        var configurationResponse;\n        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.services.commandExecutor.fetchResource('Client/v1/Configuration');\n              case 2:\n                configurationResponse = _context2.sent;\n                this.configuration = new Configuration(this.options, configurationResponse, log);\n                this._myself._resolveInitialization(this.configuration, this.configuration.userIdentity, this.configuration.userInfo, true);\n                this.services.typingIndicator = new TypingIndicator(this.getChannelBySid.bind(this), this.configuration, this.services);\n                this.services.network = new Network(this.configuration, this.services);\n                this.services.users = new Users(this._myself, this.configuration, this.services);\n                this.services.users.on('userSubscribed', this.emit.bind(this, 'userSubscribed'));\n                this.services.users.on('userUpdated', function (args) {\n                  return _this4.emit('userUpdated', args);\n                });\n                this.services.users.on('userUnsubscribed', this.emit.bind(this, 'userUnsubscribed'));\n                this.channels = new Channels(this.configuration, this.services);\n                this.channels.on('channelAdded', this.emit.bind(this, 'channelAdded'));\n                this.channels.on('channelInvited', this.emit.bind(this, 'channelInvited'));\n                this.channels.on('channelRemoved', this.emit.bind(this, 'channelRemoved'));\n                this.channels.on('channelJoined', this.emit.bind(this, 'channelJoined'));\n                this.channels.on('channelLeft', this.emit.bind(this, 'channelLeft'));\n                this.channels.on('channelUpdated', function (args) {\n                  return _this4.emit('channelUpdated', args);\n                });\n                this.channels.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n                this.channels.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n                this.channels.on('memberUpdated', function (args) {\n                  return _this4.emit('memberUpdated', args);\n                });\n                this.channels.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n                this.channels.on('messageUpdated', function (args) {\n                  return _this4.emit('messageUpdated', args);\n                });\n                this.channels.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n                this.channels.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n                this.channels.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n                this.channelsPromise = this.channels.fetchChannels().then(function () {\n                  return _this4.channels;\n                }).catch(function (err) {\n                  throw err;\n                });\n                _context2.next = 29;\n                return this.services.users.myself._ensureFetched();\n              case 29:\n                Client_1.supportedPushChannels.forEach(function (channelType) {\n                  return _this4._subscribeToPushNotifications(channelType);\n                });\n                this.services.typingIndicator.initialize();\n                this.services.publicChannels = new PublicChannels(this, this.services, this.configuration.links.conversations);\n                this.services.userChannels = new UserChannels(this, this.services, this.configuration.links.myConversations);\n                this.services.mcsClient = new mcsClient.McsClient(this.fpaToken, this.configuration.links.mediaService, null, _objectSpread(_objectSpread({}, this.options), {}, {\n                  transport: null\n                }));\n                this._resolveEnsureReady();\n                this.emit('stateChanged', 'initialized');\n              case 36:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function _initialize() {\n        return _initialize2.apply(this, arguments);\n      }\n      return _initialize;\n    }()\n    /**\n     * Gracefully shut down the client.\n     */\n  }, {\n    key: \"shutdown\",\n    value: function () {\n      var _shutdown = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._ensureReady;\n              case 2:\n                _context3.next = 4;\n                return this.services.syncClient.shutdown();\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function shutdown() {\n        return _shutdown.apply(this, arguments);\n      }\n      return shutdown;\n    }()\n    /**\n     * Update the token used by the client and re-register with the Programmable Chat services.\n     * @param token New access token.\n     */\n  }, {\n    key: \"updateToken\",\n    value: function () {\n      var _updateToken = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(token) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._ensureReady;\n              case 2:\n                log.info('updateToken');\n                if (!(this.fpaToken === token)) {\n                  _context4.next = 5;\n                  break;\n                }\n                return _context4.abrupt(\"return\", this);\n              case 5:\n                _context4.next = 7;\n                return this.services.twilsockClient.updateToken(token);\n              case 7:\n                this.fpaToken = token;\n                this.services.mcsClient.updateToken(token);\n                _context4.next = 11;\n                return this.configurationPromise;\n              case 11:\n                return _context4.abrupt(\"return\", this);\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function updateToken(_x) {\n        return _updateToken.apply(this, arguments);\n      }\n      return updateToken;\n    }()\n    /**\n     * Get a known channel by its SID.\n     * @param channelSid Channel sid\n     */\n  }, {\n    key: \"getChannelBySid\",\n    value: function () {\n      var _getChannelBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(channelSid) {\n        var channel;\n        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._ensureReady;\n              case 2:\n                _context5.next = 4;\n                return this.channels.myChannelsRead.promise;\n              case 4:\n                _context5.next = 6;\n                return this.channels.getChannel(channelSid);\n              case 6:\n                channel = _context5.sent;\n                if (channel) {\n                  _context5.next = 11;\n                  break;\n                }\n                _context5.next = 10;\n                return this.services.publicChannels.getChannelBySid(channelSid);\n              case 10:\n                channel = _context5.sent;\n              case 11:\n                _context5.next = 13;\n                return this.channels.pushChannel(channel);\n              case 13:\n                return _context5.abrupt(\"return\", _context5.sent);\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getChannelBySid(_x2) {\n        return _getChannelBySid.apply(this, arguments);\n      }\n      return getChannelBySid;\n    }()\n    /**\n     * Get a known channel by its unique identifier name.\n     * @param uniqueName The unique identifier name of the channel.\n     */\n  }, {\n    key: \"getChannelByUniqueName\",\n    value: function () {\n      var _getChannelByUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(uniqueName) {\n        var channel;\n        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._ensureReady;\n              case 2:\n                _context6.next = 4;\n                return this.channels.myChannelsRead.promise;\n              case 4:\n                _context6.next = 6;\n                return this.services.publicChannels.getChannelByUniqueName(uniqueName);\n              case 6:\n                channel = _context6.sent;\n                _context6.next = 9;\n                return this.channels.pushChannel(channel);\n              case 9:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function getChannelByUniqueName(_x3) {\n        return _getChannelByUniqueName.apply(this, arguments);\n      }\n      return getChannelByUniqueName;\n    }()\n    /**\n     * Get the current list of all the subscribed channels.\n     */\n  }, {\n    key: \"getSubscribedChannels\",\n    value: function () {\n      var _getSubscribedChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(args) {\n        var channelsEntity;\n        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._ensureReady;\n              case 2:\n                _context7.next = 4;\n                return this.channelsPromise;\n              case 4:\n                channelsEntity = _context7.sent;\n                _context7.next = 7;\n                return channelsEntity.getChannels(args);\n              case 7:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function getSubscribedChannels(_x4) {\n        return _getSubscribedChannels.apply(this, arguments);\n      }\n      return getSubscribedChannels;\n    }()\n    /**\n     * Get an array of channels that are locally known to the client in the provided sorting order.\n     * Locally known channels are the ones that are created and/or joined during the client runtime\n     * and all the subscribed channel of the currently-logged-in user.\n     * To ensure that the full list of the subscribed channels has fetched, call the\n     * {@link Client.getSubscribedChannels} method\n     * and fetch all the pages with the help of the {@link RestPaginator.nextPage} method.\n     * @param sortingOptions Sorting options.\n     */\n  }, {\n    key: \"getLocalChannels\",\n    value: function () {\n      var _getLocalChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(sortingOptions) {\n        var channelsEntity, result, sortingOrder;\n        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this._ensureReady;\n              case 2:\n                _context8.next = 4;\n                return this.channelsPromise;\n              case 4:\n                channelsEntity = _context8.sent;\n                result = Array.from(channelsEntity.channels.values());\n                sortingOrder = (sortingOptions === null || sortingOptions === void 0 ? void 0 : sortingOptions.order) || 'ascending';\n                if (sortingOptions !== null && sortingOptions !== void 0 && sortingOptions.criteria) {\n                  if (sortingOptions.criteria === 'lastMessage') {\n                    result.sort(function (a, b) {\n                      return Client_1.compareChannelsByLastMessage(a, b, sortingOrder);\n                    });\n                  } else if (sortingOptions.criteria === 'uniqueName') {\n                    result.sort(function (a, b) {\n                      return Client_1.compareChannelsByStringProperty(a.uniqueName, b.uniqueName, sortingOrder);\n                    });\n                  } else if (sortingOptions.criteria === 'friendlyName') {\n                    result.sort(function (a, b) {\n                      return Client_1.compareChannelsByStringProperty(a.friendlyName, b.friendlyName, sortingOrder);\n                    });\n                  }\n                }\n                return _context8.abrupt(\"return\", result);\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function getLocalChannels(_x5) {\n        return _getLocalChannels.apply(this, arguments);\n      }\n      return getLocalChannels;\n    }()\n  }, {\n    key: \"getPublicChannelDescriptors\",\n    value:\n    /**\n     * Get the content of the public channels directory.\n     */\n    function () {\n      var _getPublicChannelDescriptors = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this._ensureReady;\n              case 2:\n                _context9.next = 4;\n                return this.services.publicChannels.getChannels();\n              case 4:\n                return _context9.abrupt(\"return\", _context9.sent);\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function getPublicChannelDescriptors() {\n        return _getPublicChannelDescriptors.apply(this, arguments);\n      }\n      return getPublicChannelDescriptors;\n    }()\n    /**\n     * Get the content of the channels directory of the user (created by, joined or invited to).\n     */\n  }, {\n    key: \"getUserChannelDescriptors\",\n    value: function () {\n      var _getUserChannelDescriptors = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee10() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this._ensureReady;\n              case 2:\n                _context10.next = 4;\n                return this.services.userChannels.getChannels();\n              case 4:\n                return _context10.abrupt(\"return\", _context10.sent);\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function getUserChannelDescriptors() {\n        return _getUserChannelDescriptors.apply(this, arguments);\n      }\n      return getUserChannelDescriptors;\n    }()\n    /**\n     * Create a channel on the server and subscribe to its events.\n     * The default is a public channel with an empty friendly name.\n     * @param options Options for the channel.\n     */\n  }, {\n    key: \"createChannel\",\n    value: function () {\n      var _createChannel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee11(options) {\n        var channelsEntity;\n        return _regeneratorRuntime__default['default'].wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this._ensureReady;\n              case 2:\n                options = options || {};\n                _context11.next = 5;\n                return this.channelsPromise;\n              case 5:\n                channelsEntity = _context11.sent;\n                _context11.next = 8;\n                return channelsEntity.addChannel(options);\n              case 8:\n                return _context11.abrupt(\"return\", _context11.sent);\n              case 9:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function createChannel(_x6) {\n        return _createChannel.apply(this, arguments);\n      }\n      return createChannel;\n    }()\n    /**\n     * Register for push notifications.\n     * @param channelType Channel type.\n     * @param registrationId Push notification ID provided by the platform.\n     */\n  }, {\n    key: \"setPushRegistrationId\",\n    value: function () {\n      var _setPushRegistrationId = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee12(channelType, registrationId) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this._ensureReady;\n              case 2:\n                this.services.notificationClient.setPushRegistrationId(channelType, registrationId);\n                _context12.next = 5;\n                return this.services.notificationClient.commitChanges();\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function setPushRegistrationId(_x7, _x8) {\n        return _setPushRegistrationId.apply(this, arguments);\n      }\n      return setPushRegistrationId;\n    }()\n    /**\n     * Unregister from push notifications.\n     * @param channelType Channel type.\n     */\n  }, {\n    key: \"unsetPushRegistrationId\",\n    value: function () {\n      var _unsetPushRegistrationId = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee13(channelType) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this._ensureReady;\n              case 2:\n                // await this.services.notificationClient.removeRegistrations(..) // @todo\n                // old version:\n                this._unsubscribeFromPushNotifications(channelType);\n                _context13.next = 5;\n                return this.services.notificationClient.commitChanges();\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function unsetPushRegistrationId(_x9) {\n        return _unsetPushRegistrationId.apply(this, arguments);\n      }\n      return unsetPushRegistrationId;\n    }()\n  }, {\n    key: \"handlePushNotification\",\n    value:\n    /**\n     * Handle push notification payload parsing and emit the {@link Client.pushNotification} event on this {@link Client} instance.\n     * @param notificationPayload Push notification payload\n     */\n    function () {\n      var _handlePushNotification = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee14(notificationPayload) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this._ensureReady;\n              case 2:\n                log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n                this.emit('pushNotification', Client_1.parsePushNotification(notificationPayload));\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function handlePushNotification(_x10) {\n        return _handlePushNotification.apply(this, arguments);\n      }\n      return handlePushNotification;\n    }()\n    /**\n     * Gets a user with the given identity. If it's in the subscribed list, then return the user object from it;\n     * if not, then subscribe and add user to the subscribed list.\n     * @param identity Identity of the user.\n     * @returns A fully initialized user.\n     */\n  }, {\n    key: \"getUser\",\n    value: function () {\n      var _getUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee15(identity) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this._ensureReady;\n              case 2:\n                _context15.next = 4;\n                return this.services.users.getUser(identity);\n              case 4:\n                return _context15.abrupt(\"return\", _context15.sent);\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function getUser(_x11) {\n        return _getUser.apply(this, arguments);\n      }\n      return getUser;\n    }()\n    /**\n     * Gets the user descriptor for given identity.\n     * @param identity Identity of the user.\n     * @returns The user descriptor.\n     */\n  }, {\n    key: \"getUserDescriptor\",\n    value: function () {\n      var _getUserDescriptor = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee16(identity) {\n        return _regeneratorRuntime__default['default'].wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this._ensureReady;\n              case 2:\n                _context16.next = 4;\n                return this.services.users.getUserDescriptor(identity);\n              case 4:\n                return _context16.abrupt(\"return\", _context16.sent);\n              case 5:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function getUserDescriptor(_x12) {\n        return _getUserDescriptor.apply(this, arguments);\n      }\n      return getUserDescriptor;\n    }()\n    /**\n     * Get a list of subscribed user objects.\n     */\n  }, {\n    key: \"getSubscribedUsers\",\n    value: function () {\n      var _getSubscribedUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee17() {\n        return _regeneratorRuntime__default['default'].wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this._ensureReady;\n              case 2:\n                _context17.next = 4;\n                return this.services.users.getSubscribedUsers();\n              case 4:\n                return _context17.abrupt(\"return\", _context17.sent);\n              case 5:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function getSubscribedUsers() {\n        return _getSubscribedUsers.apply(this, arguments);\n      }\n      return getSubscribedUsers;\n    }()\n  }], [{\n    key: \"create\",\n    value:\n    /**\n     * @deprecated Call constructor directly.\n     *\n     * Factory method to create Chat client instance.\n     *\n     * The factory method will automatically trigger connection.\n     * Do not use it if you need finer-grained control.\n     *\n     * @param token Access token.\n     * @param options Options to customize the client.\n     * @returns Returns a fully initialized client.\n     */\n    function () {\n      var _create = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee18(token, options) {\n        var client;\n        return _regeneratorRuntime__default['default'].wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                if (!(options !== null && options !== void 0 && options.twilsockClient)) {\n                  _context18.next = 2;\n                  break;\n                }\n                throw new Error('Obsolete usage of ChatClient.create() factory method: if you pass twilsock from the outside then you must use ChatClient constructor and be prepared to work with uninitialized client.');\n              case 2:\n                client = new Client_1(token, options);\n                _context18.next = 5;\n                return client._ensureReady;\n              case 5:\n                return _context18.abrupt(\"return\", client);\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18);\n      }));\n      function create(_x13, _x14) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n  }, {\n    key: \"populateInitRegistrations\",\n    value: function populateInitRegistrations(reg) {\n      reg.populateInitRegistrations([NotificationTypes.TYPING_INDICATOR]);\n    }\n  }, {\n    key: \"compareChannelsByLastMessage\",\n    value: function compareChannelsByLastMessage(a, b, order) {\n      var lessThan = function lessThan(a, b) {\n        var _a$lastMessage, _a$lastMessage$dateCr, _b$lastMessage, _b$lastMessage$dateCr, _a$lastMessage2, _a$lastMessage2$dateC, _b$lastMessage2, _b$lastMessage2$dateC, _b$lastMessage3, _a$lastMessage3;\n        if (((_a$lastMessage = a.lastMessage) === null || _a$lastMessage === void 0 ? void 0 : (_a$lastMessage$dateCr = _a$lastMessage.dateCreated) === null || _a$lastMessage$dateCr === void 0 ? void 0 : _a$lastMessage$dateCr.getTime()) > ((_b$lastMessage = b.lastMessage) === null || _b$lastMessage === void 0 ? void 0 : (_b$lastMessage$dateCr = _b$lastMessage.dateCreated) === null || _b$lastMessage$dateCr === void 0 ? void 0 : _b$lastMessage$dateCr.getTime())) {\n          // console.log('A time > B time');\n          return 1;\n        } else if (((_a$lastMessage2 = a.lastMessage) === null || _a$lastMessage2 === void 0 ? void 0 : (_a$lastMessage2$dateC = _a$lastMessage2.dateCreated) === null || _a$lastMessage2$dateC === void 0 ? void 0 : _a$lastMessage2$dateC.getTime()) < ((_b$lastMessage2 = b.lastMessage) === null || _b$lastMessage2 === void 0 ? void 0 : (_b$lastMessage2$dateC = _b$lastMessage2.dateCreated) === null || _b$lastMessage2$dateC === void 0 ? void 0 : _b$lastMessage2$dateC.getTime())) {\n          // console.log('A time < B time');\n          return -1;\n        }\n        if ((_b$lastMessage3 = b.lastMessage) !== null && _b$lastMessage3 !== void 0 && _b$lastMessage3.dateCreated) {\n          // console.log('B has time');\n          return 1;\n        } else if ((_a$lastMessage3 = a.lastMessage) !== null && _a$lastMessage3 !== void 0 && _a$lastMessage3.dateCreated) {\n          // console.log('A has time');\n          return -1;\n        }\n        if (b.lastMessage) {\n          // console.log('B has lastmessage');\n          return 1;\n        } else if (a.lastMessage) {\n          // console.log('A has lastmessage');\n          return -1;\n        }\n        return 0;\n      };\n      var result = lessThan(a, b);\n      console.log(\"Sorted \".concat(a.sid, \" and \").concat(b.sid, \": return \").concat(result));\n      return order === 'ascending' ? result : -result;\n    }\n  }, {\n    key: \"compareChannelsByStringProperty\",\n    value: function compareChannelsByStringProperty(str1, str2, order) {\n      var lessThan = function lessThan(a, b) {\n        if (a && b) {\n          return str1.localeCompare(str2);\n        } else if (b) {\n          return 1;\n        } else if (a) {\n          return -1;\n        }\n        return 0;\n      };\n      var result = lessThan(str1, str2);\n      return order === 'ascending' ? result : -result;\n    }\n  }, {\n    key: \"parsePushNotificationChatData\",\n    value: function parsePushNotificationChatData(data) {\n      var result = {};\n      for (var key in Client_1.supportedPushDataFields) {\n        if (typeof data[key] !== 'undefined' && data[key] !== null) {\n          if (key === 'message_index') {\n            if (parseToNumber(data[key]) !== null) {\n              result[Client_1.supportedPushDataFields[key]] = Number(data[key]);\n            }\n          } else {\n            result[Client_1.supportedPushDataFields[key]] = data[key];\n          }\n        }\n      }\n      return result;\n    }\n    /**\n     * Static method for push notification payload parsing. Returns parsed push as a {@link PushNotification} object.\n     * @param notificationPayload Push notification payload.\n     */\n  }, {\n    key: \"parsePushNotification\",\n    value: function parsePushNotification(notificationPayload) {\n      log.debug('parsePushNotification, notificationPayload=', notificationPayload); // APNS specifics\n\n      if (typeof notificationPayload.aps !== 'undefined') {\n        if (!notificationPayload.twi_message_type) {\n          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n        }\n        var data = Client_1.parsePushNotificationChatData(notificationPayload);\n        var apsPayload = notificationPayload.aps;\n        var body = null;\n        var title = null;\n        if (typeof apsPayload.alert === 'string') {\n          body = apsPayload.alert || null;\n        } else {\n          body = apsPayload.alert.body || null;\n          title = apsPayload.alert.title || null;\n        }\n        return new PushNotification({\n          title: title,\n          body: body,\n          sound: apsPayload.sound || null,\n          badge: apsPayload.badge || null,\n          action: apsPayload.category || null,\n          type: notificationPayload.twi_message_type,\n          data: data\n        });\n      } // FCM specifics\n\n      if (typeof notificationPayload.data !== 'undefined') {\n        var dataPayload = notificationPayload.data;\n        if (!dataPayload.twi_message_type) {\n          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n        }\n        var _data = Client_1.parsePushNotificationChatData(notificationPayload.data);\n        return new PushNotification({\n          title: dataPayload.twi_title || null,\n          body: dataPayload.twi_body || null,\n          sound: dataPayload.twi_sound || null,\n          badge: null,\n          action: dataPayload.twi_action || null,\n          type: dataPayload.twi_message_type,\n          data: _data\n        });\n      }\n      throw new Error('Provided push notification payload is not Programmable Chat notification');\n    }\n  }]);\n  return Client;\n}(replayEventEmitter.ReplayEventEmitter), _defineProperty__default['default'](_class, \"version\", SDK_VERSION), _defineProperty__default['default'](_class, \"supportedPushChannels\", ['fcm', 'apn']), _defineProperty__default['default'](_class, \"supportedPushDataFields\", {\n  'channel_sid': 'channelSid',\n  'message_sid': 'messageSid',\n  'message_index': 'messageIndex'\n}), _defineProperty__default['default'](_class, \"channelAdded\", 'channelAdded'), _defineProperty__default['default'](_class, \"channelInvited\", 'channelInvited'), _defineProperty__default['default'](_class, \"channelJoined\", 'channelJoined'), _defineProperty__default['default'](_class, \"channelLeft\", 'channelLeft'), _defineProperty__default['default'](_class, \"channelRemoved\", 'channelRemoved'), _defineProperty__default['default'](_class, \"channelUpdated\", 'channelUpdated'), _defineProperty__default['default'](_class, \"memberJoined\", 'memberJoined'), _defineProperty__default['default'](_class, \"memberLeft\", 'memberLeft'), _defineProperty__default['default'](_class, \"memberUpdated\", 'memberUpdated'), _defineProperty__default['default'](_class, \"messageAdded\", 'messageAdded'), _defineProperty__default['default'](_class, \"messageRemoved\", 'messageRemoved'), _defineProperty__default['default'](_class, \"messageUpdated\", 'messageUpdated'), _defineProperty__default['default'](_class, \"tokenAboutToExpire\", 'tokenAboutToExpire'), _defineProperty__default['default'](_class, \"tokenExpired\", 'tokenExpired'), _defineProperty__default['default'](_class, \"typingEnded\", 'typingEnded'), _defineProperty__default['default'](_class, \"typingStarted\", 'typingStarted'), _defineProperty__default['default'](_class, \"pushNotification\", 'pushNotification'), _defineProperty__default['default'](_class, \"userSubscribed\", 'userSubscribed'), _defineProperty__default['default'](_class, \"userUnsubscribed\", 'userUnsubscribed'), _defineProperty__default['default'](_class, \"userUpdated\", 'userUpdated'), _defineProperty__default['default'](_class, \"connectionError\", 'connectionError'), _defineProperty__default['default'](_class, \"stateChanged\", 'stateChanged'), _defineProperty__default['default'](_class, \"connectionStateChanged\", 'connectionStateChanged'), _temp);\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], exports.Client.prototype, \"updateToken\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], exports.Client.prototype, \"getChannelBySid\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], exports.Client.prototype, \"getChannelByUniqueName\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(['undefined', declarativeTypeValidator.objectSchema('sorting options', {\n  criteria: [declarativeTypeValidator.literal('lastMessage', 'friendlyName', 'uniqueName'), 'undefined'],\n  order: [declarativeTypeValidator.literal('ascending', 'descending'), 'undefined']\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Promise)], exports.Client.prototype, \"getLocalChannels\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(['undefined', declarativeTypeValidator.objectSchema('channel options', {\n  friendlyName: ['string', 'undefined'],\n  isPrivate: ['boolean', 'undefined'],\n  uniqueName: ['string', 'undefined']\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Promise)], exports.Client.prototype, \"createChannel\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.literal('fcm', 'apn'), 'string'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String]), __metadata(\"design:returntype\", Promise)], exports.Client.prototype, \"setPushRegistrationId\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.literal('fcm', 'apn')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], exports.Client.prototype, \"unsetPushRegistrationId\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Promise)], exports.Client.prototype, \"handlePushNotification\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], exports.Client.prototype, \"getUser\", null);\n__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", Promise)], exports.Client.prototype, \"getUserDescriptor\", null);\n__decorate([declarativeTypeValidator.validateTypes(declarativeTypeValidator.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", PushNotification)], exports.Client, \"parsePushNotification\", null);\nexports.Client = Client_1 = __decorate([declarativeTypeValidator.validateConstructorTypes(declarativeTypeValidator.nonEmptyString, [declarativeTypeValidator.pureObject, 'undefined', declarativeTypeValidator.literal(null)]), __metadata(\"design:paramtypes\", [String, Object])], exports.Client);\nexports.Channel = Channel;\nexports.ChannelDescriptor = ChannelDescriptor;\nexports.Media = Media;\nexports.Member = Member;\nexports.Message = Message;\nexports.PushNotification = PushNotification;\nexports.RestPaginator = RestPaginator;\nexports.User = User;\nexports.UserDescriptor = UserDescriptor;","map":{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../src/logger.ts","../src/configuration.ts","../src/util/index.ts","../src/user.ts","../src/restpaginator.ts","../src/channeldescriptor.ts","../src/data/publicchannels.ts","../src/services/network.ts","../src/interfaces/notificationtypes.ts","../src/member.ts","../src/data/members.ts","../src/media.ts","../src/message.ts","../src/data/messages.ts","../src/channel.ts","../src/util/deferred.ts","../src/data/channels.ts","../src/userdescriptor.ts","../src/data/userdescriptors.ts","../src/data/users.ts","../src/services/typingindicator.ts","../src/data/userchannels.ts","../src/pushnotification.ts","../src/commandexecutor.ts","../src/client.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","log","loglevelLog","toSeconds","parseDuration","parseTime","ReplayEventEmitter","isEqual","validateTypesAsync","literal","Retrier","nonEmptyString","nonNegativeInteger","custom","objectSchema","AsyncRetrier","uuidv4","validateConstructorTypes","pureObject","Client","InitRegistration","TwilsockClient","NotificationClient","SyncClient","ChannelsEntity","McsClient","validateTypes"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import * as loglevelLog from 'loglevel';\n\nfunction prepareLine(prefix, args) {\n  return [`${new Date().toISOString()} Chat ${prefix}:`].concat(Array.from(args));\n}\n\nconst log: loglevelLog.Logger = loglevelLog.getLogger('twilio-chat'); // twilio-chat is used by Flex SDK. Please DO NOT change\n\nclass Logger {\n  private prefix: string = '';\n\n  private constructor(prefix: string) {\n    this.prefix = prefix !== null && prefix !== undefined && prefix.length > 0\n      ? prefix + ' '\n      : '';\n  }\n\n  static scope(prefix: string): Logger {\n    return new Logger(prefix);\n  }\n\n  setLevel(level: any) {\n    log.setLevel(level);\n  }\n\n  static setLevel(level: any) {\n    log.setLevel(level);\n  }\n\n  trace(...args) { log.trace.apply(null, prepareLine(this.prefix + 'T', args)); }\n\n  debug(...args) { log.debug.apply(null, prepareLine(this.prefix + 'D', args)); }\n\n  info(...args) { log.info.apply(null, prepareLine(this.prefix + 'I', args)); }\n\n  warn(...args) { log.warn.apply(null, prepareLine(this.prefix + 'W', args)); }\n\n  error(...args) { log.error.apply(null, prepareLine(this.prefix + 'E', args)); }\n\n  static trace(...args) { log.trace.apply(null, prepareLine('T', args)); }\n\n  static debug(...args) { log.debug.apply(null, prepareLine('D', args)); }\n\n  static info(...args) { log.info.apply(null, prepareLine('I', args)); }\n\n  static warn(...args) { log.warn.apply(null, prepareLine('W', args)); }\n\n  static error(...args) { log.error.apply(null, prepareLine('E', args)); }\n\n}\n\nexport { Logger };\n","import { CommandExecutor } from './commandexecutor';\nimport { ConfigurationResponse } from './interfaces/commands/configuration';\nimport { parse as parseDuration, toSeconds } from 'iso8601-duration';\nimport { Logger } from './logger';\n\nconst TYPING_TIMEOUT = 5;\nconst HTTP_CACHE_LIFETIME = 'PT5S';\nconst CONSUMPTION_HORIZON_SENDING_INTERVAL = 'PT5S';\nconst USER_INFOS_TO_SUBSCRIBE = 100;\n\nconst MINIMUM_RETRY_DELAY = 1000;\nconst MAXIMUM_RETRY_DELAY = 4000;\nconst MAXIMUM_ATTEMPTS_COUNT = 3;\nconst RETRY_WHEN_THROTTLED = true;\n\ninterface BackoffConfiguration {\n  min: number;\n  max: number;\n  maxAttemptsCount: number;\n}\n\ninterface ConfigurationServices {\n  commandExecutor: CommandExecutor;\n}\n\nclass Configuration {\n  public readonly links: {\n    myConversations: string;\n    conversations: string;\n    users: string;\n    currentUser: string;\n    typing: string;\n    mediaService: string;\n    messagesReceipts: string;\n  };\n\n  public readonly productId?: string;\n\n  public readonly typingIndicatorTimeoutOverride?: number;\n  public readonly typingIndicatorTimeoutDefault: number = TYPING_TIMEOUT * 1000;\n  public readonly backoffConfiguration: BackoffConfiguration;\n  public readonly retryWhenThrottled: boolean;\n\n  public readonly consumptionReportInterval: number;\n  public readonly userInfosToSubscribe: number;\n  public readonly httpCacheInterval: number;\n  public readonly reachabilityEnabled: boolean;\n\n  public readonly userIdentity: string;\n  public readonly userInfo: string;\n  public readonly myConversations: string;\n\n  constructor(\n    options: Record<string, any> = {},\n    configurationResponse: ConfigurationResponse,\n    logger: Logger\n  ) {\n    const constructorOptions = options.Chat || options.IPMessaging || options || {};\n\n    this.productId = constructorOptions.productId;\n\n    this.links = {\n      myConversations: configurationResponse.links.my_conversations,\n      conversations: configurationResponse.links.conversations,\n      users: configurationResponse.links.users,\n      currentUser: configurationResponse.links.current_user,\n      typing: configurationResponse.links.typing,\n      mediaService: configurationResponse.links.media_service,\n      messagesReceipts: configurationResponse.links.messages_receipts\n    };\n\n    this.typingIndicatorTimeoutOverride = constructorOptions.typingIndicatorTimeoutOverride;\n    this.backoffConfiguration = {\n      min: MINIMUM_RETRY_DELAY,\n      max: MAXIMUM_RETRY_DELAY,\n      maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT,\n      ...constructorOptions.backoffConfigOverride\n    };\n    this.retryWhenThrottled = constructorOptions.retryWhenThrottledOverride !== undefined\n      ? constructorOptions.retryWhenThrottledOverride\n      : RETRY_WHEN_THROTTLED;\n    this.userInfosToSubscribe = constructorOptions.userInfosToSubscribeOverride\n      || configurationResponse.options.user_infos_to_subscribe\n      || USER_INFOS_TO_SUBSCRIBE;\n    this.reachabilityEnabled = configurationResponse.options.reachability_enabled;\n    this.userIdentity = configurationResponse.identity;\n    this.userInfo = configurationResponse.sync_objects.my_user_info;\n    this.myConversations = configurationResponse.sync_objects.my_conversations;\n\n    const httpCacheInterval = constructorOptions.httpCacheIntervalOverride\n      || configurationResponse.options.http_cache_interval\n      || HTTP_CACHE_LIFETIME;\n\n    try {\n      this.httpCacheInterval = toSeconds(parseDuration(httpCacheInterval));\n    } catch {\n      logger.error(`Failed to parse http cache interval ${httpCacheInterval}, using default value ${HTTP_CACHE_LIFETIME}`);\n      this.httpCacheInterval = toSeconds(parseDuration(HTTP_CACHE_LIFETIME));\n    }\n\n    const consumptionReportInterval = constructorOptions.consumptionReportIntervalOverride\n      || configurationResponse.options.consumption_report_interval\n      || CONSUMPTION_HORIZON_SENDING_INTERVAL;\n\n    try {\n      this.consumptionReportInterval = toSeconds(parseDuration(consumptionReportInterval));\n    } catch {\n      logger.error(\n        `Failed to parse consumption report interval ${consumptionReportInterval}, using default value ${CONSUMPTION_HORIZON_SENDING_INTERVAL}`\n      );\n      this.consumptionReportInterval = toSeconds(parseDuration(CONSUMPTION_HORIZON_SENDING_INTERVAL));\n    }\n  }\n}\n\nexport { Configuration };","import { Logger } from '../logger';\n\n/**\n * Deep-clone an object. Note that this does not work on object containing\n * functions.\n * @param {object} obj - the object to deep-clone\n * @returns {object}\n */\nfunction deepClone<T>(obj: T): T {\n  return JSON.parse(JSON.stringify(obj)) as T;\n}\n\nfunction parseToNumber(value) {\n  if (typeof value !== 'undefined' && !isNaN(Number(value))) {\n    return Number(value);\n  }\n  return null;\n}\n\n// timeString cannot be typed `string` because in member.ts\n// call to parseTime(data.lastConsumptionTimestamp) uses number not a string for timestamp.\nfunction parseTime(timeString): Date {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction parseAttributes(rawAttributes, warningMessage: string, log: Logger): Object {\n  let attributes = {};\n  if (rawAttributes) {\n    try {\n      attributes = JSON.parse(rawAttributes);\n    } catch (e) {\n      log.warn(warningMessage, e);\n    }\n  }\n\n  return attributes;\n}\n\n/**\n * Construct URI with query parameters\n */\nclass UriBuilder {\n  private base: string;\n  private args: string[];\n  private paths: string[];\n\n  constructor(base: string) {\n    this.base = base.replace(/\\/$/, '');\n    this.args = [];\n    this.paths = [];\n  }\n\n  public arg(name: string, value: any): UriBuilder {\n    if (typeof value !== 'undefined') {\n      this.args.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));\n    }\n    return this;\n  }\n\n  public path(name: string): UriBuilder {\n    this.paths.push(encodeURIComponent(name));\n    return this;\n  }\n\n  public build(): string {\n    let result = this.base;\n    if (this.paths.length) {\n      result += '/' + this.paths.join('/');\n    }\n\n    if (this.args.length) {\n      result += '?' + this.args.join('&');\n    }\n    return result;\n  }\n}\n\nexport { deepClone, UriBuilder, parseToNumber, parseTime, parseAttributes };\n","import { Logger } from './logger';\nimport { SyncClient } from 'twilio-sync';\nimport { parseAttributes } from './util';\nimport { validateTypesAsync, literal } from '@twilio/declarative-type-validator';\nimport { Configuration } from './configuration';\nimport { CommandExecutor } from './commandexecutor';\nimport { EditUserRequest, EditUserResponse } from './interfaces/commands/edituser';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype UserEvents = {\n  updated: (data: {\n    user: User,\n    updateReasons: UserUpdateReason[]\n  }) => void;\n  userSubscribed: (user: User) => void;\n  userUnsubscribed: (user: User) => void;\n};\n\nconst log = Logger.scope('User');\n\ninterface UserState {\n  identity: string;\n  entityName: string;\n  friendlyName: string;\n  attributes: any;\n  online: boolean;\n  notifiable: boolean;\n}\n\ninterface UserServices {\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface UserLinks {\n  self: string;\n}\n\ntype SubscriptionState =\n  | 'initializing'\n  | 'subscribed'\n  | 'unsubscribed';\n\n/**\n * The reason for the `updated` event being emitted by a user.\n */\ntype UserUpdateReason =\n  | 'friendlyName'\n  | 'attributes'\n  | 'online'\n  | 'notifiable';\n\ninterface UserUpdatedEventArgs {\n  user: User;\n  updateReasons: UserUpdateReason[];\n}\n\n/**\n * Extended user information.\n * Note that `isOnline` and `isNotifiable` properties are eligible\n * for use only if the reachability function is enabled.\n * You may check if it is enabled by reading the value of {@link Client.reachabilityEnabled}.\n */\nclass User extends ReplayEventEmitter<UserEvents> {\n\n  private entity: any;\n  private state: UserState;\n  private promiseToFetch: Promise<User> | null = null;\n  private subscribed: SubscriptionState;\n\n  private links: UserLinks;\n  private configuration: Configuration;\n  private readonly services: UserServices;\n\n  private _initializationPromise: Promise<void>;\n  private _resolveInitializationPromise: any;\n\n  /**\n   * @internal\n   */\n  constructor(\n    identity: string,\n    entityName: string,\n    configuration: Configuration | null,\n    services: UserServices\n  ) {\n    super();\n\n    this.services = services;\n\n    this.subscribed = 'initializing';\n    this.setMaxListeners(0);\n\n    this.state = {\n      identity,\n      entityName,\n      friendlyName: null,\n      attributes: {},\n      online: null,\n      notifiable: null\n    };\n\n    this._initializationPromise = new Promise((resolve) => {\n      this._resolveInitializationPromise = resolve;\n    });\n\n    if (configuration !== null) {\n      this._resolveInitialization(\n        configuration,\n        identity,\n        entityName,\n        false\n      );\n    }\n  }\n\n  /**\n   * Fired when the properties or the reachability status of the message have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link User} `user` - the user in question\n   *     * {@link UserUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  public readonly updated = 'updated';\n\n  /**\n   * Fired when the client has subscribed to the user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public readonly userSubscribed = 'userSubscribed';\n\n  /**\n   * Fired when the client has unsubscribed from the user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public readonly userUnsubscribed = 'userUnsubscribed';\n\n  /**\n   * User identity.\n   */\n  public get identity(): string { return this.state.identity; }\n\n  public set identity(identity: string) { this.state.identity = identity; }\n\n  public set entityName(name: string) { this.state.entityName = name; }\n\n  /**\n   * Custom attributes of the user.\n   */\n  public get attributes() { return this.state.attributes; }\n\n  /**\n   * Friendly name of the user, null if not set.\n   */\n  public get friendlyName(): string { return this.state.friendlyName; }\n\n  /**\n   * Status of the real-time conversation connection of the user.\n   */\n  public get online(): boolean { return this.state.online; }\n\n  /**\n   * User push notification registration status.\n   */\n  public get notifiable(): boolean { return this.state.notifiable; }\n\n  /**\n   * True if this user is receiving real-time status updates.\n   */\n  public get isSubscribed(): boolean { return this.subscribed == 'subscribed'; }\n\n  // Handles service updates\n  private async _update(key: string, value: any) {\n    await this._initializationPromise;\n\n    let updateReasons: UserUpdateReason[] = [];\n    log.debug('User for', this.state.identity, 'updated:', key, value);\n    switch (key) {\n      case 'friendlyName':\n        if (this.state.friendlyName !== value.value) {\n          updateReasons.push('friendlyName');\n          this.state.friendlyName = value.value;\n        }\n        break;\n      case 'attributes':\n        const updateAttributes = parseAttributes(value.value, `Retrieved malformed attributes from the server for user: ${this.state.identity}`, log);\n        if (!isEqual(this.state.attributes, updateAttributes)) {\n          this.state.attributes = updateAttributes;\n          updateReasons.push('attributes');\n        }\n        break;\n      case 'reachability':\n        if (this.state.online !== value.online) {\n          this.state.online = value.online;\n          updateReasons.push('online');\n        }\n        if (this.state.notifiable !== value.notifiable) {\n          this.state.notifiable = value.notifiable;\n          updateReasons.push('notifiable');\n        }\n        break;\n      default:\n        return;\n    }\n    if (updateReasons.length > 0) {\n      this.emit('updated', { user: this, updateReasons: updateReasons });\n    }\n  }\n\n  // Fetch reachability info\n  private async _updateReachabilityInfo(map, update): Promise<void> {\n    await this._initializationPromise;\n\n    if (!this.configuration.reachabilityEnabled) {\n      return;\n    }\n\n    return map.get('reachability')\n      .then(update)\n      .catch(err => { log.warn('Failed to get reachability info for ', this.state.identity, err); });\n  }\n\n  // Fetch user\n  private async _fetch(): Promise<User> {\n    await this._initializationPromise;\n\n    if (!this.state.entityName) {\n      return this;\n    }\n\n    this.promiseToFetch = this.services.syncClient.map({ id: this.state.entityName, mode: 'open_existing', includeItems: true })\n                              .then(map => {\n                                this.entity = map;\n                                map.on('itemUpdated', args => {\n                                  log.debug(`${this.state.entityName} (${this.state.identity}) itemUpdated: ${args.item.key}`);\n                                  return this._update(args.item.key, args.item.data);\n                                });\n                                return Promise.all([\n                                  map.get('friendlyName')\n                                     .then(item => this._update(item.key, item.data)),\n                                  map.get('attributes')\n                                     .then(item => this._update(item.key, item.data)),\n                                  this._updateReachabilityInfo(map,\n                                    item => this._update(item.key, item.data))\n                                ]);\n                              })\n                              .then(() => {\n                                log.debug('Fetched for', this.identity);\n                                this.subscribed = 'subscribed';\n                                this.emit('userSubscribed', this);\n                                return this;\n                              })\n                              .catch(err => {\n                                this.promiseToFetch = null;\n                                throw err;\n                              });\n    return this.promiseToFetch;\n  }\n\n  // Not private because it is accessed from Client constructor.\n  async _ensureFetched(): Promise<User> {\n    await this._initializationPromise;\n    return this.promiseToFetch || this._fetch();\n  }\n\n  /**\n   * Edit user attributes.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<User> {\n    await this._initializationPromise;\n    if (this.subscribed == 'unsubscribed') {\n      throw new Error('Can\\'t modify unsubscribed object');\n    }\n\n    await this.services.commandExecutor.mutateResource<EditUserRequest, EditUserResponse>(\n      'post',\n      this.links.self,\n      {\n        attributes: JSON.stringify(attributes)\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Update the friendly name of the user.\n   * @param friendlyName New friendly name.\n   */\n  @validateTypesAsync('string')\n  public async updateFriendlyName(friendlyName): Promise<User> {\n    await this._initializationPromise;\n\n    if (this.subscribed == 'unsubscribed') {\n      throw new Error('Can\\'t modify unsubscribed object');\n    }\n\n    await this.services.commandExecutor.mutateResource<EditUserRequest, EditUserResponse>(\n      'post',\n      this.links.self,\n      {\n        friendly_name: friendlyName\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Remove the user from the subscription list.\n   * @return A promise of completion.\n   */\n  public async unsubscribe(): Promise<void> {\n    await this._initializationPromise;\n\n    if (this.promiseToFetch) {\n      await this.promiseToFetch;\n      this.entity.close();\n      this.promiseToFetch = null;\n      this.subscribed = 'unsubscribed';\n      this.emit('userUnsubscribed', this);\n    }\n  }\n\n  public _resolveInitialization(\n    configuration: Configuration,\n    identity: string,\n    entityName: string,\n    emitUpdated: boolean\n  ): void {\n    this.configuration = configuration;\n    this.identity = identity;\n    this.entityName = entityName;\n    this.links = {\n      self: `${this.configuration.links.users}/${this.identity}`\n    };\n    this._resolveInitializationPromise();\n\n    if (emitUpdated) {\n      this.emit('updated', {\n        user: this,\n        updateReasons: [\n          'friendlyName',\n          'attributes',\n          'online',\n          'notifiable'\n        ]\n      });\n    }\n  }\n}\n\nexport {\n  User,\n  UserServices,\n  SubscriptionState,\n  UserUpdateReason,\n  UserUpdatedEventArgs\n};\n","import { Paginator } from './interfaces/paginator';\n\ninterface PaginatorState {\n  source: any;\n  nextToken: any;\n  prevToken: any;\n  items: any;\n}\n\n/**\n * Pagination helper class.\n */\nclass RestPaginator<T> implements Paginator<T> {\n  private state: PaginatorState;\n\n  /**\n   * Indicates the existence of the next page.\n   */\n  public get hasNextPage(): boolean { return !!this.state.nextToken; }\n\n  /**\n   * Indicates the existence of the previous page\n   */\n  public get hasPrevPage(): boolean { return !!this.state.prevToken; }\n\n  /**\n   * Array of elements on the current page.\n   */\n  public get items(): Array<T> { return this.state.items; }\n\n  /**\n   * @internal\n   */\n  constructor(items, source, prevToken, nextToken) {\n    this.state = {\n      prevToken,\n      nextToken,\n      source,\n      items\n    };\n  }\n\n  /**\n   * Request the next page. Does not modify the existing object.\n   */\n  public async nextPage(): Promise<RestPaginator<T>> {\n    return this.hasNextPage ? this.state.source(this.state.nextToken) : Promise.reject(new Error('No next page'));\n  }\n\n  /**\n   * Request the previous page. Does not modify the existing object.\n   */\n  public async prevPage(): Promise<RestPaginator<T>> {\n    return this.hasPrevPage ? this.state.source(this.state.prevToken) : Promise.reject(new Error('No previous page'));\n  }\n}\n\nexport { RestPaginator };\n","import { Logger } from './logger';\nimport { Channel, NotificationLevel, ChannelStatus, ChannelType } from './channel';\nimport { Client } from './client';\nimport { parseAttributes, parseTime } from './util';\n\nconst log = Logger.scope('ChannelDescriptor');\n\n/**\n * Contains channel information.\n * Unlike {@link Channel}, this information won't be updated in realtime.\n * To have fresh data, user should query for channel descriptors again.\n */\nclass ChannelDescriptor {\n  public client: Client;\n  public descriptor: any;\n\n  /**\n   * Unique system identifier of the channel.\n   */\n  public readonly sid: string;\n\n  /**\n   * Custom attributes of the channel.\n   */\n  public readonly channel: string;\n\n  /**\n   * Unique name of the channel.\n   */\n  public readonly uniqueName: string;\n\n  /**\n   * Name of the channel.\n   */\n  public readonly friendlyName: string;\n\n  /**\n   * Custom attributes of the channel.\n   */\n  public readonly attributes: any;\n\n  /**\n   * Identity of the user that created this channel.\n   */\n  public readonly createdBy: string;\n\n  /**\n   * Date this channel was created on.\n   */\n  public readonly dateCreated: Date;\n\n  /**\n   * Date this channel was last updated on.\n   */\n  public readonly dateUpdated: Date;\n\n  /**\n   * Amount of messages in the channel.\n   */\n  public readonly messagesCount: number;\n\n  /**\n   * Amount of members in the channel.\n   */\n  public readonly membersCount: number;\n\n  /**\n   * Index of the last message the user has read in this channel.\n   */\n  public readonly lastConsumedMessageIndex: number;\n\n  /**\n   * Delivery status of the channel.\n   */\n  public readonly status: ChannelStatus;\n\n  /**\n   * MemberType of the channel.\n   */\n  public readonly type: ChannelType;\n\n  /**\n   * Signifies whether the channel is private.\n   */\n  public readonly isPrivate: boolean;\n\n  /**\n   * User notification level for this channel.\n   */\n  public readonly notificationLevel: NotificationLevel;\n\n  /**\n   * @internal\n   */\n  constructor(client: Client, descriptor: any) {\n    this.client = client;\n    this.descriptor = descriptor;\n\n    this.sid = descriptor.sid || descriptor.conversation_sid;\n    this.channel = `${this.sid}.channel`;\n    this.uniqueName = descriptor.unique_name;\n    this.friendlyName = descriptor.friendly_name;\n    this.attributes = parseAttributes(descriptor.attributes, 'Failed to parse channel attributes', log);\n    this.createdBy = descriptor.created_by;\n    this.dateCreated = parseTime(descriptor.date_created);\n    this.dateUpdated = parseTime(descriptor.date_updated);\n    this.messagesCount = descriptor.messages_count;\n    this.membersCount = descriptor.participants_count;\n    this.type = descriptor.type;\n    this.isPrivate = descriptor.type === 'private';\n    this.lastConsumedMessageIndex = descriptor.last_consumed_message_index;\n    this.notificationLevel = descriptor.notification_level || undefined;\n    this.status = descriptor.status || 'unknown';\n  }\n\n  /**\n   * Get the channel object from the descriptor.\n   */\n  getChannel(): Promise<Channel> {\n    return this.client.getChannelBySid(this.sid);\n  }\n}\n\nexport { ChannelDescriptor };\n","import { UriBuilder } from '../util/index';\nimport { RestPaginator } from '../restpaginator';\nimport { ChannelDescriptor } from '../channeldescriptor';\nimport { Network } from '../services/network';\nimport { Client } from '../client';\n\nexport interface PublicChannelServices {\n  network: Network;\n}\n\n/**\n * Public channels collection\n * It's a cassandra-backed pull-based collection\n */\nclass PublicChannels {\n  private client: Client;\n  private services: PublicChannelServices;\n  private url: string;\n\n  constructor(client: Client, services: PublicChannelServices, url: string) {\n    this.client = client;\n    this.services = services;\n    this.url = url;\n  }\n\n  public async getChannels(args: any = {}): Promise<RestPaginator<ChannelDescriptor>> {\n    const url = new UriBuilder(this.url).arg('PageToken', args.pageToken).build();\n    let response = await this.services.network.get(url);\n    return new RestPaginator<ChannelDescriptor>(response.body.conversations.map(x => new ChannelDescriptor(this.client, x))\n      , pageToken => this.getChannels({ pageToken })\n      , response.body.meta.previous_token\n      , response.body.meta.next_token);\n  }\n\n  public async getChannelBySid(sid: string): Promise<ChannelDescriptor> {\n    const url = new UriBuilder(this.url).path(sid).build();\n    let response = await this.services.network.get(url);\n    return new ChannelDescriptor(this.client, response.body);\n  }\n\n  public async getChannelByUniqueName(uniqueName: string): Promise<ChannelDescriptor> {\n    const url = new UriBuilder(this.url).path(uniqueName).build();\n    let response = await this.services.network.get(url);\n    return new ChannelDescriptor(this.client, response.body);\n  }\n}\n\nexport { PublicChannels };\n","import { Retrier } from '@twilio/operation-retrier';\nimport { Transport } from 'twilsock';\nimport { Configuration } from '../configuration';\n\ninterface CacheEntry {\n  response: Object;\n  timestamp: number;\n}\n\nexport interface NetworkServices {\n  transport: Transport;\n}\n\nclass Network {\n  private readonly cacheLifetime: number;\n  private readonly cache: Map<string, CacheEntry>;\n  private timer: any;\n\n  constructor(\n    private readonly configuration: Configuration,\n    private readonly services: NetworkServices,\n  ) {\n    this.cache = new Map<string, CacheEntry>();\n    this.cacheLifetime = this.configuration.httpCacheInterval * 100;\n    this.cleanupCache();\n  }\n\n  private isExpired(timestamp: number): boolean {\n    return !this.cacheLifetime || (Date.now() - timestamp) > this.cacheLifetime;\n  }\n\n  private cleanupCache() {\n    for (let [k, v] of this.cache) {\n      if (this.isExpired(v.timestamp)) {\n        this.cache.delete(k);\n      }\n    }\n\n    if (this.cache.size === 0) {\n      clearInterval(this.timer);\n    }\n  }\n\n  pokeTimer() {\n    this.timer = this.timer || setInterval(() => this.cleanupCache(), this.cacheLifetime * 2);\n  }\n\n  private async executeWithRetry(request, retryWhenThrottled = false): Promise<any> {\n    return new Promise((resolve, reject) => {\n      let codesToRetryOn = [502, 503, 504];\n      if (retryWhenThrottled) {\n        codesToRetryOn.push(429);\n      }\n\n      let retrier = new Retrier(this.configuration.backoffConfiguration);\n      retrier.on('attempt', () => {\n        request()\n          .then(result => retrier.succeeded(result))\n          .catch(err => {\n            if (codesToRetryOn.indexOf(err.status) > -1) {\n              retrier.failed(err);\n            } else if (err.message === 'Twilsock disconnected') {\n              // Ugly hack. We must make a proper exceptions for twilsock\n              retrier.failed(err);\n            } else {\n              // Fatal error\n              retrier.removeAllListeners();\n              retrier.cancel();\n              reject(err);\n            }\n          });\n      });\n\n      retrier.on('succeeded', result => { resolve(result); });\n      retrier.on('cancelled', err => reject(err));\n      retrier.on('failed', err => reject(err));\n\n      retrier.start();\n    });\n  }\n\n  public async get(url: string) {\n    let cacheEntry = this.cache.get(url);\n    if (cacheEntry && !this.isExpired(cacheEntry.timestamp)) {\n      return cacheEntry.response;\n    }\n\n    const headers = {};\n    let response = await this.executeWithRetry(\n      () => this.services.transport.get(url, headers, this.configuration.productId), this.configuration.retryWhenThrottled);\n    this.cache.set(url, { response, timestamp: Date.now() });\n    this.pokeTimer();\n    return response;\n  }\n}\n\nexport { Network };\n","class NotificationTypes {\n  static readonly TYPING_INDICATOR = 'twilio.ipmsg.typing_indicator';\n  static readonly NEW_MESSAGE = 'twilio.channel.new_message';\n  static readonly ADDED_TO_CHANNEL = 'twilio.channel.added_to_channel';\n  static readonly INVITED_TO_CHANNEL = 'twilio.channel.invited_to_channel';\n  static readonly REMOVED_FROM_CHANNEL = 'twilio.channel.removed_from_channel';\n  static readonly CONSUMPTION_UPDATE = 'twilio.channel.consumption_update';\n}\n\nexport { NotificationTypes };","import { EventEmitter } from 'events';\nimport { UserDescriptor } from './userdescriptor';\nimport { Users } from './data/users';\nimport { User } from './user';\nimport { parseTime, parseAttributes } from './util';\nimport { Logger } from './logger';\nimport { validateTypesAsync, literal } from '@twilio/declarative-type-validator';\nimport { Channel } from './channel';\nimport { CommandExecutor } from './commandexecutor';\nimport { EditMemberRequest, EditMemberResponse } from './interfaces/commands/editmember';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype MemberEvents = {\n  typingEnded: (member: Member) => void;\n  typingStarted: (member: Member) => void;\n  updated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope('Member');\n\ninterface MemberDescriptor {\n  attributes?: Object;\n  dateCreated: any;\n  dateUpdated: any;\n  identity: string;\n  roleSid?: string;\n  lastConsumedMessageIndex: number;\n  lastConsumptionTimestamp: number;\n  type?: MemberType;\n  userInfo: string;\n}\n\ninterface MemberState {\n  attributes: any;\n  dateCreated: Date;\n  dateUpdated: Date;\n  identity: string;\n  isTyping: boolean;\n  lastConsumedMessageIndex: number | null;\n  lastConsumptionTimestamp: Date;\n  roleSid: string;\n  sid: string;\n  type: MemberType;\n  typingTimeout: any;\n  userInfo: string;\n}\n\ninterface MemberServices {\n  users: Users;\n  commandExecutor: CommandExecutor;\n}\n\ninterface MemberLinks {\n  self: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a member.\n */\ntype MemberUpdateReason =\n  | 'attributes'\n  | 'dateCreated'\n  | 'dateUpdated'\n  | 'roleSid'\n  | 'lastConsumedMessageIndex'\n  | 'lastConsumptionTimestamp';\n\n/**\n * Push notification type of a member.\n */\ntype MemberType = 'chat' | 'sms' | 'whatsapp';\n\ninterface MemberUpdatedEventArgs {\n  member: Member;\n  updateReasons: MemberUpdateReason[];\n}\n\n/**\n * A member represents a remote client in a channel.\n */\nclass Member extends ReplayEventEmitter<MemberEvents> {\n\n  private state: MemberState;\n\n  /**\n   * Channel that the remote client is a member of.\n   */\n  public readonly channel: Channel;\n\n  private readonly links: MemberLinks;\n  private readonly services: MemberServices;\n\n  /**\n   * @internal\n   */\n  constructor(\n    data: MemberDescriptor,\n    sid: string,\n    channel: Channel,\n    links: MemberLinks,\n    services: MemberServices\n  ) {\n    super();\n\n    this.channel = channel;\n    this.links = links;\n    this.services = services;\n\n    this.state = {\n      attributes: parseAttributes(data.attributes,\n        'Retrieved malformed attributes from the server for member: ' + sid,\n        log),\n      dateCreated: data.dateCreated ? parseTime(data.dateCreated) : null,\n      dateUpdated: data.dateCreated ? parseTime(data.dateUpdated) : null,\n      sid: sid,\n      typingTimeout: null,\n      isTyping: false,\n      identity: data.identity || null,\n      roleSid: data.roleSid || null,\n      lastConsumedMessageIndex: Number.isInteger(data.lastConsumedMessageIndex) ? data.lastConsumedMessageIndex : null,\n      lastConsumptionTimestamp: data.lastConsumptionTimestamp ? parseTime(data.lastConsumptionTimestamp) : null,\n      type: data.type || 'chat',\n      userInfo: data.userInfo\n    };\n\n    if (!data.identity && !data.type) {\n      throw new Error('Received invalid Member object from server: Missing identity or type of Member.');\n    }\n  }\n\n  /**\n   * Fired when the member has started typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly typingStarted = 'typingStarted';\n\n  /**\n   * Fired when the member has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly typingEnded = 'typingEnded';\n\n  /**\n   * Fired when the fields of the member have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Member} member - the member in question\n   *     * {@link MemberUpdateReason}[] updateReasons - array of reasons for the update\n   * @event\n   */\n  static readonly updated = 'updated';\n\n  /**\n   * The server-assigned unique identifier for the member.\n   */\n  public get sid(): string { return this.state.sid; }\n\n  /**\n   * Custom attributes of the member.\n   */\n  public get attributes(): Object { return this.state.attributes; }\n\n  /**\n   * Date this member was created on.\n   */\n  public get dateCreated(): Date { return this.state.dateCreated; }\n\n  /**\n   * Date this member was last updated on.\n   */\n  public get dateUpdated(): Date { return this.state.dateUpdated; }\n\n  /**\n   * Identity of the member.\n   */\n  public get identity(): string { return this.state.identity; }\n\n  /**\n   * Indicates whether the member is currently typing.\n   */\n  public get isTyping(): boolean { return this.state.isTyping; }\n\n  /**\n   * The index of the last consumed message by the member.\n   * Note that retrieving messages on a client endpoint does not mean that messages are read,\n   * please consider reading about the [Read Horizon feature](https://www.twilio.com/docs/api/chat/guides/consumption-horizon)\n   * to find out about the proper way to mark messages as read.\n   */\n  public get lastConsumedMessageIndex(): number | null { return this.state.lastConsumedMessageIndex; }\n\n  /**\n   * Date of the most recent consumption horizon update.\n   */\n  public get lastConsumptionTimestamp(): Date { return this.state.lastConsumptionTimestamp; }\n\n  public get roleSid(): string { return this.state.roleSid; }\n\n  /**\n   * Message type of the member.\n   */\n  public get type(): MemberType { return this.state.type; }\n\n  /**\n   * Internal method used to start or reset the typing indicator timeout (with event emitting).\n   * @internal\n   */\n  _startTyping(timeout) {\n    clearTimeout(this.state.typingTimeout);\n\n    this.state.isTyping = true;\n    this.emit('typingStarted', this);\n    this.channel.emit('typingStarted', this);\n\n    this.state.typingTimeout = setTimeout(() => this._endTyping(), timeout);\n    return this;\n  }\n\n  /**\n   * Internal method function used to stop typing indicator timeout (with event emitting).\n   * @internal\n   */\n  _endTyping() {\n    if (!this.state.typingTimeout) { return; }\n\n    this.state.isTyping = false;\n    this.emit('typingEnded', this);\n    this.channel.emit('typingEnded', this);\n\n    clearInterval(this.state.typingTimeout);\n    this.state.typingTimeout = null;\n  }\n\n  /**\n   * Internal method function used update local object's property roleSid with a new value.\n   * @internal\n   */\n  _update(data) {\n    let updateReasons: MemberUpdateReason[] = [];\n\n    const updateAttributes =\n      parseAttributes(\n        data.attributes,\n        'Retrieved malformed attributes from the server for member: ' + this.state.sid,\n        log);\n\n    if (data.attributes && !isEqual(this.state.attributes, updateAttributes)) {\n      this.state.attributes = updateAttributes;\n      updateReasons.push('attributes');\n    }\n\n    const updatedDateUpdated = parseTime(data.dateUpdated);\n    if (data.dateUpdated && (updatedDateUpdated?.getTime() !== this.state.dateUpdated?.getTime())) {\n      this.state.dateUpdated = updatedDateUpdated;\n      updateReasons.push('dateUpdated');\n    }\n\n    const updatedDateCreated = parseTime(data.dateCreated);\n    if (data.dateCreated && (updatedDateCreated?.getTime() !== this.state.dateCreated?.getTime())) {\n      this.state.dateCreated = updatedDateCreated;\n      updateReasons.push('dateCreated');\n    }\n\n    if (data.roleSid && this.state.roleSid !== data.roleSid) {\n      this.state.roleSid = data.roleSid;\n      updateReasons.push('roleSid');\n    }\n\n    const indexIsValid = Number.isInteger(data.lastConsumedMessageIndex) || data.lastConsumedMessageIndex === null;\n    if (indexIsValid && (this.state.lastConsumedMessageIndex !== data.lastConsumedMessageIndex)) {\n      this.state.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n      updateReasons.push('lastConsumedMessageIndex');\n    }\n\n    const updatedTimestamp = parseTime(data.lastConsumptionTimestamp);\n    if (data.lastConsumptionTimestamp && (updatedTimestamp?.getTime() !== this.state.lastConsumptionTimestamp?.getTime())) {\n      this.state.lastConsumptionTimestamp = updatedTimestamp;\n      updateReasons.push('lastConsumptionTimestamp');\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit('updated', { member: this, updateReasons: updateReasons });\n    }\n\n    return this;\n  }\n\n  /**\n   * Get the user descriptor for this member. Supported only for members of type `chat`.\n   */\n  public async getUserDescriptor(): Promise<UserDescriptor> {\n    if (this.type != 'chat') {\n      throw new Error('Getting User Descriptor is not supported for this Member type: ' + this.type);\n    }\n\n    return this.services.users.getUserDescriptor(this.state.identity);\n  }\n\n  /**\n   * Get the user for this member and subscribes to it. Supported only for members of type `chat`.\n   */\n  public async getUser(): Promise<User> {\n    if (this.type != 'chat') {\n      throw new Error('Getting User is not supported for this Member type: ' + this.type);\n    }\n\n    return this.services.users.getUser(this.state.identity, this.state.userInfo);\n  }\n\n  /**\n   * Remove the member from the channel.\n   */\n  public async remove(): Promise<void> {\n    return this.channel.removeMember(this);\n  }\n\n  /**\n   * Update the attributes of the member.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<Member> {\n    await this.services.commandExecutor.mutateResource<EditMemberRequest, EditMemberResponse>(\n      'post',\n      this.links.self,\n      {\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n      }\n    );\n\n    return this;\n  }\n}\n\nexport {\n  MemberDescriptor,\n  MemberServices,\n  Member,\n  MemberUpdateReason,\n  MemberType,\n  MemberUpdatedEventArgs\n};\n","import {\n  MemberDescriptor,\n  Member,\n  MemberUpdatedEventArgs,\n  MemberUpdateReason\n} from '../member';\nimport { Logger } from '../logger';\n\nimport { Channel } from '../channel';\n\nimport { SyncMap, SyncClient } from 'twilio-sync';\nimport { Users } from './users';\nimport { CommandExecutor } from '../commandexecutor';\nimport { JoinChannelRequest, JoinChannelResponse } from '../interfaces/commands/joinchannel';\nimport { Configuration } from '../configuration';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype MembersEvents = {\n  memberJoined: (member: Member) => void;\n  memberLeft: (member: Member) => void;\n  memberUpdated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope('Members');\n\nexport interface MembersServices {\n  syncClient: SyncClient;\n  users: Users;\n  commandExecutor: CommandExecutor;\n}\n\ninterface MembersLinks {\n  participants: string;\n}\n\n/**\n * @classdesc Represents the collection of members for the channel\n * @fires Members#memberJoined\n * @fires Members#memberLeft\n * @fires Members#memberUpdated\n */\nclass Members extends ReplayEventEmitter<MembersEvents> {\n\n  rosterEntityPromise: Promise<SyncMap>;\n\n  constructor(\n    public readonly channel: Channel,\n    public readonly members: Map<string, Member>,\n    private readonly links: MembersLinks,\n    private readonly configuration: Configuration,\n    private readonly services: MembersServices\n  ) {\n    super();\n  }\n\n  public async unsubscribe(): Promise<void> {\n    if (this.rosterEntityPromise) {\n      let entity = await this.rosterEntityPromise;\n      entity.close();\n      this.rosterEntityPromise = null;\n    }\n  }\n\n  public async subscribe(rosterObjectName: string) {\n    return this.rosterEntityPromise = this.rosterEntityPromise\n      || this.services.syncClient.map({ id: rosterObjectName, mode: 'open_existing' })\n             .then(rosterMap => {\n               rosterMap.on('itemAdded', args => {\n                 log.debug(this.channel.sid + ' itemAdded: ' + args.item.key);\n                 this.upsertMember(args.item.key, args.item.data)\n                     .then(member => {\n                       this.emit('memberJoined', member);\n                     });\n               });\n\n               rosterMap.on('itemRemoved', args => {\n                 log.debug(this.channel.sid + ' itemRemoved: ' + args.key);\n                 let memberSid = args.key;\n                 if (!this.members.has(memberSid)) {\n                   return;\n                 }\n                 let leftMember = this.members.get(memberSid);\n                 this.members.delete(memberSid);\n                 this.emit('memberLeft', leftMember);\n               });\n\n               rosterMap.on('itemUpdated', args => {\n                 log.debug(this.channel.sid + ' itemUpdated: ' + args.item.key);\n                 this.upsertMember(args.item.key, args.item.data);\n               });\n\n               let membersPromises = [];\n               let that = this;\n               const rosterMapHandler = function(paginator) {\n                 paginator.items.forEach(item => { membersPromises.push(that.upsertMember(item.key, item.data)); });\n                 return paginator.hasNextPage ? paginator.nextPage().then(rosterMapHandler) : null;\n               };\n\n               return rosterMap\n                 .getItems()\n                 .then(rosterMapHandler)\n                 .then(() => Promise.all(membersPromises))\n                 .then(() => rosterMap);\n             })\n             .catch(err => {\n               this.rosterEntityPromise = null;\n               if (this.services.syncClient.connectionState != 'disconnected') {\n                 log.error('Failed to get roster object for channel', this.channel.sid, err);\n               }\n               log.debug('ERROR: Failed to get roster object for channel', this.channel.sid, err);\n               throw err;\n             });\n  }\n\n  public async upsertMember(memberSid: string, data: MemberDescriptor): Promise<Member> {\n    let member = this.members.get(memberSid);\n    if (member) {\n      return member._update(data);\n    }\n\n    const links = {\n      self: `${this.links.participants}/${memberSid}`\n    };\n\n    member = new Member(data, memberSid, this.channel, links, this.services);\n    this.members.set(memberSid, member);\n    member.on('updated', (args: MemberUpdatedEventArgs) => this.emit('memberUpdated', args));\n    return member;\n  }\n\n  /**\n   * @returns {Promise<Array<Member>>} returns list of members {@see Member}\n   */\n  public async getMembers(): Promise<Array<Member>> {\n    return this.rosterEntityPromise.then(() => {\n      let members = [];\n      this.members.forEach((member) => members.push(member));\n      return members;\n    });\n  }\n\n  /**\n   * Get member by SID from channel\n   * @returns {Promise<Member>}\n   */\n  public async getMemberBySid(memberSid: string): Promise<Member> {\n    return this.rosterEntityPromise.then(() => {\n      let member = this.members.get(memberSid);\n      if (!member) {\n        throw new Error('Member with SID ' + memberSid + ' was not found');\n      }\n      return member;\n    });\n  }\n\n  /**\n   * Get member by identity from channel\n   * @returns {Promise<Member>}\n   */\n  public async getMemberByIdentity(identity: string): Promise<Member> {\n    let foundMember = null;\n    return this.rosterEntityPromise.then(() => {\n      this.members.forEach((member) => {\n        if (member.identity === identity) {\n          foundMember = member;\n        }\n      });\n      if (!foundMember) {\n        throw new Error('Member with identity ' + identity + ' was not found');\n      }\n      return foundMember;\n    });\n  }\n\n  /**\n   * Add user to the channel\n   * @returns {Promise<any>}\n   */\n  public async add(identity: string): Promise<JoinChannelResponse> {\n    return await this.services.commandExecutor.mutateResource<JoinChannelRequest, JoinChannelResponse>(\n      'post',\n      this.links.participants,\n      {\n        identity\n      }\n    );\n  }\n\n  /**\n   * Invites user to the channel\n   * User can choose either to join or not\n   * @returns {Promise<any>}\n   */\n  public async invite(identity: string): Promise<any> {\n    return await this.services.commandExecutor.mutateResource(\n      'post',\n      this.channel.links.invites,\n      {\n        identity\n      }\n    );\n  }\n\n  /**\n   * Remove member from channel\n   * @returns {Promise<any>}\n   */\n  public async remove(identity: string): Promise<void> {\n    return await this.services.commandExecutor.mutateResource(\n      'delete',\n      `${this.links.participants}/${identity}`,\n    );\n  }\n}\n\nexport { Members };\n\n/**\n * Fired when member joined channel\n * @event Members#memberJoined\n * @type {Member}\n */\n\n/**\n * Fired when member left channel\n * @event Members#memberLeft\n * @type {Member}\n */\n\n/**\n * Fired when member updated\n * @event Members#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n","import { McsClient, McsMedia } from '@twilio/mcs-client';\n\nexport interface MediaState {\n  sid: string;\n  filename?: string;\n  contentType: string;\n  size: number;\n}\n\nexport interface MediaServices {\n  mcsClient: McsClient;\n}\n\n/**\n * Represents media information for a message in a channel.\n */\nclass Media {\n\n  private state: MediaState;\n  private services: MediaServices;\n  private mcsMedia: McsMedia = null;\n\n  /**\n   * @internal\n   */\n  constructor(data: MediaState, services: MediaServices) {\n\n    this.services = services;\n\n    this.state = {\n      sid: data.sid,\n      filename: data.filename,\n      contentType: data.contentType,\n      size: data.size\n    };\n  }\n\n  /**\n   * Server-assigned unique identifier for the media.\n   */\n  public get sid(): string { return this.state.sid; }\n\n  /**\n   * File name. Null if absent.\n   */\n  public get filename(): string {return this.state.filename; }\n\n  /**\n   * Content type of the media.\n   */\n  public get contentType(): string { return this.state.contentType; }\n\n  /**\n   * Size of the media in bytes.\n   */\n  public get size(): number {return this.state.size; }\n\n  /**\n   * Returns the direct content URL for the media.\n   *\n   * This URL is impermanent, it will expire in several minutes and cannot be cached.\n   * If the URL becomes expired, you need to request a new one.\n   * Each call to this function produces a new temporary URL.\n   */\n  public async getContentTemporaryUrl() {\n    if (!this.mcsMedia) {\n      if (this.services.mcsClient) {\n        this.mcsMedia = await this.services.mcsClient.get(this.state.sid);\n      } else {\n        throw new Error('Media Content Service is unavailable');\n      }\n    }\n    return this.mcsMedia.getContentUrl();\n  }\n}\n\nexport { Media };\n","import { parseAttributes } from './util';\nimport { Logger } from './logger';\n\nimport { Channel } from './channel';\nimport { McsClient } from '@twilio/mcs-client';\nimport { Media } from './media';\nimport { Member } from './member';\nimport { validateTypesAsync, literal } from '@twilio/declarative-type-validator';\nimport { Configuration } from './configuration';\nimport { CommandExecutor } from './commandexecutor';\nimport { EditMessageRequest } from './interfaces/commands/editmessage';\nimport { MessageResponse } from './interfaces/commands/messageresponse';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype MessageEvents = {\n  updated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[]\n  }) => void;\n};\n\nconst log = Logger.scope('Message');\n\ninterface MessageState {\n  sid: string;\n  index: number;\n  author?: string;\n  body: string;\n  dateUpdated: Date;\n  lastUpdatedBy: string;\n  attributes: Object;\n  timestamp: Date;\n  type: MessageType;\n  media?: Media;\n  memberSid?: string;\n}\n\ninterface MessageServices {\n  mcsClient: McsClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface MessageLinks {\n  self: string;\n  conversation: string;\n  messages_receipts: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a message.\n */\ntype MessageUpdateReason =\n  | 'body'\n  | 'lastUpdatedBy'\n  | 'dateCreated'\n  | 'dateUpdated'\n  | 'attributes'\n  | 'author';\n\n/**\n * Push notification type of a message.\n */\ntype MessageType = 'text' | 'media';\n\ninterface MessageUpdatedEventArgs {\n  message: Message;\n  updateReasons: MessageUpdateReason[];\n}\n\n/**\n * A message in a channel.\n */\nclass Message extends ReplayEventEmitter<MessageEvents> {\n  private state: MessageState;\n\n  /**\n   * Channel that the message is in.\n   */\n  public readonly channel: Channel;\n  private readonly links: MessageLinks;\n  private readonly configuration: Configuration;\n  private readonly services: MessageServices;\n\n  /**\n   * @internal\n   */\n  constructor(\n    index: number,\n    data: any,\n    channel: Channel,\n    links: MessageLinks,\n    configuration: Configuration,\n    services: MessageServices\n  ) {\n    super();\n\n    this.channel = channel;\n    this.links = links;\n    this.configuration = configuration;\n    this.services = services;\n\n    this.state = {\n      sid: data.sid,\n      index: index,\n      author: data.author == null ? null : data.author,\n      body: data.text,\n      timestamp: data.timestamp ? new Date(data.timestamp) : null,\n      dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,\n      lastUpdatedBy: data.lastUpdatedBy ? data.lastUpdatedBy : null,\n      attributes: parseAttributes(data.attributes, `Got malformed attributes for the message ${data.sid}`, log),\n      type: data.type ? data.type : 'text',\n      media: (data.type && data.type === 'media' && data.media)\n        ? new Media(data.media, this.services) : null,\n      memberSid: data.memberSid == null ? null : data.memberSid\n    };\n  }\n\n  /**\n   * Fired when the properties or the body of the message have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} message - the message in question\n   *     * {@link MessageUpdateReason}[] updateReasons - array of reasons for the update\n   */\n  static readonly updated = 'updated';\n\n  /**\n   * The server-assigned unique identifier for the message.\n   */\n  public get sid(): string { return this.state.sid; }\n\n  /**\n   * Name of the user that sent the message.\n   */\n  public get author(): string { return this.state.author; }\n\n  /**\n   * Body of the message. Null if the message is a media message.\n   */\n  public get body(): string {\n    if (this.type === 'media') {\n      return null;\n    }\n\n    return this.state.body;\n  }\n\n  /**\n   * Date this message was last updated on.\n   */\n  public get dateUpdated(): Date { return this.state.dateUpdated; }\n\n  /**\n   * Index of the message in the channel's messages list.\n   * By design of the Programmable Chat system, the message indices may have arbitrary gaps between them,\n   * that does not necessarily mean they were deleted or otherwise modified - just that\n   * messages may have some non-contiguous indices even if they are being sent immediately one after another.\n   *\n   * Trying to use indices for some calculations is going to be unreliable.\n   *\n   * To calculate the number of unread messages it is better to use the read horizon API.\n   * See {@link Channel.getUnconsumedMessagesCount} for details.\n   */\n  public get index(): number { return this.state.index; }\n\n  /**\n   * Identity of the last user that updated the message.\n   */\n  public get lastUpdatedBy(): string { return this.state.lastUpdatedBy; }\n\n  /**\n   * Date this message was created on.\n   */\n  public get dateCreated(): Date { return this.state.timestamp; }\n\n  /**\n   * Custom attributes of the message.\n   */\n  public get attributes(): Object { return this.state.attributes; }\n\n  /**\n   * Push notification type of the message.\n   */\n  public get type(): MessageType { return this.state.type; }\n\n  /**\n   * Media information (if present).\n   */\n  public get media(): Media { return this.state.media; }\n\n  /**\n   * The server-assigned unique identifier of the authoring member.\n   */\n  public get memberSid(): string { return this.state.memberSid; }\n\n  _update(data) {\n    let updateReasons: MessageUpdateReason[] = [];\n\n    if ((data.text || ((typeof data.text) === 'string')) && data.text !== this.state.body) {\n      this.state.body = data.text;\n      updateReasons.push('body');\n    }\n\n    if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {\n      this.state.lastUpdatedBy = data.lastUpdatedBy;\n      updateReasons.push('lastUpdatedBy');\n    }\n\n    if (data.author && data.author !== this.state.author) {\n      this.state.author = data.author;\n      updateReasons.push('author');\n    }\n\n    if (data.dateUpdated &&\n      new Date(data.dateUpdated).getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {\n      this.state.dateUpdated = new Date(data.dateUpdated);\n      updateReasons.push('dateUpdated');\n    }\n\n    if (data.timestamp &&\n      new Date(data.timestamp).getTime() !== (this.state.timestamp && this.state.timestamp.getTime())) {\n      this.state.timestamp = new Date(data.timestamp);\n      updateReasons.push('dateCreated');\n    }\n\n    let updatedAttributes = parseAttributes(data.attributes, `Got malformed attributes for the message ${this.sid}`, log);\n    if (!isEqual(this.state.attributes, updatedAttributes)) {\n      this.state.attributes = updatedAttributes;\n      updateReasons.push('attributes');\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit('updated', { message: this, updateReasons: updateReasons });\n    }\n  }\n\n  /**\n   * Get the member who is the author of the message.\n   */\n  public async getMember(): Promise<Member> {\n    let member: Member = null;\n    if (this.state.memberSid) {\n      member = await this.channel.getMemberBySid(this.memberSid)\n                         .catch(() => {\n                           log.debug('Member with sid \"' + this.memberSid + '\" not found for message ' + this.sid);\n                           return null;\n                         });\n    }\n    if (!member && this.state.author) {\n      member = await this.channel.getMemberByIdentity(this.state.author)\n                         .catch(() => {\n                           log.debug('Member with identity \"' + this.author + '\" not found for message ' + this.sid);\n                           return null;\n                         });\n    }\n    if (member) {\n      return member;\n    }\n    let errorMesage = 'Member with ';\n    if (this.state.memberSid) {\n      errorMesage += 'SID \\'' + this.state.memberSid + '\\' ';\n    }\n    if (this.state.author) {\n      if (this.state.memberSid) {\n        errorMesage += 'or ';\n      }\n      errorMesage += 'identity \\'' + this.state.author + '\\' ';\n    }\n    if (errorMesage === 'Member with ') {\n      errorMesage = 'Member ';\n    }\n    errorMesage += 'was not found';\n    throw new Error(errorMesage);\n  }\n\n  /**\n   * Remove the message.\n   */\n  public async remove(): Promise<Message> {\n    await this.services.commandExecutor.mutateResource(\n      'delete',\n      this.links.self,\n    );\n\n    return this;\n  }\n\n  /**\n   * Edit the message body.\n   * @param body New body of the message.\n   */\n  @validateTypesAsync('string')\n  public async updateBody(body: string): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<EditMessageRequest, MessageResponse>(\n      'post',\n      this.links.self,\n      {\n        body\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Edit the message attributes.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<EditMessageRequest, MessageResponse>(\n      'post',\n      this.links.self,\n      {\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n      }\n    );\n\n    return this;\n  }\n}\n\nexport {\n  Message,\n  MessageServices,\n  MessageType,\n  MessageUpdateReason,\n  MessageUpdatedEventArgs\n};\n","import { Logger } from '../logger';\n\nimport {\n  Message,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason\n} from '../message';\nimport { Channel, SendMediaOptions } from '../channel';\n\nimport { SyncList, SyncClient } from 'twilio-sync';\nimport { SyncPaginator } from '../syncpaginator';\n\nimport { McsClient, McsMedia } from '@twilio/mcs-client';\nimport { Configuration } from '../configuration';\nimport { CommandExecutor } from '../commandexecutor';\nimport { SendMessageRequest } from '../interfaces/commands/sendmessage';\nimport { MessageResponse } from '../interfaces/commands/messageresponse';\nimport { SendMediaMessageRequest } from '../interfaces/commands/sendmediamessage';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype MessagesEvents = {\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope('Messages');\n\nexport interface MessagesServices {\n  mcsClient: McsClient;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\n/**\n * Represents the collection of messages in a channel\n */\nclass Messages extends ReplayEventEmitter<MessagesEvents> {\n  private readonly messagesByIndex: Map<number, Message>;\n  private messagesListPromise: Promise<SyncList>;\n\n  constructor(\n    public readonly channel: Channel,\n    private readonly configuration: Configuration,\n    private readonly services: MessagesServices\n  ) {\n    super();\n\n    this.messagesByIndex = new Map();\n    this.messagesListPromise = null;\n  }\n\n  /**\n   * Subscribe to the Messages Event Stream\n   * @param {String} name - The name of Sync object for the Messages resource.\n   * @returns {Promise}\n   */\n  public async subscribe(name: string) {\n    return this.messagesListPromise =\n      this.messagesListPromise ||\n      this.services.syncClient.list({ id: name, mode: 'open_existing' })\n          .then(list => {\n\n            list.on('itemAdded', args => {\n              log.debug(this.channel.sid + ' itemAdded: ' + args.item.index);\n              const links = {\n                self: `${this.channel.links.messages}/${args.item.data.sid}`,\n                conversation: this.channel.links.self,\n                messages_receipts: `${this.channel.links.messages}/${args.item.data.sid}/Receipts`,\n              };\n              const message = new Message(args.item.index, args.item.data, this.channel, links, this.configuration, this.services);\n              if (this.messagesByIndex.has(message.index)) {\n                log.debug('Message arrived, but already known and ignored', this.channel.sid, message.index);\n                return;\n              }\n\n              this.messagesByIndex.set(message.index, message);\n              message.on('updated',\n                (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n              this.emit('messageAdded', message);\n            });\n\n            list.on('itemRemoved', args => {\n              log.debug(this.channel.sid + ' itemRemoved: ' + args.index);\n              let index = args.index;\n              if (this.messagesByIndex.has(index)) {\n                let message = this.messagesByIndex.get(index);\n                this.messagesByIndex.delete(message.index);\n                message.removeAllListeners('updated');\n                this.emit('messageRemoved', message);\n              }\n            });\n\n            list.on('itemUpdated', args => {\n              log.debug(this.channel.sid + ' itemUpdated: ' + args.item.index);\n              let message = this.messagesByIndex.get(args.item.index);\n              if (message) {\n                message._update(args.item.data);\n              }\n            });\n\n            return list;\n          })\n          .catch(err => {\n            this.messagesListPromise = null;\n            if (this.services.syncClient.connectionState != 'disconnected') {\n              log.error('Failed to get messages object for channel', this.channel.sid, err);\n            }\n            log.debug('ERROR: Failed to get messages object for channel', this.channel.sid, err);\n            throw err;\n          });\n  }\n\n  public async unsubscribe() {\n    if (this.messagesListPromise) {\n      let entity = await this.messagesListPromise;\n      entity.close();\n      this.messagesListPromise = null;\n    }\n  }\n\n  /**\n   * Send Message to the channel\n   * @param {String} message - Message to post\n   * @param {any} attributes Message attributes\n   * @returns Returns promise which can fail\n   */\n  public async send(message: string | null, attributes: any = {}): Promise<MessageResponse> {\n    log.debug('Sending text message', message, attributes);\n\n    return await this.services.commandExecutor.mutateResource<SendMessageRequest, MessageResponse>(\n      'post',\n      this.channel.links.messages,\n      {\n        body: message || '',\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined,\n      }\n    );\n  }\n\n  /**\n   * Send Media Message to the channel\n   * @param {FormData | Channel#SendMediaOptions} mediaContent - Media content to post\n   * @param {any} attributes Message attributes\n   * @returns Returns promise which can fail\n   */\n  public async sendMedia(mediaContent: FormData | SendMediaOptions, attributes: any = {}) {\n    log.debug('Sending media message', mediaContent, attributes);\n\n    let media: McsMedia;\n    if (typeof FormData !== 'undefined'  && (mediaContent instanceof FormData)) {\n      log.debug('Sending media message as FormData', mediaContent, attributes);\n      media = await this.services.mcsClient.postFormData(mediaContent);\n    } else {\n      log.debug('Sending media message as SendMediaOptions', mediaContent, attributes);\n      let mediaOptions = mediaContent as SendMediaOptions;\n      if (!mediaOptions.contentType || !mediaOptions.media) {\n        throw new Error('Media content <Channel#SendMediaOptions> must contain non-empty contentType and media');\n      }\n      media = await this.services.mcsClient.post(mediaOptions.contentType, mediaOptions.media, null);\n    }\n\n    return await this.services.commandExecutor.mutateResource<SendMediaMessageRequest, MessageResponse>(\n      'post',\n      this.channel.links.messages,\n      {\n        media_sid: media.sid,\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n      }\n    );\n  }\n\n  /**\n   * Returns messages from channel using paginator interface\n   * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n   * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n   * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n   * @returns {Promise<Paginator<Message>>} last page of messages by default\n   */\n  public async getMessages(pageSize, anchor, direction) {\n    anchor = (typeof anchor !== 'undefined') ? anchor : 'end';\n    direction = direction || 'backwards';\n    return this._getMessages(pageSize, anchor, direction);\n  }\n\n  private async wrapPaginator(order, page, op) {\n    // We should swap next and prev page here, because of misfit of Sync and Chat paging conceptions\n    let shouldReverse = order === 'desc';\n\n    let np = () => page.nextPage().then(x => this.wrapPaginator(order, x, op));\n    let pp = () => page.prevPage().then(x => this.wrapPaginator(order, x, op));\n\n    return op(page.items).then(items => ({\n      items: items.sort((x, y) => { return x.index - y.index; }),\n      hasPrevPage: shouldReverse ? page.hasNextPage : page.hasPrevPage,\n      hasNextPage: shouldReverse ? page.hasPrevPage : page.hasNextPage,\n      prevPage: shouldReverse ? np : pp,\n      nextPage: shouldReverse ? pp : np\n    }));\n  }\n\n  private _upsertMessage(index: number, value: any) {\n    const cachedMessage = this.messagesByIndex.get(index);\n    if (cachedMessage) {\n      return cachedMessage;\n    }\n\n    const links = {\n      self: `${this.channel.links.messages}/${value.sid}`,\n      conversation: this.channel.links.self,\n      messages_receipts: `${this.channel.links.messages}/${value.sid}/Receipts`,\n    };\n    const message = new Message(index, value, this.channel, links, this.configuration, this.services);\n    this.messagesByIndex.set(message.index, message);\n    message.on('updated',\n      (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n    return message;\n  }\n\n  /**\n   * Returns last messages from channel\n   * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n   * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n   * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n   * @returns {Promise<SyncPaginator<Message>>} last page of messages by default\n   * @private\n   */\n  private async _getMessages(pageSize, anchor, direction): Promise<SyncPaginator<Message>> {\n    anchor = (typeof anchor !== 'undefined') ? anchor : 'end';\n    pageSize = pageSize || 30;\n    const order = direction === 'backwards' ? 'desc' : 'asc';\n\n    return this.messagesListPromise\n               .then(messagesList => messagesList.getItems({\n                 from: anchor !== 'end' ? anchor : void (0),\n                 pageSize,\n                 order,\n                 limit: pageSize // @todo Limit equals pageSize by default in Sync. This is probably not ideal.\n               }))\n               .then(page => this.wrapPaginator(order, page\n                 , items => Promise.all(items.map(item => this._upsertMessage(item.index, item.data))))\n               );\n  }\n}\n\nexport { Messages };\n","import { Logger } from './logger';\n\nimport { Members } from './data/members';\nimport { Member, MemberUpdatedEventArgs, MemberUpdateReason } from './member';\nimport { Messages } from './data/messages';\nimport { Message, MessageUpdatedEventArgs, MessageUpdateReason } from './message';\n\nimport { UriBuilder, parseToNumber } from './util';\nimport { UserDescriptor } from './userdescriptor';\nimport { Users } from './data/users';\nimport { Paginator } from './interfaces/paginator';\nimport { Channels } from './data/channels';\nimport { McsClient } from '@twilio/mcs-client';\n\nimport { SyncClient } from 'twilio-sync';\nimport { TypingIndicator } from './services/typingindicator';\nimport { Network } from './services/network';\nimport { validateTypesAsync, custom, literal, nonEmptyString, nonNegativeInteger, objectSchema } from '@twilio/declarative-type-validator';\nimport { Configuration } from './configuration';\nimport { CommandExecutor } from './commandexecutor';\nimport { JoinChannelRequest, JoinChannelResponse } from './interfaces/commands/joinchannel';\nimport { EditChannelRequest } from './interfaces/commands/editchannel';\nimport { ChannelResponse } from './interfaces/commands/channel';\nimport { EditNotificationLevelRequest } from './interfaces/commands/editnotificationlevel';\nimport { EditLastConsumedMessageIndexRequest, EditLastConsumedMessageIndexResponse } from './interfaces/commands/editlastconsumedmessageindex';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype ChannelEvents = {\n  memberJoined: (member: Member) => void;\n  memberInvited: (member: Member) => void;\n  memberLeft: (member: Member) => void;\n  memberUpdated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  typingEnded: (member: Member) => void;\n  typingStarted: (member: Member) => void;\n  updated: (data: {\n    channel: Channel;\n    updateReasons: ChannelUpdateReason[];\n  }) => void;\n  removed: (channel: Channel) => void;\n};\n\nconst log = Logger.scope('Channel');\n\nconst fieldMappings = {\n  lastMessage: 'lastMessage',\n  attributes: 'attributes',\n  createdBy: 'createdBy',\n  dateCreated: 'dateCreated',\n  dateUpdated: 'dateUpdated',\n  friendlyName: 'friendlyName',\n  lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n  notificationLevel: 'notificationLevel',\n  sid: 'sid',\n  status: 'status',\n  type: 'type',\n  uniqueName: 'uniqueName',\n  state: 'state'\n};\n\nfunction parseTime(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n\ninterface ChannelServices {\n  users: Users;\n  typingIndicator: TypingIndicator;\n  network: Network;\n  mcsClient: McsClient;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface ChannelInternalState {\n  uniqueName: string;\n  status: ChannelStatus;\n  type: ChannelType;\n  attributes: any;\n  createdBy?: string;\n  dateCreated: Date;\n  dateUpdated: Date;\n  friendlyName: string;\n  lastConsumedMessageIndex: number | null;\n  lastMessage?: LastMessage;\n  notificationLevel?: NotificationLevel;\n  state?: ChannelState;\n}\n\ninterface ChannelDescriptor {\n  channel: string;\n  entityName: string;\n  uniqueName: string;\n  attributes: any;\n  createdBy?: string;\n  friendlyName: string;\n  lastConsumedMessageIndex: number;\n  dateCreated: any;\n  dateUpdated: any;\n  type: ChannelType;\n  notificationLevel?: NotificationLevel;\n}\n\ninterface ChannelLinks {\n  self: string;\n  messages: string;\n  participants: string;\n  invites: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a channel.\n */\ntype ChannelUpdateReason =\n  | 'attributes'\n  | 'createdBy'\n  | 'dateCreated'\n  | 'dateUpdated'\n  | 'friendlyName'\n  | 'lastConsumedMessageIndex'\n  | 'state'\n  | 'status'\n  | 'uniqueName'\n  | 'lastMessage'\n  | 'notificationLevel';\n\n/**\n * The status of the channel, relative to the client: whether\n * the channel has been `joined` or the client is\n * `notParticipating` in the channel or has been `invited` to\n * the channel.\n */\ntype ChannelStatus = 'unknown' | 'notParticipating' | 'invited' | 'joined';\n\n/**\n * Channel type.\n */\ntype ChannelType = 'public' | 'private';\n\n/**\n * The user's notification level for the channel. Determines\n * whether the currently logged-in user will receive pushes for events\n * in this channel. Can be either `muted` or `default`, where\n * `default` defers to the global service push configuration.\n */\ntype NotificationLevel = 'default' | 'muted';\n\n/**\n * The conversational state of the channel.\n */\ntype ChannelState = {\n  /**\n   * The current state.\n   */\n  current: 'active' | 'inactive' | 'closed',\n\n  /**\n   * Date at which the latest channel state update happened.\n   */\n  dateUpdated: Date\n};\n\ninterface ChannelUpdatedEventArgs {\n  channel: Channel;\n  updateReasons: ChannelUpdateReason[];\n}\n\n/**\n * These options can be passed to {@link Channel.sendMessage}.\n */\ninterface SendMediaOptions {\n  /**\n   * Content type of media.\n   */\n  contentType: string;\n\n  /**\n   * Content to post.\n   */\n  media: string | Buffer;\n}\n\n/**\n * Information about the last message of a channel.\n */\ninterface LastMessage {\n  /**\n   * Message's index.\n   */\n  index?: number;\n\n  /**\n   *  Message's creation date.\n   */\n  dateCreated?: Date;\n}\n\n/**\n * A channel represents a remote channel of communication between multiple Programmable Chat clients.\n */\n\nclass Channel extends ReplayEventEmitter<ChannelEvents> {\n  private readonly channelState: ChannelInternalState;\n  private statusSource: Channels.DataSource;\n\n  private entityPromise: Promise<any>;\n  private entityName: string;\n  private entity: any;\n  private messagesEntity: any;\n  private membersEntity: Members;\n  private readonly members: any;\n\n  /**\n   * Unique system identifier of the channel.\n   */\n  public readonly sid: string;\n  public readonly links: ChannelLinks;\n  private readonly configuration: Configuration;\n  private readonly services: ChannelServices;\n\n  /**\n   * @internal\n   */\n  constructor(\n    descriptor: ChannelDescriptor,\n    sid: string,\n    links: ChannelLinks,\n    configuration: Configuration,\n    services: ChannelServices\n  ) {\n    super();\n\n    this.sid = sid;\n    this.links = links;\n    this.configuration = configuration;\n    this.services = services;\n\n    let attributes = descriptor.attributes || {};\n    let createdBy = descriptor.createdBy;\n    let dateCreated = parseTime(descriptor.dateCreated);\n    let dateUpdated = parseTime(descriptor.dateUpdated);\n    let friendlyName = descriptor.friendlyName || null;\n    let lastConsumedMessageIndex =\n      Number.isInteger(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n    let uniqueName = descriptor.uniqueName || null;\n\n    try {\n      JSON.stringify(attributes);\n    } catch (e) {\n      throw new Error('Attributes must be a valid JSON object.');\n    }\n\n    this.entityName = descriptor.channel;\n    this.channelState = {\n      uniqueName,\n      status: 'notParticipating',\n      type: descriptor.type,\n      attributes,\n      createdBy,\n      dateCreated,\n      dateUpdated,\n      friendlyName,\n      lastConsumedMessageIndex\n    };\n\n    if (descriptor.notificationLevel) {\n      this.channelState.notificationLevel = descriptor.notificationLevel;\n    }\n\n    const membersLinks = {\n      participants: this.links.participants\n    };\n\n    this.members = new Map();\n    this.membersEntity = new Members(this, this.members, membersLinks, this.configuration, this.services);\n    this.membersEntity.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n    this.membersEntity.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n    this.membersEntity.on('memberUpdated',\n      (args: MemberUpdatedEventArgs) => this.emit('memberUpdated', args));\n\n    this.messagesEntity = new Messages(this, this.configuration, services);\n    this.messagesEntity.on('messageAdded', message => this._onMessageAdded(message));\n    this.messagesEntity.on('messageUpdated',\n      (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n    this.messagesEntity.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n  }\n\n  /**\n   * Fired when a member has joined the channel.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - member that joined the channel\n   * @event\n   */\n  static readonly memberJoined = 'memberJoined';\n\n  /**\n   * Fired when a member has left the channel.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - member that left the channel\n   * @event\n   */\n  static readonly memberLeft = 'memberLeft';\n\n  /**\n   * Fired when data of a member has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Member} `member` - member that has received the update\n   *     * {@link MemberUpdateReason}[] `updateReasons` - array of reasons for update\n   * @event\n   */\n  static readonly memberUpdated = 'memberUpdated';\n\n  /**\n   * Fired when a new message has been added to the channel.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - message that has been added\n   * @event\n   */\n  static readonly messageAdded = 'messageAdded';\n\n  /**\n   * Fired when message is removed from the channel's message list.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - message that has been removed\n   * @event\n   */\n  static readonly messageRemoved = 'messageRemoved';\n\n  /**\n   * Fired when data of a message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} `message` - message that has received the update\n   *     * {@link MessageUpdateReason}[] `updateReasons` - array of reasons for update\n   * @event\n   */\n  static readonly messageUpdated = 'messageUpdated';\n\n  /**\n   * Fired when a member has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member that has stopped typing\n   * @event\n   */\n  static readonly typingEnded = 'typingEnded';\n\n  /**\n   * Fired when a member has started typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member that has started typing\n   * @event\n   */\n  static readonly typingStarted = 'typingStarted';\n\n  /**\n   * Fired when the data of the message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Channel} `channel` - channel that has received the update\n   *     * {@link ChannelUpdateReason}[] `updateReasons` - array of reasons for update\n   * @event\n   */\n  static readonly updated = 'updated';\n\n  /**\n   * Fired when the channel was destroyed or the currently-logged-in user has left private channel.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - channel that has been removed\n   * @event\n   */\n  static readonly removed = 'removed';\n\n  /**\n   * Delivery status of the channel.\n   */\n  public get status(): ChannelStatus { return this.channelState.status; }\n\n  /**\n   * MemberType of the channel.\n   */\n  public get type(): ChannelType { return this.channelState.type; }\n\n  /**\n   * Unique name of the channel.\n   */\n  public get uniqueName(): string { return this.channelState.uniqueName; }\n\n  /**\n   * Signifies whether the channel is private.\n   */\n  public get isPrivate(): boolean { return this.channelState.type === 'private'; }\n\n  /**\n   * Name of the channel.\n   */\n  public get friendlyName(): string { return this.channelState.friendlyName; }\n\n  /**\n   * Date this channel was last updated on.\n   */\n  public get dateUpdated(): any { return this.channelState.dateUpdated; }\n\n  /**\n   * Date this channel was created on.\n   */\n  public get dateCreated(): any { return this.channelState.dateCreated; }\n\n  /**\n   * Identity of the user that created this channel.\n   */\n  public get createdBy(): string { return this.channelState.createdBy; }\n\n  /**\n   * Custom attributes of the channel.\n   */\n  public get attributes(): Object { return this.channelState.attributes; }\n\n  /**\n   * Index of the last message the user has read in this channel.\n   */\n  public get lastConsumedMessageIndex(): number | null { return this.channelState.lastConsumedMessageIndex; }\n\n  /**\n   * Last message sent to this channel.\n   */\n  public get lastMessage(): LastMessage { return this.channelState.lastMessage; }\n\n  /**\n   * User notification level for this channel.\n   */\n  public get notificationLevel(): NotificationLevel { return this.channelState.notificationLevel; }\n\n  /**\n   * State of the channel.\n   */\n  public get state(): ChannelState | undefined { return this.channelState.state; }\n\n  /**\n   * Load and subscribe to this channel and do not subscribe to its members and messages.\n   * This or _subscribeStreams will need to be called before any events on channel will fire.\n   * @internal\n   */\n  async _subscribe() { // protected? private? used by others in module\n    if (this.entityPromise) { return this.entityPromise; }\n\n    return this.entityPromise = this.entityPromise ||\n      this.services.syncClient.document({ id: this.entityName, mode: 'open_existing' })\n        .then(entity => {\n          this.entity = entity;\n          this.entity.on('updated', args => { this._update(args.data); });\n          this.entity.on('removed', () => this.emit('removed', this));\n          this._update(this.entity.data);\n          return entity;\n        })\n        .catch(err => {\n          this.entity = null;\n          this.entityPromise = null;\n          if (this.services.syncClient.connectionState != 'disconnected') {\n            log.error('Failed to get channel object', err);\n          }\n          log.debug('ERROR: Failed to get channel object', err);\n          throw err;\n        });\n  }\n\n  /**\n   * Load the attributes of this channel and instantiate its members and messages.\n   * This or _subscribe will need to be called before any events on the channel will fire.\n   * This will need to be called before any events on members or messages will fire\n   * @internal\n   */\n  private async _subscribeStreams() {\n    try {\n      await this._subscribe();\n      log.trace('_subscribeStreams, this.entity.data=', this.entity.data);\n      const messagesObjectName = this.entity.data.messages;\n      const rosterObjectName = this.entity.data.roster;\n      await Promise.all([\n        this.messagesEntity.subscribe(messagesObjectName),\n        this.membersEntity.subscribe(rosterObjectName)\n      ]);\n    } catch (err) {\n      if (this.services.syncClient.connectionState !== 'disconnected') {\n        log.error('Failed to subscribe on channel objects', this.sid, err);\n      }\n      log.debug('ERROR: Failed to subscribe on channel objects', this.sid, err);\n      throw err;\n    }\n  }\n\n  /**\n   * Stop listening for and firing events on this channel.\n   * @internal\n   */\n  private async _unsubscribe() {\n    // Keep our subscription to public channels objects\n    if (this.isPrivate && this.entity) {\n      await this.entity.close();\n      this.entity = null;\n      this.entityPromise = null;\n    }\n\n    return Promise.all([\n      this.membersEntity.unsubscribe(),\n      this.messagesEntity.unsubscribe()\n    ]);\n  }\n\n  /**\n   * Set channel status.\n   * @internal\n   */\n  _setStatus(status: ChannelStatus, source: Channels.DataSource) {\n    this.statusSource = source;\n\n    if (this.channelState.status === status) { return; }\n\n    this.channelState.status = status;\n\n    if (status === 'joined') {\n      this._subscribeStreams()\n          .catch(err => {\n            log.debug('ERROR while setting channel status ' + status, err);\n            if (this.services.syncClient.connectionState !== 'disconnected') {\n              throw err;\n            }\n          });\n    } else if (status === 'invited') {\n      this._subscribe()\n          .catch(err => {\n            log.debug('ERROR while setting channel status ' + status, err);\n            if (this.services.syncClient.connectionState !== 'disconnected') {\n              throw err;\n            }\n          });\n    } else if (this.entityPromise) {\n      this._unsubscribe().catch(err => {\n        log.debug('ERROR while setting channel status ' + status, err);\n        if (this.services.syncClient.connectionState !== 'disconnected') {\n          throw err;\n        }\n      });\n    }\n  }\n\n  /**\n   * Update source of the channel.\n   * @internal\n   */\n  _statusSource(): Channels.DataSource {\n    return this.statusSource;\n  }\n\n  private static preprocessUpdate(update, channelSid) {\n    try {\n      if (typeof update.attributes === 'string') {\n        update.attributes = JSON.parse(update.attributes);\n      } else if (update.attributes) {\n        JSON.stringify(update.attributes);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed attributes from the server for channel: ' + channelSid);\n      update.attributes = {};\n    }\n\n    try {\n      if (update.dateCreated) {\n        update.dateCreated = new Date(update.dateCreated);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed dateCreated from the server for channel: ' + channelSid);\n      delete update.dateCreated;\n    }\n\n    try {\n      if (update.dateUpdated) {\n        update.dateUpdated = new Date(update.dateUpdated);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed dateUpdated from the server for channel: ' + channelSid);\n      delete update.dateUpdated;\n    }\n\n    try {\n      if (update.lastMessage && update.lastMessage.timestamp) {\n        update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed lastMessage.timestamp from the server for channel: ' + channelSid);\n      delete update.lastMessage.timestamp;\n    }\n  }\n\n  /**\n   * Update the local channel object with new values.\n   * @internal\n   */\n  _update(update) {\n    log.trace('_update', update);\n\n    Channel.preprocessUpdate(update, this.sid);\n    const updateReasons = new Set<ChannelUpdateReason>();\n\n    for (const key of Object.keys(update)) {\n      const localKey = fieldMappings[key];\n\n      if (!localKey) {\n        continue;\n      }\n\n      switch (localKey) {\n        case fieldMappings.status:\n          if (!update.status || update.status === 'unknown'\n            || this.channelState.status === update.status) {\n            break;\n          }\n\n          this.channelState.status = update.status;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.attributes:\n          if (isEqual(this.channelState.attributes, update.attributes)) {\n            break;\n          }\n\n          this.channelState.attributes = update.attributes;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.lastConsumedMessageIndex:\n          if (update.lastConsumedMessageIndex === undefined\n            || update.lastConsumedMessageIndex === this.channelState.lastConsumedMessageIndex) {\n            break;\n          }\n\n          this.channelState.lastConsumedMessageIndex = update.lastConsumedMessageIndex;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.lastMessage:\n          if (this.channelState.lastMessage && !update.lastMessage) {\n            delete this.channelState.lastMessage;\n            updateReasons.add(localKey);\n\n            break;\n          }\n\n          this.channelState.lastMessage = this.channelState.lastMessage || {};\n\n          if (update.lastMessage?.index !== undefined\n            && update.lastMessage.index !== this.channelState.lastMessage.index) {\n            this.channelState.lastMessage.index = update.lastMessage.index;\n            updateReasons.add(localKey);\n          }\n\n          if (update.lastMessage?.timestamp !== undefined\n            && this.channelState.lastMessage?.dateCreated?.getTime() !== update.lastMessage.timestamp.getTime()) {\n            this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\n            updateReasons.add(localKey);\n          }\n\n          if (isEqual(this.channelState.lastMessage, {})) {\n            delete this.channelState.lastMessage;\n          }\n\n          break;\n        case fieldMappings.state:\n          const state = update.state || undefined;\n\n          if (state !== undefined) {\n            state.dateUpdated = new Date(state.dateUpdated);\n          }\n\n          if (isEqual(this.channelState.state, state)) {\n            break;\n          }\n\n          this.channelState.state = state;\n          updateReasons.add(localKey);\n\n          break;\n        default:\n          const isDate = update[key] instanceof Date;\n          const keysMatchAsDates = isDate && this.channelState[localKey]?.getTime() === update[key].getTime();\n          const keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n\n          if (keysMatchAsDates || keysMatchAsNonDates) {\n            break;\n          }\n\n          this.channelState[localKey] = update[key];\n          updateReasons.add(localKey);\n      }\n    }\n\n    if (updateReasons.size > 0) {\n      this.emit('updated', { channel: this, updateReasons: [...updateReasons] });\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onMessageAdded(message) {\n    for (let member of this.members.values()) {\n      if (member.identity === message.author) {\n        member._endTyping();\n        break;\n      }\n    }\n    this.emit('messageAdded', message);\n  }\n\n  private async _setLastConsumedMessageIndex(index: number | null): Promise<number> {\n    const result = await this.services.commandExecutor.mutateResource<\n      EditLastConsumedMessageIndexRequest,\n      EditLastConsumedMessageIndexResponse\n    >(\n      'post',\n      `${this.configuration.links.myConversations}/${this.sid}`,\n      {\n        last_consumed_message_index: index\n      }\n    );\n\n    return result.unread_messages_count;\n  }\n\n  /**\n   * Add a member to the channel by its identity.\n   * @param identity Identity of the Client to add.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async add(identity: string): Promise<void> {\n    await this.membersEntity.add(identity);\n  }\n\n  /**\n   * Advance the channel's last consumed message index to the current read horizon.\n   * Rejects if the user is not a member of the channel.\n   * Last consumed message index is updated only if the new index value is higher than the previous.\n   * @param index Message index to advance to.\n   * @return Resulting unread messages count in the channel.\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async advanceLastConsumedMessageIndex(index: number): Promise<number> {\n    await this._subscribeStreams();\n\n    if (index < this.lastConsumedMessageIndex) {\n      return await this._setLastConsumedMessageIndex(this.lastConsumedMessageIndex);\n    }\n\n    return await this._setLastConsumedMessageIndex(index);\n  }\n\n  /**\n   * Decline an invitation to the channel and unsubscribe from its events.\n   */\n  public async decline(): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource(\n      'delete',\n      `${this.links.invites}/${this.configuration.userIdentity}`\n    );\n\n    return this;\n  }\n\n  /**\n   * Delete the channel and unsubscribe from its events.\n   */\n  public async delete(): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource(\n      'delete',\n      this.links.self,\n    );\n\n    return this;\n  }\n\n  /**\n   * Get the custom attributes of this Channel.\n   *\n   * *Note: {@link Channel.attributes} will be empty for public channels until this function is called.*\n   */\n  public async getAttributes(): Promise<any> {\n    await this._subscribe();\n    return this.attributes;\n  }\n\n  /**\n   * Return messages from the channel using the paginator interface.\n   * @param pageSize Number of messages to return in a single chunk. Default is 30.\n   * @param anchor Index of the newest message to fetch. Default is from the end.\n   * @param direction Query direction. By default it queries backwards\n   * from newer to older. The `\"forward\"` value will query in the opposite direction.\n   * @return A page of messages.\n   */\n  @validateTypesAsync(\n    ['undefined', nonNegativeInteger],\n    ['undefined', nonNegativeInteger],\n    ['undefined', literal('backwards', 'forward')]\n  )\n  public async getMessages(pageSize?: number, anchor?: number, direction?: 'backwards' | 'forward'): Promise<Paginator<Message>> {\n    await this._subscribeStreams();\n    return await this.messagesEntity.getMessages(pageSize, anchor, direction);\n  }\n\n  /**\n   * Get a list of all the members who are joined to this channel.\n   */\n  public async getMembers(): Promise<Member[]> {\n    await this._subscribeStreams();\n    return await this.membersEntity.getMembers();\n  }\n\n  /**\n   * Get channel members count.\n   *\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not\n   * provide real time events for counter values changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any core application\n   * logic based on these counters being accurate in real time.\n   */\n  public async getMembersCount(): Promise<number> {\n    const url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n    const response = await this.services.network.get(url);\n\n    return response.body.participants_count;\n  }\n\n  /**\n   * Get a member by its SID.\n   * @param memberSid Member SID.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getMemberBySid(memberSid: string): Promise<Member> {\n    return await this.membersEntity.getMemberBySid(memberSid);\n  }\n\n  /**\n   * Get a member by its identity.\n   * @param identity Member identity.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getMemberByIdentity(identity: string): Promise<Member> {\n    return await this.membersEntity.getMemberByIdentity(identity);\n  }\n\n  /**\n   * Get the total message count in the channel.\n   *\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not\n   * provide real time events for counter values changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any core application\n   * logic based on these counters being accurate in real time.\n   */\n  public async getMessagesCount(): Promise<number> {\n    const url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n    const response = await this.services.network.get(url);\n\n    return response.body.messages_count;\n  }\n\n  /**\n   * Get unread messages count for the user if they are a member of this channel.\n   * Rejects if the user is not a member of the channel.\n   *\n   * Use this method to obtain the number of unread messages together with\n   * {@link Channel.updateLastConsumedMessageIndex} instead of relying on the\n   * message indices which may have gaps. See {@link Message.index} for details.\n   *\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not\n   * provide real time events for counter values changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any core application\n   * logic based on these counters being accurate in real time.\n   */\n  public async getUnconsumedMessagesCount(): Promise<number | null> {\n    const url = new UriBuilder(this.configuration.links.myConversations).path(this.sid).build();\n    const response = await this.services.network.get(url);\n\n    if (response.body.conversation_sid !== this.sid) {\n      throw new Error('Channel was not found in the user channels list');\n    }\n\n    const unreadMessageCount = response.body.unread_messages_count;\n\n    if (typeof unreadMessageCount === 'number') {\n      return unreadMessageCount;\n    }\n\n    return null;\n  }\n\n  /**\n   * Invite a user to the channel by their identity.\n   * @param identity Identity of the user.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async invite(identity: string): Promise<void> {\n    await this.membersEntity.invite(identity);\n  }\n\n  /**\n   * Join the channel and subscribe to its events.\n   */\n  public async join(): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource<JoinChannelRequest, JoinChannelResponse>(\n      'post',\n      this.links.participants,\n      {\n        identity: this.configuration.userIdentity\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Leave the channel.\n   */\n  public async leave(): Promise<Channel> {\n    if (this.channelState.status === 'joined') {\n      await this.services.commandExecutor.mutateResource(\n        'delete',\n        `${this.links.participants}/${this.configuration.userIdentity}`,\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Remove a member from the channel. When a string is passed as the argument, it will assume that the string is an identity.\n   * @param member Identity or the member object to remove.\n   */\n  @validateTypesAsync([nonEmptyString, Member])\n  public async removeMember(member: string | Member): Promise<void> {\n    await this.membersEntity.remove(typeof member === 'string' ? member : member.sid);\n  }\n\n  /**\n   * Send a message to the channel.\n   * @param message Message body for the text message,\n   * `FormData` or {@link Channel.MediaOptions) for media content. Sending FormData is supported only with the browser engine.\n   * @param messageAttributes Attributes for the message.\n   * @return Index of the new message.\n   */\n  @validateTypesAsync(\n    [\n      'string',\n      literal(null),\n      // Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.\n      custom((value) => [value instanceof FormData, 'an instance of FormData']),\n      objectSchema('media options', {\n        contentType: [nonEmptyString, 'undefined'],\n        media: custom((value) => {\n          let isValid = (typeof value === 'string' && value.length > 0) || value instanceof Uint8Array || value instanceof ArrayBuffer;\n\n          if (typeof Blob === 'function') {\n            isValid = isValid || value instanceof Blob;\n          }\n\n          return [\n            isValid,\n            'a non-empty string, an instance of Buffer or an instance of Blob'\n          ];\n        })\n      })\n    ],\n    ['undefined', 'string', 'number', 'boolean', 'object', literal(null)]\n  )\n  public async sendMessage(message: string | FormData | SendMediaOptions | null, messageAttributes?: any): Promise<number> {\n    if (typeof message === 'string' || message === null) {\n      const response = await this.messagesEntity.send(message, messageAttributes);\n      return parseToNumber(response.index);\n    }\n\n    const response = await this.messagesEntity.sendMedia(message, messageAttributes);\n    return parseToNumber(response.index);\n  }\n\n  /**\n   * Set last consumed message index of the channel to the index of the last known message.\n   * @return Resulting unread messages count in the channel.\n   */\n  public async setAllMessagesConsumed(): Promise<number> {\n    await this._subscribeStreams();\n    const messagesPage = await this.getMessages(1);\n    if (messagesPage.items.length > 0) {\n      return this.advanceLastConsumedMessageIndex(messagesPage.items[0].index);\n    }\n    return Promise.resolve(0);\n  }\n\n  /**\n   * Set all messages in the channel unread.\n   * @return Resulting unread messages count in the channel.\n   */\n  public async setNoMessagesConsumed(): Promise<number> {\n    await this._subscribeStreams();\n    return await this._setLastConsumedMessageIndex(null);\n  }\n\n  /**\n   * Set user notification level for this channel.\n   * @param notificationLevel New user notification level.\n   */\n  @validateTypesAsync(literal('default', 'muted'))\n  public async setUserNotificationLevel(notificationLevel: NotificationLevel): Promise<void> {\n    await this.services.commandExecutor.mutateResource<EditNotificationLevelRequest>(\n      'post',\n      `${this.configuration.links.myConversations}/${this.sid}`,\n      {\n        notification_level: notificationLevel\n      }\n    );\n  }\n\n  /**\n   * Send a notification to the server indicating that this client is currently typing in this channel.\n   * Typing ended notification is sent after a while automatically, but by calling this method again you ensure that typing ended is not received.\n   */\n  public typing(): Promise<void> {\n    return this.services.typingIndicator.send(this.sid);\n  }\n\n  /**\n   * Update the attributes of the channel.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource<EditChannelRequest, ChannelResponse>(\n      'post',\n      this.links.self,\n      { attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined }\n    );\n\n    return this;\n  }\n\n  /**\n   * Update the friendly name of the channel.\n   * @param friendlyName New friendly name.\n   */\n  @validateTypesAsync('string')\n  public async updateFriendlyName(friendlyName: string): Promise<Channel> {\n    if (this.channelState.friendlyName !== friendlyName) {\n      await this.services.commandExecutor.mutateResource<EditChannelRequest, ChannelResponse>(\n        'post',\n        this.links.self,\n        { friendly_name: friendlyName }\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Set the last consumed message index to the current read horizon.\n   * @param index Message index to set as last consumed.\n   * If null is provided, then the behavior is identical to {@link Channel.setNoMessagesConsumed}.\n   * @returns Resulting unread messages count in the channel.\n   */\n  @validateTypesAsync([literal(null), nonNegativeInteger])\n  public async updateLastConsumedMessageIndex(index: number | null): Promise<number> {\n    await this._subscribeStreams();\n    return await this._setLastConsumedMessageIndex(index);\n  }\n\n  /**\n   * Update the unique name of the channel.\n   * @param uniqueName New unique name for the channel. Setting unique name to null removes it.\n   */\n  @validateTypesAsync(['string', literal(null)])\n  public async updateUniqueName(uniqueName: string | null): Promise<Channel> {\n    if (this.channelState.uniqueName !== uniqueName) {\n      if (!uniqueName) {\n        uniqueName = '';\n      }\n\n      await this.services.commandExecutor.mutateResource<EditChannelRequest, ChannelResponse>(\n        'post',\n        this.links.self,\n        { unique_name: uniqueName }\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Get user descriptors of this channel.\n   */\n  public async getUserDescriptors(): Promise<Paginator<UserDescriptor>> {\n    return await this.services.users.getChannelUserDescriptors(this.sid);\n  }\n}\n\nexport {\n  ChannelDescriptor,\n  Channel,\n  ChannelType,\n  ChannelUpdateReason,\n  ChannelStatus,\n  NotificationLevel,\n  ChannelState,\n  ChannelUpdatedEventArgs,\n  SendMediaOptions,\n  LastMessage\n};\n","class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve;\n  private _reject;\n\n  public current: T;\n\n  constructor() {\n    this._promise = new Promise<T>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  public get promise(): Promise<T> { return this._promise; }\n\n  update(value: T) {\n    this._resolve(value);\n  }\n\n  set(value: T) {\n    this.current = value;\n    this._resolve(value);\n  }\n\n  fail(e) {\n    this._reject(e);\n  }\n}\n\nexport { Deferred };\n","import { Logger } from '../logger';\nimport {\n  Channel,\n  ChannelUpdatedEventArgs,\n  ChannelUpdateReason\n} from '../channel';\n\nimport { SyncMap, SyncClient, SyncMapItem } from 'twilio-sync';\nimport { ChannelDescriptor } from '../channeldescriptor';\nimport { Users } from './users';\nimport { Network } from '../services/network';\nimport { TypingIndicator } from '../services/typingindicator';\nimport { McsClient } from '@twilio/mcs-client';\nimport { Deferred } from '../util/deferred';\nimport { Member, MemberUpdatedEventArgs, MemberUpdateReason } from '../member';\nimport {\n  Message,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason\n} from '../message';\nimport { UriBuilder } from '../util';\nimport { Configuration } from '../configuration';\nimport { CommandExecutor } from '../commandexecutor';\nimport { CreateChannelRequest } from '../interfaces/commands/createchannel';\nimport { ChannelResponse } from '../interfaces/commands/channel';\nimport { SyncPaginator } from '../syncpaginator';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype ChannelsEvents = {\n  channelAdded: (channel: Channel) => void;\n  channelJoined: (channel: Channel) => void;\n  channelInvited: (channel: Channel) => void;\n  channelLeft: (channel: Channel) => void;\n  channelRemoved: (channel: Channel) => void;\n  channelUpdated: (data: {\n    channel: Channel;\n    updateReasons: ChannelUpdateReason[];\n  }) => void;\n  memberJoined: (member: Member) => void;\n  memberLeft: (member: Member) => void;\n  memberUpdated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  typingEnded: (member: Member) => void;\n  typingStarted: (member: Member) => void;\n};\n\nconst log = Logger.scope('Channels');\n\nexport interface ChannelsServices {\n  syncClient: SyncClient;\n  users: Users;\n  typingIndicator: TypingIndicator;\n  network: Network;\n  mcsClient: McsClient;\n  commandExecutor: CommandExecutor;\n}\n\n/**\n * Represents channels collection\n * {@see Channel}\n */\nclass Channels extends ReplayEventEmitter<ChannelsEvents> {\n\n  public readonly channels: Map<string, Channel> = new Map<string, Channel>();\n  private readonly tombstones: Set<string> = new Set<string>();\n  private myChannelsFetched = false;\n  public myChannelsRead: Deferred<boolean> = new Deferred<boolean>();\n\n  constructor(\n    private readonly configuration: Configuration,\n    private readonly services: ChannelsServices\n  ) {\n    super();\n  }\n\n  private async getMap(): Promise<SyncMap> {\n    return await this.services.syncClient.map({\n      id: this.configuration.myConversations,\n      mode: 'open_existing'\n    });\n  }\n\n  /**\n   * Add channel to server\n   * @private\n   * @returns {Promise<Channel>} Channel\n   */\n  public async addChannel(options): Promise<Channel> {\n    let attributes;\n    if (typeof options.attributes === 'undefined') {\n      attributes = {};\n    } else {\n      attributes = options.attributes;\n    }\n\n    const response = await this.services.commandExecutor.mutateResource<CreateChannelRequest, ChannelResponse>(\n      'post',\n      this.configuration.links.conversations,\n      {\n        type: options.isPrivate ? 'private' : 'public',\n        unique_name: options.uniqueName,\n        friendly_name: options.friendlyName,\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined,\n      }\n    );\n\n    const channelSid = response.sid || null;\n    const channelDocument = response.sync_objects.conversation || null;\n    const links = {\n      self: response.url,\n      ...response.links\n    };\n\n    let existingChannel = this.channels.get(channelSid);\n    if (existingChannel) {\n      await existingChannel._subscribe();\n      return existingChannel;\n    }\n\n    let channel = new Channel(\n      {\n        channel: channelDocument,\n\n        entityName: null,\n        uniqueName: null,\n        attributes: null,\n        createdBy: null,\n        friendlyName: null,\n        lastConsumedMessageIndex: null,\n        type: options.isPrivate ? 'private' : 'public',\n        dateCreated: null,\n        dateUpdated: null\n      },\n      channelSid,\n      links,\n      this.configuration,\n      this.services\n    );\n\n    this.channels.set(channel.sid, channel);\n    this.registerForEvents(channel);\n\n    await channel._subscribe();\n    this.emit('channelAdded', channel);\n    return channel;\n  }\n\n  /**\n   * Fetch channels list and instantiate all necessary objects\n   */\n  public async fetchChannels(): Promise<Channels> {\n    try {\n      const map = await this.getMap();\n\n      map.on('itemAdded', args => {\n        log.debug(`itemAdded: ${args.item.key}`);\n        this.upsertChannel('sync', args.item.key, args.item.data);\n      });\n\n      map.on('itemRemoved', args => {\n        log.debug(`itemRemoved: ${args.key}`);\n        const sid = args.key;\n\n        if (!this.myChannelsFetched) {\n          this.tombstones.add(sid);\n        }\n\n        const channel = this.channels.get(sid);\n\n        if (!channel) {\n          return;\n        }\n\n        if (channel.status === 'joined' || channel.status === 'invited') {\n          channel._setStatus('notParticipating', 'sync');\n          this.emit('channelLeft', channel);\n        }\n\n        if (channel.isPrivate) {\n          this.channels.delete(sid);\n          this.emit('channelRemoved', channel);\n          channel.emit('removed', channel);\n        }\n      });\n\n      map.on('itemUpdated', args => {\n        log.debug(`itemUpdated: ${args.item.key}`);\n        this.upsertChannel('sync', args.item.key, args.item.data);\n      });\n\n      const myChannels = await this._fetchMyChannels();\n      const upserts = [];\n\n      for (const channel of myChannels) {\n        upserts.push(this.upsertChannel('rest', channel.channel_sid, channel));\n      }\n\n      this.myChannelsRead.set(true);\n\n      await Promise.all(upserts);\n\n      this.myChannelsFetched = true;\n      this.tombstones.clear();\n\n      log.debug('The channels list has been successfully fetched');\n\n      return this;\n    } catch (error) {\n      const errorMessage = 'Failed to fetch the channels list';\n\n      if (this.services.syncClient.connectionState !== 'disconnected') {\n        log.error(errorMessage, error);\n      }\n\n      log.debug(`ERROR: ${errorMessage}`, error);\n\n      throw error;\n    }\n  }\n\n  private async _wrapPaginator(page, op) {\n    return op(page.items)\n      .then(items => ({\n        items: items,\n        hasNextPage: page.hasNextPage,\n        hasPrevPage: page.hasPrevPage,\n        nextPage: () => page.nextPage().then(x => this._wrapPaginator(x, op)),\n        prevPage: () => page.prevPage().then(x => this._wrapPaginator(x, op))\n      }));\n  }\n\n  public async getChannels(args): Promise<SyncPaginator<Channel>> {\n    const channelsMap = await this.getMap();\n    const page = await channelsMap.getItems(args);\n    return this._wrapPaginator(page\n      , items => Promise.all(items.map((item: SyncMapItem) => this.upsertChannel('sync', item.key, item.data))));\n  }\n\n  public async getChannel(sid: string): Promise<Channel> {\n    const channelsMap = await this.getMap();\n    const page = await channelsMap.getItems({ key: sid });\n    const items = page.items.map((item: SyncMapItem) => this.upsertChannel('sync', item.key, item.data));\n    return items.length > 0 ? items[0] : null;\n  }\n\n  public async pushChannel(descriptor: Channel | ChannelDescriptor): Promise<Channel> {\n    const sid = descriptor.sid;\n    const data = {\n      entityName: null,\n      lastConsumedMessageIndex: descriptor.lastConsumedMessageIndex,\n      type: descriptor.type,\n      status: descriptor.status,\n      friendlyName: descriptor.friendlyName,\n      dateUpdated: descriptor.dateUpdated,\n      dateCreated: descriptor.dateCreated,\n      uniqueName: descriptor.uniqueName,\n      createdBy: descriptor.createdBy,\n      attributes: descriptor.attributes,\n      channel: descriptor instanceof ChannelDescriptor ? descriptor.channel : null,\n      notificationLevel: descriptor.notificationLevel,\n      sid: sid\n    };\n\n    return await this.upsertChannel('chat', sid, data);\n  }\n\n  private _updateChannel(source: Channels.DataSource, channel: Channel, data): void {\n    const areSourcesDifferent = channel._statusSource() !== undefined && source !== channel._statusSource();\n    const isChannelSourceSync = source !== 'rest' || channel._statusSource() === 'sync';\n\n    if (areSourcesDifferent && isChannelSourceSync && source !== 'sync') {\n      log.trace('upsertChannel: the channel is known from sync and it came from chat, ignoring', {\n        sid: channel.sid,\n        data: data.status,\n        channel: channel.status\n      });\n\n      return;\n    }\n\n    if (['joined', 'invited'].includes(data.status) && channel.status !== data.status) {\n      channel._setStatus(data.status, source);\n\n      let updateData: any = {};\n\n      if (data.notificationLevel !== undefined) {\n        updateData.notificationLevel = data.notificationLevel;\n      }\n\n      if (data.lastConsumedMessageIndex !== undefined) {\n        updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n      }\n\n      if (!isEqual(updateData, {})) {\n        channel._update(updateData);\n      }\n\n      channel._subscribe().then(() => {\n        this.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', channel);\n      });\n\n      return;\n    }\n\n    if (['joined', 'invited'].includes(channel.status) && data.status === 'notParticipating') {\n      channel._setStatus('notParticipating', source);\n      channel._update(data);\n      channel._subscribe().then(() => {\n        this.emit('channelLeft', channel);\n      });\n\n      return;\n    }\n\n    if (data.type === 'private' && data.status === 'notParticipating') {\n      channel._subscribe();\n\n      return;\n    }\n\n    channel._update(data);\n  }\n\n  private async upsertChannel(source: Channels.DataSource, sid: string, data): Promise<Channel> {\n    log.trace(`upsertChannel called for ${sid}`, data);\n    const channel = this.channels.get(sid);\n\n    // If the channel is known, update it\n    if (channel) {\n      log.trace(\n        `upsertChannel: the channel ${channel.sid} is known;` +\n        `its status is known from source ${channel._statusSource()} ` +\n        `and the update came from source ${source}`,\n        channel\n      );\n      this._updateChannel(source, channel, data);\n\n      await channel._subscribe();\n      return channel;\n    }\n\n    // If the channel is deleted, ignore it\n    if (['chat', 'rest'].includes(source) && this.tombstones.has(sid)) {\n      log.trace('upsertChannel: the channel is deleted but reappeared again from chat, ignoring', sid);\n\n      return null;\n    }\n\n    // If the channel is unknown, fetch it\n    log.trace(`upsertChannel: creating a local channel object with sid ${sid}`, data);\n    const baseLink = `${this.configuration.links.conversations}/${sid}`;\n    const links = {\n      self: baseLink,\n      messages: `${baseLink}/Messages`,\n      participants: `${baseLink}/Participants`,\n      invites: `${baseLink}/Invites`\n    };\n    const newChannel = new Channel(data, sid, links, this.configuration, this.services);\n    this.channels.set(sid, newChannel);\n\n    await newChannel._subscribe();\n    this.registerForEvents(newChannel);\n    this.emit('channelAdded', newChannel);\n\n    if (['joined', 'invited'].includes(data.status)) {\n      newChannel._setStatus(data.status, source);\n      this.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', newChannel);\n    }\n\n    return newChannel;\n  }\n\n  private onChannelRemoved(sid: string) {\n    let channel = this.channels.get(sid);\n    if (channel) {\n      this.channels.delete(sid);\n      this.emit('channelRemoved', channel);\n    }\n  }\n\n  private registerForEvents(channel) {\n    channel.on('removed', () => this.onChannelRemoved(channel.sid));\n    channel.on('updated', (args: ChannelUpdatedEventArgs) => this.emit('channelUpdated', args));\n    channel.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n    channel.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n    channel.on('memberUpdated', (args: MemberUpdatedEventArgs) => this.emit('memberUpdated', args));\n    channel.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n    channel.on('messageUpdated', (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n    channel.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n    channel.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n    channel.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n  }\n\n  private async _fetchMyChannels() {\n    let channels = [];\n    let pageToken: null | string = null;\n\n    do {\n      const url = new UriBuilder(this.configuration.links.myConversations);\n\n      if (pageToken) {\n        url.arg('PageToken', pageToken);\n      }\n\n      const response = await this.services.network.get(url.build());\n      const preProcessedChannels = response.body.conversations.map(\n        (channelDescriptor) => ({\n          descriptor: channelDescriptor,\n          channel_sid: channelDescriptor.conversation_sid,\n          status: channelDescriptor.status,\n          channel: channelDescriptor.sync_objects.conversation,\n          messages: channelDescriptor.sync_objects.messages,\n          roster: `${channelDescriptor.conversation_sid}.roster`,\n          lastConsumedMessageIndex: channelDescriptor.last_consumed_message_index,\n          notificationLevel: channelDescriptor.notification_level\n        })\n      );\n\n      pageToken = response.body.meta.next_token;\n      channels = [...channels, ...preProcessedChannels];\n    } while (pageToken);\n\n    return channels;\n  }\n}\n\nnamespace Channels {\n  export type DataSource = 'sync' | 'chat' | 'rest';\n}\n\nexport { Channel, Channels };\n","import { Logger } from './logger';\nimport { User } from './user';\nimport { Users } from './data/users';\nimport { parseAttributes } from './util';\n\nconst log = Logger.scope('UserDescriptor');\n\ninterface UserDescriptorServices {\n  users: Users;\n}\n\n/**\n * Contains extended user information.\n */\nclass UserDescriptor {\n\n  private services: UserDescriptorServices;\n  private descriptor: any;\n\n  /**\n   * User identity.\n   */\n  public readonly identity: string;\n\n  /**\n   * Friendly name of the user, null if not set.\n   */\n  public readonly friendlyName: string;\n\n  /**\n   * Custom attributes of the user.\n   */\n  public readonly attributes: any;\n\n  /**\n   * Status of the real-time conversation connection of the user.\n   *\n   * Works only when the reachability functionality is enabled.\n   * Refer to {@link Client.reachabilityEnabled}.\n   */\n  public readonly online: boolean;\n\n  /**\n   * User push notification registration status.\n   *\n   * Works only when the reachability functionality is enabled.\n   * Refer to {@link Client.reachabilityEnabled}.\n   */\n  public readonly notifiable: boolean;\n\n  /**\n   * @internal\n   */\n  constructor(services: UserDescriptorServices, descriptor: any) {\n    this.services = services;\n    this.descriptor = descriptor;\n\n    this.identity = descriptor.identity;\n    this.friendlyName = descriptor.friendly_name;\n    this.attributes = parseAttributes(descriptor.attributes, 'Failed to parse user attributes', log);\n    this.online = descriptor.is_online;\n    this.notifiable = descriptor.is_notifiable;\n  }\n\n  /**\n   * Get the user object from the descriptor and subscribe to it.\n   */\n  subscribe(): Promise<User> {\n    return this.services.users.getUser(this.identity, this.descriptor.sync_unique_name);\n  }\n\n  _getDescriptor() {\n    return this.descriptor;\n  }\n}\n\nexport {\n  UserDescriptor,\n  UserDescriptorServices\n};\n","import { UriBuilder } from '../util/index';\nimport { RestPaginator } from '../restpaginator';\nimport { UserDescriptor } from '../userdescriptor';\nimport { Users } from './users';\nimport { Network } from '../services/network';\nimport { Configuration } from '../configuration';\n\nexport interface UserDescriptorsServices {\n  users: Users;\n  network: Network;\n}\n\nclass UserDescriptors {\n  constructor(\n    private readonly configuration: Configuration,\n    private readonly services: UserDescriptorsServices,\n  ) {\n  }\n\n  public async getUserDescriptor(identity: string): Promise<UserDescriptor> {\n    const url = new UriBuilder(this.configuration.links.users).path(identity).build();\n    const response = await this.services.network.get(url);\n    return new UserDescriptor(this.services, response.body);\n  }\n\n  public async getChannelUserDescriptors(channelSid: string, args: any = {}): Promise<RestPaginator<UserDescriptor>> {\n    const url = new UriBuilder(this.configuration.links.users)\n      .arg('ConversationSid', channelSid).arg('PageToken', args.pageToken)\n      .build();\n    const response = await this.services.network.get(url);\n    return new RestPaginator<UserDescriptor>(response.body.users.map(x => new UserDescriptor(this.services, x))\n      , pageToken => this.getChannelUserDescriptors(channelSid, { pageToken })\n      , response.body.meta.prev_token\n      , response.body.meta.next_token);\n  }\n}\n\nexport { UserDescriptors };\n","import { UserUpdatedEventArgs, User, UserUpdateReason } from '../user';\nimport { UserDescriptor } from '../userdescriptor';\nimport { UserDescriptors } from './userdescriptors';\nimport { Paginator } from '../interfaces/paginator';\nimport { Network } from '../services/network';\nimport { SyncClient } from 'twilio-sync';\nimport { Configuration } from '../configuration';\nimport { CommandExecutor } from '../commandexecutor';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype UsersEvents = {\n  userUpdated: (data: {\n    user: User;\n    updateReasons: UserUpdateReason[];\n  }) => void;\n  userSubscribed: (user: User) => void;\n  userUnsubscribed: (user: User) => void;\n};\n\nexport interface UsersServices {\n  network: Network;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\n/**\n * @classdesc Container for known users\n * @fires Users#userUpdated\n */\nclass Users extends ReplayEventEmitter<UsersEvents> {\n\n  private userDescriptors: UserDescriptors;\n  private subscribedUsers: Map<string, User>;\n  private fifoStack: any;\n  public readonly myself: User;\n\n  constructor(\n    myself: User,\n    private readonly configuration: Configuration,\n    private readonly services: UsersServices\n  ) {\n    super();\n\n    this.fifoStack = [];\n\n    this.myself = myself;\n    this.myself.on('updated', (args: UserUpdatedEventArgs) => this.emit('userUpdated', args));\n    this.myself.on('userSubscribed', () => this.emit('userSubscribed', this.myself));\n    this.myself.on('userUnsubscribed', () => {\n      this.emit('userUnsubscribed', this.myself);\n      this.myself._ensureFetched();\n    });\n    this.subscribedUsers = new Map<string, User>();\n    this.userDescriptors = new UserDescriptors(this.configuration, {...this.services, users: this });\n  }\n\n  private handleUnsubscribeUser(user: User): void {\n    if (this.subscribedUsers.has(user.identity)) {\n      this.subscribedUsers.delete(user.identity);\n    }\n    let foundItemIndex = -1;\n    let foundItem = this.fifoStack.find((item, index) => {\n      if (item == user.identity) {\n        foundItemIndex = index;\n        return true;\n      }\n      return false;\n    });\n    if (foundItem) {\n      this.fifoStack.splice(foundItemIndex, 1);\n    }\n    this.emit('userUnsubscribed', user);\n  }\n\n  private handleSubscribeUser(user: User): void {\n    if (this.subscribedUsers.has(user.identity)) {\n      return;\n    }\n    if (this.fifoStack.length >= this.configuration.userInfosToSubscribe) {\n      this.subscribedUsers.get(this.fifoStack.shift()).unsubscribe();\n    }\n    this.fifoStack.push(user.identity);\n    this.subscribedUsers.set(user.identity, user);\n    this.emit('userSubscribed', user);\n  }\n\n  /**\n   * Gets user, if it's in subscribed list - then return the user object from it,\n   * if not - then subscribes and adds user to the FIFO stack\n   * @returns {Promise<User>} Fully initialized user\n   */\n  public async getUser(identity: string, entityName: string = null): Promise<User> {\n    await this.myself._ensureFetched();\n\n    if (identity == this.myself.identity) {\n      return this.myself;\n    }\n\n    let user = this.subscribedUsers.get(identity);\n    if (!user) {\n      if (!entityName) {\n        let userDescriptor = await this.getUserDescriptor(identity);\n        entityName = userDescriptor._getDescriptor().sync_objects.user_info_map;\n      }\n\n      user = new User(identity, entityName, this.configuration, this.services);\n      user.on('updated', (args: UserUpdatedEventArgs) => this.emit('userUpdated', args));\n      user.on('userSubscribed', () => this.handleSubscribeUser(user));\n      user.on('userUnsubscribed', () => this.handleUnsubscribeUser(user));\n      await user._ensureFetched();\n    }\n\n    return user;\n  }\n\n  /**\n   * @returns {Promise<UserDescriptor>} User descriptor\n   */\n  public async getUserDescriptor(identity: string): Promise<UserDescriptor> {\n    return this.userDescriptors.getUserDescriptor(identity);\n  }\n\n  /**\n   * @returns {Promise<Paginator<UserDescriptor>>} Users descriptors page for given channel sid\n   */\n  public async getChannelUserDescriptors(channelSid: string): Promise<Paginator<UserDescriptor>> {\n    return this.userDescriptors.getChannelUserDescriptors(channelSid);\n  }\n\n  /**\n   * @returns {Promise<Array<User>>} returns list of subscribed User objects {@see User}\n   */\n  public async getSubscribedUsers(): Promise<Array<User>> {\n    await this.myself._ensureFetched();\n\n    const users = [this.myself];\n    this.subscribedUsers.forEach((user) => users.push(user));\n\n    return users;\n  }\n}\n\nexport { Users };\n","import { Logger } from '../logger';\n\nimport { Notifications } from '@twilio/notifications';\n\nimport { NotificationTypes } from '../interfaces/notificationtypes';\nimport { Transport } from 'twilsock';\nimport { Configuration } from '../configuration';\n\nconst log = Logger.scope('TypingIndicator');\n\nexport interface TypingIndicatorServices {\n  transport: Transport;\n  notificationClient: Notifications;\n}\n\n/**\n * An important note in regards to typing timeout timers. There are two places that the SDK can get the \"typing_timeout\" attribute from. The first\n * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the\n * \"typing_timeout\" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a\n * notification of type \"twilio.ipmsg.typing_indicator\". In this case, the \"typing_timeout\" value will be +1 of that in the console. This\n * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,\n * the timeout returned from the notification should be used as the timeout for the \"typingEnded\" event, +1 is to account for latency.\n *\n * @private\n */\n\n/**\n * @class TypingIndicator\n *\n * @constructor\n * @private\n */\nclass TypingIndicator {\n  private sentUpdates: Map<string, number>;\n  private serviceTypingTimeout;\n\n  constructor(\n    private readonly getChannel,\n    private readonly configuration: Configuration,\n    private readonly services: TypingIndicatorServices\n  ) {\n    this.serviceTypingTimeout = null;\n    this.sentUpdates = new Map();\n  }\n\n  public get typingTimeout(): number {\n    return this.configuration.typingIndicatorTimeoutOverride\n      || this.serviceTypingTimeout\n      || this.configuration.typingIndicatorTimeoutDefault;\n  }\n\n  /**\n   * Initialize TypingIndicator controller\n   * Registers for needed message types and sets listeners\n   * @private\n   */\n  initialize(): void {\n    this.services.notificationClient.on('message', (type, message) => {\n      if (type === NotificationTypes.TYPING_INDICATOR) {\n        this._handleRemoteTyping(message);\n      }\n    });\n  }\n\n  /**\n   * Remote members typing events handler\n   * @private\n   */\n  private async _handleRemoteTyping(message) {\n    log.trace('Got new typing indicator ', message);\n\n    this.getChannel(message.channel_sid)\n      .then(channel => {\n        if (!channel) {\n          return;\n        }\n\n        channel.members.forEach(member => {\n          if (member.identity !== message.identity) {\n            return;\n          }\n\n          const timeout = this.configuration.typingIndicatorTimeoutOverride + 1000 || message.typing_timeout * 1000;\n          member._startTyping(timeout);\n        });\n      })\n      .catch(err => {\n        log.error(err);\n        throw err;\n      });\n  }\n\n  /**\n   * Send typing event for the given channel sid\n   * @param {String} channelSid\n   */\n  public async send(channelSid: string) {\n    const lastUpdate = this.sentUpdates.get(channelSid);\n    if (lastUpdate && lastUpdate > (Date.now() - this.typingTimeout)) {\n      return Promise.resolve();\n    }\n\n    this.sentUpdates.set(channelSid, Date.now());\n    return this._send(channelSid);\n  }\n\n  private async _send(channelSid: string) {\n    log.trace('Sending typing indicator');\n\n    const url = this.configuration.links.typing;\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    };\n    const body = 'ChannelSid=' + channelSid;\n\n    return this.services.transport.post<{ typing_timeout: number }>(url, headers, body, this.configuration.productId)\n      .then(response => {\n        if (response.body.hasOwnProperty('typing_timeout')) {\n          this.serviceTypingTimeout = response.body.typing_timeout * 1000;\n        }\n      }).catch(err => {\n        log.error('Failed to send typing indicator:', err);\n        throw err;\n      });\n  }\n}\n\nexport { TypingIndicator };\n","import { UriBuilder } from '../util/index';\nimport { RestPaginator } from '../restpaginator';\nimport { ChannelDescriptor } from '../channeldescriptor';\nimport { Network } from '../services/network';\nimport { Client } from '../client';\n\nexport interface UserChannelServices {\n  network: Network;\n}\n\n/**\n * Users channels collection\n * It's a cassandra-backed pull-based collection\n */\nclass UserChannels {\n  private client: Client;\n  private services: UserChannelServices;\n  private url: string;\n\n  constructor(client: Client, services: UserChannelServices, url: string) {\n    this.client = client;\n    this.services = services;\n    this.url = url;\n  }\n\n  public async getChannels(args: any = {}): Promise<RestPaginator<ChannelDescriptor>> {\n    const url = new UriBuilder(this.url).arg('PageToken', args.pageToken).build();\n    let response = await this.services.network.get(url);\n    return new RestPaginator<ChannelDescriptor>(response.body.conversations.map(x => new ChannelDescriptor(this.client, x))\n      , pageToken => this.getChannels({ pageToken })\n      , response.body.meta.previous_token\n      , response.body.meta.next_token);\n  }\n}\n\nexport { UserChannels };\n","/**\n * Push notification type.\n */\ntype PushNotificationType =\n  | 'twilio.channel.new_message'\n  | 'twilio.channel.added_to_channel'\n  | 'twilio.channel.invited_to_channel'\n  | 'twilio.channel.removed_from_channel';\n\ninterface PushNotificationDescriptor {\n  title: string;\n  body: string;\n  sound: string;\n  badge: number;\n  action: string;\n  type: PushNotificationType;\n  data: Object;\n}\n\n/**\n * Additional data for a given push notification.\n */\ninterface PushNotificationData {\n  /**\n   * SID of the conversation.\n   */\n  conversationSid?: string;\n\n  /**\n   * Index of the message in the conversation.\n   */\n  messageIndex?: number;\n\n  /**\n   * SID of the message in the conversation.s\n   */\n  messageSid?: string;\n}\n\n/**\n * Push notification for a Conversations client.\n */\nclass PushNotification {\n  /**\n   * Title of the notification.\n   */\n  public readonly title: string;\n\n  /**\n   * Text of the notification.\n   */\n  public readonly body: string;\n\n  /**\n   * Sound of the notification.\n   */\n  public readonly sound: string;\n\n  /**\n   * Number of the badge.\n   */\n  public readonly badge: number;\n\n  /**\n   * Notification action (`click_action` in FCM/GCM terms and `category` in APN terms).\n   */\n  public readonly action: string;\n\n  /**\n   * Type of the notification.\n   */\n  public readonly type: PushNotificationType;\n\n  /**\n   * Additional data of the conversation.\n   */\n  public readonly data: PushNotificationData;\n\n  /**\n   * @internal\n   */\n  constructor(data: PushNotificationDescriptor) {\n    this.title = data.title || null;\n    this.body = data.body || null;\n    this.sound = data.sound || null;\n    this.badge = data.badge || null;\n    this.action = data.action || null;\n    this.type = data.type || null;\n    this.data = data.data || {};\n  }\n}\n\nexport {\n  PushNotification,\n  PushNotificationType,\n  PushNotificationDescriptor,\n  PushNotificationData\n};\n","import { TransportResult as Result, Transport } from 'twilsock';\nimport { MutationConflictResponse } from './interfaces/commands/mutationconflict';\nimport { v4 as uuidv4 } from 'uuid';\nimport { AsyncRetrier } from '@twilio/operation-retrier';\n\nexport interface CommandExecutorServices {\n  transport: Transport;\n}\n\nconst trimSlashes = (url: string): string =>\n  url.replace(/(^\\/+|\\/+$)/g, '');\n\nconst isMutationConflictResponse = (response: Result<unknown>): response is Result<MutationConflictResponse> =>\n  response.status.code === 202;\n\nclass CommandExecutor {\n  constructor(\n    private _serviceUrl: string,\n    private _services: CommandExecutorServices,\n    private _productId?: string\n  ) {}\n\n  private _preProcessUrl(url: string): string {\n    const trimmedUrl = trimSlashes(url);\n\n    if (/^https?:\\/\\//.test(url)) {\n      return trimmedUrl;\n    }\n\n    return `${trimSlashes(this._serviceUrl)}/${trimmedUrl}`;\n  }\n\n  private async _makeRequest<REQ = void, RESP = void>(\n    method: 'get' | 'post' | 'delete',\n    url: string,\n    requestBody?: REQ,\n    headers?: Record<string, string>\n  ): Promise<Result<RESP>> {\n    const preProcessedUrl = this._preProcessUrl(url);\n    const finalHeaders = {\n      'Content-Type': 'application/json; charset=utf-8',\n      ...(headers || {})\n    };\n    let response: Result<RESP>;\n\n    switch (method) {\n      case 'get':\n        let getUrl = preProcessedUrl;\n\n        if (requestBody) {\n          getUrl +=\n            '?' +\n            Object.entries(requestBody)\n              .map((entry) => entry.map(encodeURIComponent).join('='))\n              .join('&');\n        }\n\n        response = await this._services.transport.get(getUrl, finalHeaders, this._productId);\n        break;\n      case 'post':\n        response = await this._services.transport.post(preProcessedUrl, finalHeaders, JSON.stringify(requestBody), this._productId);\n        break;\n      case 'delete':\n        response = await this._services.transport.delete(preProcessedUrl, finalHeaders, null, this._productId);\n        break;\n    }\n\n    if (response.status.code < 200 || response.status.code >= 300) {\n      throw new Error(`Request responded with a non-success code ${response.status.code}`);\n    }\n\n    return response;\n  }\n\n  public async fetchResource<REQ = void, RESP = void>(\n    url: string,\n    requestBody?: REQ\n  ): Promise<RESP> {\n    const maxAttemptsCount = 6;\n    let result: Result<RESP>;\n\n    try {\n      result = await new AsyncRetrier({ min: 50, max: 1600, maxAttemptsCount })\n        .run(() => this._makeRequest<REQ, RESP>('get', url, requestBody));\n    } catch {\n      throw new Error(`Fetch resource from \"${url}\" failed.`);\n    }\n\n    return result.body;\n  }\n\n  public async mutateResource<REQ = void, RESP = void>(\n    method: 'post' | 'delete',\n    url: string,\n    requestBody?: REQ\n  ): Promise<RESP> {\n    const result = await this._makeRequest<REQ, RESP>(method, url, requestBody, {\n      'X-Twilio-Mutation-Id': uuidv4()\n    });\n\n    if (isMutationConflictResponse(result)) {\n      return await this.fetchResource<undefined, RESP>(result.body.resource_url);\n    }\n\n    return result.body;\n  }\n}\n\nexport { CommandExecutor };\n","import { Logger } from './logger';\nimport { Configuration } from './configuration';\n\nimport { UserUpdatedEventArgs, User, UserUpdateReason } from './user';\nimport { PublicChannels } from './data/publicchannels';\nimport { Network } from './services/network';\n\nimport { NotificationTypes } from './interfaces/notificationtypes';\n\nimport { Notifications as NotificationClient, ChannelType } from '@twilio/notifications';\nimport { TwilsockClient, InitRegistration, ConnectionState as TwilsockConnectionState, Transport } from 'twilsock';\nimport { SyncClient } from 'twilio-sync';\nimport { McsClient } from '@twilio/mcs-client';\n\nimport { Channels as ChannelsEntity, Channel } from './data/channels';\n\nimport { Users } from './data/users';\nimport { TypingIndicator } from './services/typingindicator';\nimport { UserDescriptor } from './userdescriptor';\nimport { UserChannels } from './data/userchannels';\nimport { ChannelDescriptor } from './channeldescriptor';\nimport { Paginator } from './interfaces/paginator';\nimport { PushNotification } from './pushnotification';\nimport { parseToNumber, deepClone } from './util';\nimport { Member, MemberUpdatedEventArgs, MemberUpdateReason } from './member';\nimport { Message, MessageUpdatedEventArgs, MessageUpdateReason } from './message';\nimport {\n  validateTypesAsync,\n  validateTypes,\n  literal,\n  nonEmptyString,\n  pureObject,\n  objectSchema,\n  validateConstructorTypes,\n  type,\n} from '@twilio/declarative-type-validator';\nimport { CommandExecutor } from './commandexecutor';\nimport { ConfigurationResponse } from './interfaces/commands/configuration';\nimport { version } from '../package.json';\nimport { ChannelUpdatedEventArgs, ChannelUpdateReason } from './channel';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\nconst log = Logger.scope('Client');\nconst SDK_VERSION = version;\n\nclass ClientServices {\n  commandExecutor: CommandExecutor;\n  twilsockClient: TwilsockClient;\n  users: Users;\n  notificationClient: NotificationClient;\n  publicChannels: PublicChannels;\n  userChannels: UserChannels;\n  network: Network;\n  typingIndicator: TypingIndicator;\n  syncClient: SyncClient;\n  mcsClient: McsClient;\n  transport: Transport;\n}\n\ntype ClientEvents = {\n  channelAdded: (channel: Channel) => void;\n  channelInvited: (channel: Channel) => void;\n  channelJoined: (channel: Channel) => void;\n  channelLeft: (channel: Channel) => void;\n  channelRemoved: (channel: Channel) => void;\n  channelUpdated: (data: {\n    channel: Channel;\n    updateReasons: ChannelUpdateReason[];\n  }) => void;\n  memberJoined: (member: Member) => void;\n  memberLeft: (member: Member) => void;\n  memberUpdated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  tokenAboutToExpire: (ttl: number) => void;\n  tokenExpired: () => void;\n  typingEnded: (member: Member) => void;\n  typingStarted: (member: Member) => void;\n  pushNotification: (pushNotification: PushNotification) => void;\n  userSubscribed: (user: User) => void;\n  userUnsubscribed: (user: User) => void;\n  userUpdated: (data: {\n    user: User;\n    updateReasons: UserUpdateReason[];\n  }) => void;\n  stateChanged: (state: State) => void;\n  connectionStateChanged: (state: TwilsockConnectionState) => void;\n  connectionError: (data: {\n    terminal: boolean;\n    message: string;\n    httpStatusCode?: number;\n    errorCode?: number;\n  }) => void;\n};\n\n/**\n * Connection state of the client. Possible values are as follows:\n * * `'connecting'` - client is offline and connection attempt is in process\n * * `'connected'` - client is online and ready\n * * `'disconnecting'` - client is going offline as disconnection is in process\n * * `'disconnected'` - client is offline and no connection attempt is in process\n * * `'denied'` - client connection is denied because of invalid JWT access token. User must\n * refresh token in order to proceed\n */\ntype ConnectionState = TwilsockConnectionState;\n\n/**\n * State of the client. Possible values are as follows:\n * * `'failed'` - the client failed to initialize\n * * `'initialized'` - the client successfully initialized\n */\ntype State = 'failed' | 'initialized';\n\n/**\n * Notifications channel type. Possible values are as follows:\n * * `'fcm'`\n * * `'apn'`\n */\ntype NotificationsChannelType = ChannelType;\n\ntype LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'silent' | null;\n\n/**\n * Chat client options.\n */\ninterface ClientOptions {\n  region?: string;\n\n  /**\n   * The level of logging to enable.\n   */\n  logLevel?: LogLevel;\n  productId?: string;\n  twilsockClient?: TwilsockClient;\n  transport?: Transport;\n  notificationsClient?: NotificationClient;\n  syncClient?: SyncClient;\n  typingIndicatorTimeoutOverride?: number;\n  consumptionReportIntervalOverride?: string;\n  httpCacheIntervalOverride?: number;\n  userInfosToSubscribeOverride?: number;\n  retryWhenThrottledOverride?: boolean;\n  backoffConfigOverride?: any;\n  Chat?: any;\n  IPMessaging?: any;\n  Sync?: any;\n  Notification?: any;\n  Twilsock?: any;\n  clientMetadata?: any;\n  disableDeepClone?: boolean;\n  initRegistrations?: InitRegistration[];\n}\n\n/**\n * Options for {@link Client.createChannel}.\n */\ninterface CreateChannelOptions {\n  /**\n   * Any custom attributes to attach to the channel.\n   */\n  attributes?: any;\n\n  /**\n   * A non-unique display name of the channel.\n   */\n  friendlyName?: string;\n\n  /**\n   * Signifies whether the channel is private.\n   */\n  isPrivate?: boolean;\n\n  /**\n   * A unique identifier of the channel.\n   */\n  uniqueName?: string;\n}\n\n/**\n * Channel sorting criteria.\n */\ntype ChannelSortingCriteria = 'lastMessage' | 'friendlyName' | 'uniqueName';\n\n/**\n * Channel sorting order.\n */\ntype ChannelSortingOrder = 'ascending' | 'descending';\n\n/**\n * Channel sorting options.\n */\ninterface ChannelSortingOptions {\n  /**\n   * Channel sorting criteria.\n   */\n  criteria?: ChannelSortingCriteria;\n\n  /**\n   * Channel sorting order.\n   */\n  order?: ChannelSortingOrder;\n}\n\n/**\n * A client is the starting point to the Twilio Programmable Chat functionality.\n */\n@validateConstructorTypes(nonEmptyString, [\n  pureObject,\n  'undefined',\n  literal(null),\n])\nclass Client extends ReplayEventEmitter<ClientEvents> {\n  /**\n   * Client connection state.\n   */\n  public connectionState: ConnectionState = 'unknown'; // @todo make private?\n  private _ensureReady: Promise<any> = null;\n  private _resolveEnsureReady: (value?: any) => void = null;\n  private _rejectEnsureReady: (err: Error) => void  = null;\n  private channelsPromise: Promise<ChannelsEntity> = null;\n  private configurationPromise: Promise<ConfigurationResponse> | null = null;\n  private configuration: Configuration;\n  private channels: ChannelsEntity;\n  private readonly services: ClientServices;\n  private readonly _myself: User;\n\n  /**\n   * Current version of the Chat client.\n   */\n  public static readonly version = SDK_VERSION;\n\n  /**\n   * Current version of the Chat client.\n   */\n  public readonly version = SDK_VERSION;\n\n  private static readonly supportedPushChannels: NotificationsChannelType[] = ['fcm', 'apn'];\n  private static readonly supportedPushDataFields = {\n    'channel_sid': 'channelSid',\n    'message_sid': 'messageSid',\n    'message_index': 'messageIndex'\n  };\n\n  /**\n   * Returned client instance is not yet fully initialized. Calling any operations will block until it is.\n   * Use connection events to monitor when client becomes fully available (connectionStateChanged with state\n   * 'connected') or not available (connectionStateChange with state 'denied', event tokenExpired, event connectionError).\n   *\n   * @param fpaToken Access token\n   * @param options Options to customize the Client\n   * @returns A not yet fully-initialized client.\n   */\n  public constructor(\n    private fpaToken: string,\n    private readonly options: ClientOptions = {}\n  ) {\n    super();\n\n    this.options = this.options ?? {};\n\n    if (!this.options.disableDeepClone) {\n      let options = {\n        ...this.options,\n        transport: undefined,\n        twilsockClient: undefined\n      };\n\n      options = deepClone(options);\n      options.transport = this.options.transport;\n      options.twilsockClient = this.options.twilsockClient;\n\n      this.options = options;\n    }\n\n    this.options.logLevel = this.options.logLevel ?? 'silent';\n    log.setLevel(this.options.logLevel);\n\n    const productId = this.options.productId = 'ip_messaging';\n\n    // Fill ClientMetadata\n    this.options.clientMetadata = this.options.clientMetadata ?? {};\n\n    if (!this.options.clientMetadata.hasOwnProperty('type')) {\n      this.options.clientMetadata.type = 'chat';\n    }\n\n    if (!this.options.clientMetadata.hasOwnProperty('sdk')) {\n      this.options.clientMetadata.sdk = 'JS';\n      this.options.clientMetadata.sdkv = SDK_VERSION;\n    }\n\n    // Enable session local storage for Sync\n    this.options.Sync = this.options.Sync ?? {};\n\n    if (!this.options.Sync?.enableSessionStorage) {\n      this.options.Sync.enableSessionStorage = true;\n    }\n\n    if (this.options.region) {\n      this.options.Sync.region = this.options.region;\n    }\n\n    this.services = new ClientServices();\n\n    const startTwilsock = !this.options.twilsockClient;\n\n    // Create default init registrations if none were provided.\n    // Otherwise, the outside party have to list all the init registrations they need, including Sync ones.\n    if (!this.options.initRegistrations) {\n      const initRegistration = new InitRegistration(productId);\n      Client.populateInitRegistrations(initRegistration);\n      SyncClient.populateInitRegistrations(initRegistration);\n      this.options.initRegistrations = [initRegistration];\n    }\n\n    this.services.twilsockClient = (this.options.twilsockClient = this.options.twilsockClient\n      ?? new TwilsockClient(fpaToken, productId, this.options));\n\n    this.services.twilsockClient.on('tokenAboutToExpire', (ttl) => this.emit('tokenAboutToExpire', ttl));\n    this.services.twilsockClient.on('tokenExpired', () => this.emit('tokenExpired'));\n    this.services.twilsockClient.on('connectionError', (error) => this.emit('connectionError', error));\n    this.services.twilsockClient.on('stateChanged', (state: ConnectionState) => {\n      log.debug(`Handling stateChanged for ChatClient: new state ${state}`);\n      if (state !== this.connectionState) {\n        this.connectionState = state;\n        this.emit('connectionStateChanged', this.connectionState);\n      }\n    });\n\n    this.services.transport = (this.options.transport = (this.options.transport ?? this.options.twilsockClient) as Transport);\n    this.services.notificationClient = (this.options.notificationsClient = this.options.notificationsClient\n      ?? new NotificationClient(fpaToken, this.options));\n    this.services.syncClient = (this.options.syncClient = this.options.syncClient\n      ?? new SyncClient(fpaToken, this.options));\n\n    const configurationOptions = this.options?.Chat ?? this.options?.IPMessaging ?? this.options ?? {};\n    const region = configurationOptions.region ?? this.options.region;\n    const baseUrl = configurationOptions.apiUri\n      ?? configurationOptions.typingUri\n      ?? `https://aim.${region || 'us1'}.twilio.com`;\n\n    this.services.commandExecutor = new CommandExecutor(baseUrl, { transport: this.options.transport }, productId);\n\n    const emitFailed = (err): void => {\n      this._rejectEnsureReady(err);\n      this.emit('stateChanged', 'failed');\n    };\n\n    this.services.twilsockClient.once('connectionError', emitFailed);\n    this.services.twilsockClient.once('disconnected', emitFailed);\n\n    // ChatClient will be able to initialize only after twilsock is connected\n    this.services.twilsockClient.once('connected', async () => {\n      log.debug(`ChatClient started INITIALIZING`);\n      this.services.twilsockClient.off('connectionError', emitFailed);\n      this.services.twilsockClient.off('disconnected', emitFailed);\n      try {\n        await this._initialize();\n      } catch (err) {\n        // Fail ChatClient if initialization is incomplete\n        this._rejectEnsureReady(err);\n        this.emit('stateChanged', 'failed');\n      }\n    });\n\n    this._ensureReady = new Promise((resolve, reject) => {\n      this._resolveEnsureReady = resolve;\n      this._rejectEnsureReady = reject;\n    }).catch((err) => {}); // @todo How to process unhandled rejection here?\n\n    this._myself = new User(\n      '',\n      '',\n      null,\n      this.services\n    );\n\n    if (startTwilsock) {\n      this.services.twilsockClient.connect();\n    }\n  }\n\n  /**\n   * Fired when a channel becomes visible to the client. The event is also triggered when the client creates a new channel.\n   * Fired for all channels client has joined.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelAdded = 'channelAdded';\n\n  /**\n   * Fired when the client gets invited to a channel.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelInvited = 'channelInvited';\n\n  /**\n   * Fired when the client joins a channel.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelJoined = 'channelJoined';\n\n  /**\n   * Fired when the client leaves a channel.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelLeft = 'channelLeft';\n\n  /**\n   * Fired when a channel is no longer visible to the client.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelRemoved = 'channelRemoved';\n\n  /**\n   * Fired when the attributes or the metadata of a channel have been updated.\n   * During channel's {@link Client.constructor| creation and initialization}, this event might be fired multiple times\n   * for same joined or created channel as new data is arriving from different sources.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Channel} `channel` - the channel in question\n   *     * {@link ChannelUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  static readonly channelUpdated = 'channelUpdated';\n\n  /**\n   * Fired when a member has joined a channel.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly memberJoined = 'memberJoined';\n\n  /**\n   * Fired when a member has left a channel.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly memberLeft = 'memberLeft';\n\n  /**\n   * Fired when a member's fields have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Member} `member` - the member in question\n   *     * {@link MemberUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  static readonly memberUpdated = 'memberUpdated';\n\n  /**\n   * Fired when a new message has been added to the channel on the server.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - the message in question\n   * @event\n   */\n  static readonly messageAdded = 'messageAdded';\n\n  /**\n   * Fired when a message is removed from the message list of a channel.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - the message in question\n   * @event\n   */\n  static readonly messageRemoved = 'messageRemoved';\n\n  /**\n   * Fired when the fields of an existing message are updated with new values.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} `message` - the message in question\n   *     * {@link MessageUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  static readonly messageUpdated = 'messageUpdated';\n\n  /**\n   * Fired when the token is about to expire and needs to be updated.\n   *\n   * * Parameters:\n   * 1. number `ttl` - token's time to live\n   * @event\n   */\n  static readonly tokenAboutToExpire = 'tokenAboutToExpire';\n\n  /**\n   * Fired when the token has expired.\n   * @event\n   */\n  static readonly tokenExpired = 'tokenExpired';\n\n  /**\n   * Fired when a member has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly typingEnded = 'typingEnded';\n\n  /**\n   * Fired when a member has started typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly typingStarted = 'typingStarted';\n\n  /**\n   * Fired when the client has received (and parsed) a push notification via one of the push channels (apn or fcm).\n   *\n   * Parameters:\n   * 1. {@link PushNotification} `pushNotification` - the push notification in question\n   * @event\n   */\n  static readonly pushNotification = 'pushNotification';\n\n  /**\n   * Fired when the client has subscribed to a user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  static readonly userSubscribed = 'userSubscribed';\n\n  /**\n   * Fired when the client has unsubscribed from a user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  static readonly userUnsubscribed = 'userUnsubscribed';\n\n  /**\n   * Fired when the properties or the reachability status of a user have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link User} `user` - the user in question\n   *     * {@link UserUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  static readonly userUpdated = 'userUpdated';\n\n  /**\n   * Fired when the connection is interrupted for an unexpected reason.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * boolean `terminal` - Twilsock will stop connection attempts if true\n   *     * string `message` - the error message of the root cause\n   *     * number? `httpStatusCode` - http status code if available\n   *     * number? `errorCode` - Twilio public error code if available\n   * @event\n   */\n  static readonly connectionError = 'connectionError';\n\n  /**\n   * Fired when the state of the client has been changed.\n   *\n   * Parameters:\n   * 1. {@link State} `state` - the new client state\n   * @event\n   */\n  static readonly stateChanged = 'stateChanged';\n\n  /**\n   * Fired when the connection state of the client has been changed.\n   *\n   * Parameters:\n   * 1. {@link ConnectionState} `connectionState` - the updated connection state\n   * @event\n   */\n  static readonly connectionStateChanged = 'connectionStateChanged';\n\n  /**\n   * @deprecated Call constructor directly.\n   *\n   * Factory method to create Chat client instance.\n   *\n   * The factory method will automatically trigger connection.\n   * Do not use it if you need finer-grained control.\n   *\n   * @param token Access token.\n   * @param options Options to customize the client.\n   * @returns Returns a fully initialized client.\n   */\n  public static async create(token: string, options?: ClientOptions): Promise<Client> {\n    // The logic is as follows:\n    // - If twilsock is not passed in, then the ChatClient constructor will call twilsock.connect() by itself\n    //   and we do not need to do it here.\n    // - If twilsock was passed in from the outside, but customer called ChatClient.create() then they are\n    //   using an obsolete workflow and the startup sequence will never complete.\n    if (options?.twilsockClient) {\n      throw new Error('Obsolete usage of ChatClient.create() factory method: if you pass twilsock from the outside then you must use ChatClient constructor and be prepared to work with uninitialized client.');\n    }\n\n    const client = new Client(token, options);\n    await client._ensureReady;\n\n    return client;\n  }\n\n  /**\n   * Information of the logged-in user. Before client initialization, returns an\n   * uninitialized user. Will trigger a {@link Client.userUpdated} event after\n   * initialization.\n   */\n  public get user(): User { return this._myself; }\n\n  /**\n   * Client reachability state. Throws if accessed before the client\n   * initialization was completed.\n   */\n  public get reachabilityEnabled(): boolean {\n    if (!this.configuration) {\n      throw new Error(\n        'Reachability information could not yet be accessed as the client ' +\n        \"has not yet been initialized. Subscribe to the 'stateChanged' event \" +\n        'to properly react to the client initialization.'\n      );\n    }\n\n    return this.configuration.reachabilityEnabled;\n  }\n\n  public get token(): string { return this.fpaToken; }\n\n  public static populateInitRegistrations(reg: InitRegistration) {\n    reg.populateInitRegistrations([NotificationTypes.TYPING_INDICATOR]);\n  }\n\n  private _subscribeToPushNotifications(channelType: NotificationsChannelType): void {\n    [NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CHANNEL,\n      NotificationTypes.INVITED_TO_CHANNEL,\n      NotificationTypes.REMOVED_FROM_CHANNEL,\n      NotificationTypes.CONSUMPTION_UPDATE] // Supported only on iOS\n      .forEach(messageType => {\n        this.services.notificationClient.subscribe(channelType, messageType);\n      });\n  }\n\n  private _unsubscribeFromPushNotifications(channelType: NotificationsChannelType): void {\n    [NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CHANNEL,\n      NotificationTypes.INVITED_TO_CHANNEL,\n      NotificationTypes.REMOVED_FROM_CHANNEL,\n      NotificationTypes.CONSUMPTION_UPDATE] // Supported only on iOS\n      .forEach(messageType => {\n        this.services.notificationClient.unsubscribe(channelType, messageType);\n      });\n  }\n\n  private async _initialize() {\n    const configurationResponse = await this.services.commandExecutor.fetchResource<void, ConfigurationResponse>(\n      'Client/v1/Configuration'\n    );\n\n    this.configuration = new Configuration(this.options, configurationResponse, log);\n\n    this._myself._resolveInitialization(\n      this.configuration,\n      this.configuration.userIdentity,\n      this.configuration.userInfo,\n      true\n    );\n\n    this.services.typingIndicator = new TypingIndicator(this.getChannelBySid.bind(this), this.configuration, this.services);\n    this.services.network = new Network(this.configuration, this.services);\n\n    this.services.users = new Users(this._myself, this.configuration, this.services);\n    this.services.users.on('userSubscribed', this.emit.bind(this, 'userSubscribed'));\n    this.services.users.on('userUpdated', (args: UserUpdatedEventArgs) => this.emit('userUpdated', args));\n    this.services.users.on('userUnsubscribed', this.emit.bind(this, 'userUnsubscribed'));\n\n    this.channels = new ChannelsEntity(this.configuration, this.services);\n    this.channels.on('channelAdded', this.emit.bind(this, 'channelAdded'));\n    this.channels.on('channelInvited', this.emit.bind(this, 'channelInvited'));\n    this.channels.on('channelRemoved', this.emit.bind(this, 'channelRemoved'));\n    this.channels.on('channelJoined', this.emit.bind(this, 'channelJoined'));\n    this.channels.on('channelLeft', this.emit.bind(this, 'channelLeft'));\n    this.channels.on('channelUpdated',\n      (args: ChannelUpdatedEventArgs) => this.emit('channelUpdated', args));\n\n    this.channels.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n    this.channels.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n    this.channels.on('memberUpdated',\n      (args: MemberUpdatedEventArgs) => this.emit('memberUpdated', args));\n\n    this.channels.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n    this.channels.on('messageUpdated',\n      (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n    this.channels.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n\n    this.channels.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n    this.channels.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n\n    this.channelsPromise = this.channels.fetchChannels()\n      .then(() => this.channels)\n      .catch((err) => { throw err; });\n\n    await this.services.users.myself._ensureFetched();\n\n    Client.supportedPushChannels.forEach(channelType => this._subscribeToPushNotifications(channelType));\n    this.services.typingIndicator.initialize();\n\n    this.services.publicChannels = new PublicChannels(this, this.services, this.configuration.links.conversations);\n    this.services.userChannels = new UserChannels(this, this.services, this.configuration.links.myConversations);\n\n    this.services.mcsClient = new McsClient(this.fpaToken, this.configuration.links.mediaService, null, {\n      ...this.options,\n      transport: null,\n    });\n\n    this._resolveEnsureReady();\n    this.emit('stateChanged', 'initialized');\n  }\n\n  /**\n   * Gracefully shut down the client.\n   */\n  public async shutdown(): Promise<void> {\n    await this._ensureReady;\n    await this.services.syncClient.shutdown(); // also disconnects twilsock\n  }\n\n  /**\n   * Update the token used by the client and re-register with the Programmable Chat services.\n   * @param token New access token.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async updateToken(token: string): Promise<Client> {\n    await this._ensureReady;\n    log.info('updateToken');\n\n    if (this.fpaToken === token) {\n      return this;\n    }\n\n    await this.services.twilsockClient.updateToken(token);\n    this.fpaToken = token;\n    this.services.mcsClient.updateToken(token);\n    await this.configurationPromise;\n\n    return this;\n  }\n\n  /**\n   * Get a known channel by its SID.\n   * @param channelSid Channel sid\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getChannelBySid(channelSid: string): Promise<Channel> {\n    await this._ensureReady;\n    await this.channels.myChannelsRead.promise;\n    let channel: Channel | ChannelDescriptor = await this.channels.getChannel(channelSid);\n    if (!channel) {\n      channel = await this.services.publicChannels.getChannelBySid(channelSid);\n    }\n    return await this.channels.pushChannel(channel);\n  }\n\n  /**\n   * Get a known channel by its unique identifier name.\n   * @param uniqueName The unique identifier name of the channel.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getChannelByUniqueName(uniqueName: string): Promise<Channel> {\n    await this._ensureReady;\n    await this.channels.myChannelsRead.promise;\n    const channel = await this.services.publicChannels.getChannelByUniqueName(uniqueName);\n    return await this.channels.pushChannel(channel);\n  }\n\n  /**\n   * Get the current list of all the subscribed channels.\n   */\n  public async getSubscribedChannels(args?): Promise<Paginator<Channel>> {\n    await this._ensureReady;\n    const channelsEntity = await this.channelsPromise;\n    return await channelsEntity.getChannels(args);\n  }\n\n  /**\n   * Get an array of channels that are locally known to the client in the provided sorting order.\n   * Locally known channels are the ones that are created and/or joined during the client runtime\n   * and all the subscribed channel of the currently-logged-in user.\n   * To ensure that the full list of the subscribed channels has fetched, call the\n   * {@link Client.getSubscribedChannels} method\n   * and fetch all the pages with the help of the {@link RestPaginator.nextPage} method.\n   * @param sortingOptions Sorting options.\n   */\n  @validateTypesAsync([\n    'undefined',\n    objectSchema('sorting options', {\n      criteria: [literal('lastMessage', 'friendlyName', 'uniqueName'), 'undefined'],\n      order: [literal('ascending', 'descending'), 'undefined']\n    })\n  ])\n  public async getLocalChannels(sortingOptions?: ChannelSortingOptions): Promise<Array<Channel>> {\n    await this._ensureReady;\n    const channelsEntity = await this.channelsPromise;\n    let result: Channel[] = Array.from(channelsEntity.channels.values());\n    const sortingOrder = sortingOptions?.order || 'ascending';\n\n    if (sortingOptions?.criteria) {\n      if (sortingOptions.criteria === 'lastMessage') {\n        result.sort((a: Channel, b: Channel) =>\n          Client.compareChannelsByLastMessage(a, b, sortingOrder));\n      } else if (sortingOptions.criteria === 'uniqueName') {\n        result.sort((a: Channel, b: Channel) =>\n          Client.compareChannelsByStringProperty(a.uniqueName, b.uniqueName, sortingOrder));\n      } else if (sortingOptions.criteria === 'friendlyName') {\n        result.sort((a: Channel, b: Channel) =>\n          Client.compareChannelsByStringProperty(a.friendlyName, b.friendlyName, sortingOrder));\n      }\n    }\n\n    return result;\n  }\n\n  private static compareChannelsByLastMessage(a: Channel, b: Channel, order: ChannelSortingOrder) {\n    const lessThan = (a: Channel, b: Channel): number => {\n      if (a.lastMessage?.dateCreated?.getTime() > b.lastMessage?.dateCreated?.getTime()) {\n        // console.log('A time > B time');\n        return 1;\n      } else if (a.lastMessage?.dateCreated?.getTime() < b.lastMessage?.dateCreated?.getTime()) {\n        // console.log('A time < B time');\n        return -1;\n      }\n\n      if (b.lastMessage?.dateCreated) {\n        // console.log('B has time');\n        return 1;\n      } else if (a.lastMessage?.dateCreated) {\n        // console.log('A has time');\n        return -1;\n      }\n\n      if (b.lastMessage) {\n        // console.log('B has lastmessage');\n        return 1;\n      } else if (a.lastMessage) {\n        // console.log('A has lastmessage');\n        return -1;\n      }\n\n      return 0;\n    };\n    const result = lessThan(a, b);\n    console.log(`Sorted ${a.sid} and ${b.sid}: return ${result}`);\n    return (order === 'ascending') ? result : -result;\n  }\n\n  private static compareChannelsByStringProperty(str1: string, str2: string, order: ChannelSortingOrder) {\n    const lessThan = (a: string, b: string): number => {\n      if (a && b) {\n        return str1.localeCompare(str2);\n      } else if (b) {\n        return 1;\n      } else if (a) {\n        return -1;\n      }\n\n      return 0;\n    };\n    const result = lessThan(str1, str2);\n    return (order === 'ascending') ? result : -result;\n  }\n\n  /**\n   * Get the content of the public channels directory.\n   */\n  public async getPublicChannelDescriptors(): Promise<Paginator<ChannelDescriptor>> {\n    await this._ensureReady;\n    return await this.services.publicChannels.getChannels();\n  }\n\n  /**\n   * Get the content of the channels directory of the user (created by, joined or invited to).\n   */\n  public async getUserChannelDescriptors(): Promise<Paginator<ChannelDescriptor>> {\n    await this._ensureReady;\n    return await this.services.userChannels.getChannels();\n  }\n\n  /**\n   * Create a channel on the server and subscribe to its events.\n   * The default is a public channel with an empty friendly name.\n   * @param options Options for the channel.\n   */\n  @validateTypesAsync([\n    'undefined',\n    objectSchema('channel options', {\n      friendlyName: ['string', 'undefined'],\n      isPrivate: ['boolean', 'undefined'],\n      uniqueName: ['string', 'undefined']\n    })\n  ])\n  public async createChannel(options?: CreateChannelOptions): Promise<Channel> {\n    await this._ensureReady;\n    options = options || {};\n    const channelsEntity = await this.channelsPromise;\n    return await channelsEntity.addChannel(options);\n  }\n\n  /**\n   * Register for push notifications.\n   * @param channelType Channel type.\n   * @param registrationId Push notification ID provided by the platform.\n   */\n  @validateTypesAsync(literal('fcm', 'apn'), 'string')\n  public async setPushRegistrationId(channelType: NotificationsChannelType, registrationId: string): Promise<void> {\n    await this._ensureReady;\n    this.services.notificationClient.setPushRegistrationId(channelType, registrationId);\n    await this.services.notificationClient.commitChanges(); // Committing before this point is useless because we have no push id\n  }\n\n  /**\n   * Unregister from push notifications.\n   * @param channelType Channel type.\n   */\n  @validateTypesAsync(literal('fcm', 'apn'))\n  public async unsetPushRegistrationId(channelType: NotificationsChannelType): Promise<void> {\n    await this._ensureReady;\n    // await this.services.notificationClient.removeRegistrations(..) // @todo\n    // old version:\n    this._unsubscribeFromPushNotifications(channelType);\n    await this.services.notificationClient.commitChanges();\n  }\n\n  private static parsePushNotificationChatData(data: Object): Object {\n    let result: Object = {};\n    for (let key in Client.supportedPushDataFields) {\n      if (typeof data[key] !== 'undefined' && data[key] !== null) {\n        if (key === 'message_index') {\n          if (parseToNumber(data[key]) !== null) {\n            result[Client.supportedPushDataFields[key]] = Number(data[key]);\n          }\n        } else {\n          result[Client.supportedPushDataFields[key]] = data[key];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Static method for push notification payload parsing. Returns parsed push as a {@link PushNotification} object.\n   * @param notificationPayload Push notification payload.\n   */\n  @validateTypes(pureObject)\n  public static parsePushNotification(notificationPayload): PushNotification {\n    log.debug('parsePushNotification, notificationPayload=', notificationPayload);\n\n    // APNS specifics\n    if (typeof notificationPayload.aps !== 'undefined') {\n      if (!notificationPayload.twi_message_type) {\n        throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n      }\n\n      let data = Client.parsePushNotificationChatData(notificationPayload);\n\n      let apsPayload = notificationPayload.aps;\n      let body: string = null;\n      let title: string = null;\n      if (typeof apsPayload.alert === 'string') {\n        body = apsPayload.alert || null;\n      } else {\n        body = apsPayload.alert.body || null;\n        title = apsPayload.alert.title || null;\n      }\n\n      return new PushNotification({\n        title: title,\n        body: body,\n        sound: apsPayload.sound || null,\n        badge: apsPayload.badge || null,\n        action: apsPayload.category || null,\n        type: notificationPayload.twi_message_type,\n        data: data\n      });\n    }\n\n    // FCM specifics\n    if (typeof notificationPayload.data !== 'undefined') {\n      let dataPayload = notificationPayload.data;\n      if (!dataPayload.twi_message_type) {\n        throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n      }\n\n      let data = Client.parsePushNotificationChatData(notificationPayload.data);\n      return new PushNotification({\n        title: dataPayload.twi_title || null,\n        body: dataPayload.twi_body || null,\n        sound: dataPayload.twi_sound || null,\n        badge: null,\n        action: dataPayload.twi_action || null,\n        type: dataPayload.twi_message_type,\n        data: data\n      });\n    }\n\n    throw new Error('Provided push notification payload is not Programmable Chat notification');\n  }\n\n  public parsePushNotification = Client.parsePushNotification;\n\n  /**\n   * Handle push notification payload parsing and emit the {@link Client.pushNotification} event on this {@link Client} instance.\n   * @param notificationPayload Push notification payload\n   */\n  @validateTypesAsync(pureObject)\n  public async handlePushNotification(notificationPayload): Promise<void> {\n    await this._ensureReady;\n    log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n    this.emit('pushNotification', Client.parsePushNotification(notificationPayload));\n  }\n\n  /**\n   * Gets a user with the given identity. If it's in the subscribed list, then return the user object from it;\n   * if not, then subscribe and add user to the subscribed list.\n   * @param identity Identity of the user.\n   * @returns A fully initialized user.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getUser(identity: string): Promise<User> {\n    await this._ensureReady;\n    return await this.services.users.getUser(identity);\n  }\n\n  /**\n   * Gets the user descriptor for given identity.\n   * @param identity Identity of the user.\n   * @returns The user descriptor.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getUserDescriptor(identity: string): Promise<UserDescriptor> {\n    await this._ensureReady;\n    return await this.services.users.getUserDescriptor(identity);\n  }\n\n  /**\n   * Get a list of subscribed user objects.\n   */\n  public async getSubscribedUsers(): Promise<Array<User>> {\n    await this._ensureReady;\n    return await this.services.users.getSubscribedUsers();\n  }\n}\n\nexport {\n  Client,\n  ConnectionState,\n  NotificationsChannelType,\n  LogLevel,\n  ClientOptions,\n  CreateChannelOptions,\n  ChannelSortingCriteria,\n  ChannelSortingOrder,\n  ChannelSortingOptions,\n  State\n};\n"]},"metadata":{},"sourceType":"script"}