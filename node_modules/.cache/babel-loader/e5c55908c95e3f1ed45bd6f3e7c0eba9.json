{"ast":null,"code":"/*\n@license\nCopyright (c) 2021 Twilio Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');\nvar _classCallCheck = require('@babel/runtime/helpers/classCallCheck');\nvar _createClass = require('@babel/runtime/helpers/createClass');\nvar _assertThisInitialized = require('@babel/runtime/helpers/assertThisInitialized');\nvar _get = require('@babel/runtime/helpers/get');\nvar _inherits = require('@babel/runtime/helpers/inherits');\nvar _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');\nvar _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');\nvar _defineProperty = require('@babel/runtime/helpers/defineProperty');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);\nvar _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);\nvar _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);\nvar _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);\nvar _get__default = /*#__PURE__*/_interopDefaultLegacy(_get);\nvar _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);\nvar _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);\nvar _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);\nvar _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);\nvar domain;\n\n// This constructor is used to store event handlers. Instantiating this is\n// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n// object (tested with v8 v4.9).\nfunction EventHandlers() {}\nEventHandlers.prototype = Object.create(null);\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\n\n// nodejs oddity\n// require('events') === require('events').EventEmitter\nEventEmitter.EventEmitter = EventEmitter;\nEventEmitter.usingDomains = false;\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\nEventEmitter.init = function () {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    if (domain.active) ;\n  }\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n  }\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn) handler.call(self);else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i) listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn) handler.call(self, arg1);else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i) listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn) handler.call(self, arg1, arg2);else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn) handler.call(self, arg1, arg2, arg3);else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn) handler.apply(self, args);else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i) listeners[i].apply(self, args);\n  }\n}\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events, domain;\n  var doError = type === 'error';\n  events = this._events;\n  if (events) doError = doError && events.error == null;else if (!doError) return false;\n  domain = this.domain;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    er = arguments[1];\n    if (domain) {\n      if (!er) er = new Error('Uncaught, unspecified \"error\" event');\n      er.domainEmitter = this;\n      er.domain = domain;\n      er.domainThrown = false;\n      domain.emit('error', er);\n    } else if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n  handler = events[type];\n  if (!handler) return false;\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n    // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n    // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++) args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n  return true;\n};\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n  if (typeof listener !== 'function') throw new TypeError('\"listener\" argument must be a function');\n  events = target._events;\n  if (!events) {\n    events = target._events = new EventHandlers();\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type, listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + type + ' listeners added. ' + 'Use emitter.setMaxListeners() to increase limit');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        emitWarning(w);\n      }\n    }\n  }\n  return target;\n}\nfunction emitWarning(e) {\n  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\nEventEmitter.prototype.prependListener = function prependListener(type, listener) {\n  return _addListener(this, type, listener, true);\n};\nfunction _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\nEventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n  if (typeof listener !== 'function') throw new TypeError('\"listener\" argument must be a function');\n  this.prependListener(type, _onceWrap(this, type, listener));\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function removeListener(type, listener) {\n  var list, events, position, i, originalListener;\n  if (typeof listener !== 'function') throw new TypeError('\"listener\" argument must be a function');\n  events = this._events;\n  if (!events) return this;\n  list = events[type];\n  if (!list) return this;\n  if (list === listener || list.listener && list.listener === listener) {\n    if (--this._eventsCount === 0) this._events = new EventHandlers();else {\n      delete events[type];\n      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);\n    }\n  } else if (typeof list !== 'function') {\n    position = -1;\n    for (i = list.length; i-- > 0;) {\n      if (list[i] === listener || list[i].listener && list[i].listener === listener) {\n        originalListener = list[i].listener;\n        position = i;\n        break;\n      }\n    }\n    if (position < 0) return this;\n    if (list.length === 1) {\n      list[0] = undefined;\n      if (--this._eventsCount === 0) {\n        this._events = new EventHandlers();\n        return this;\n      } else {\n        delete events[type];\n      }\n    } else {\n      spliceOne(list, position);\n    }\n    if (events.removeListener) this.emit('removeListener', type, originalListener || listener);\n  }\n  return this;\n};\n\n// Alias for removeListener added in NodeJS 10.0\n// https://nodejs.org/api/events.html#events_emitter_off_eventname_listener\nEventEmitter.prototype.off = function (type, listener) {\n  return this.removeListener(type, listener);\n};\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n  var listeners, events;\n  events = this._events;\n  if (!events) return this;\n\n  // not listening for removeListener, no need to emit\n  if (!events.removeListener) {\n    if (arguments.length === 0) {\n      this._events = new EventHandlers();\n      this._eventsCount = 0;\n    } else if (events[type]) {\n      if (--this._eventsCount === 0) this._events = new EventHandlers();else delete events[type];\n    }\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    var keys = Object.keys(events);\n    for (var i = 0, key; i < keys.length; ++i) {\n      key = keys[i];\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n    return this;\n  }\n  listeners = events[type];\n  if (typeof listeners === 'function') {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    do {\n      this.removeListener(type, listeners[listeners.length - 1]);\n    } while (listeners[0]);\n  }\n  return this;\n};\nEventEmitter.prototype.listeners = function listeners(type) {\n  var evlistener;\n  var ret;\n  var events = this._events;\n  if (!events) ret = [];else {\n    evlistener = events[type];\n    if (!evlistener) ret = [];else if (typeof evlistener === 'function') ret = [evlistener.listener || evlistener];else ret = unwrapListeners(evlistener);\n  }\n  return ret;\n};\nEventEmitter.listenerCount = function (emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n  if (events) {\n    var evlistener = events[type];\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n  return 0;\n}\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) list[i] = list[k];\n  list.pop();\n}\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--) copy[i] = arr[i];\n  return copy;\n}\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf__default['default'](Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf__default['default'](this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn__default['default'](this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar ReplayEventEmitter = /*#__PURE__*/function (_EventEmitter) {\n  _inherits__default['default'](ReplayEventEmitter, _EventEmitter);\n  var _super = _createSuper(ReplayEventEmitter);\n  function ReplayEventEmitter() {\n    var _this;\n    _classCallCheck__default['default'](this, ReplayEventEmitter);\n    _this = _super.call(this);\n    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), \"eventHistory\", new Map());\n    return _this;\n  }\n  _createClass__default['default'](ReplayEventEmitter, [{\n    key: \"on\",\n    value: function on(event, listener) {\n      return _get__default['default'](_getPrototypeOf__default['default'](ReplayEventEmitter.prototype), \"on\", this).call(this, event, listener);\n    }\n  }, {\n    key: \"once\",\n    value: function once(event, listener) {\n      return _get__default['default'](_getPrototypeOf__default['default'](ReplayEventEmitter.prototype), \"once\", this).call(this, event, listener);\n    }\n  }, {\n    key: \"off\",\n    value: function off(event, listener) {\n      return _get__default['default'](_getPrototypeOf__default['default'](ReplayEventEmitter.prototype), \"off\", this).call(this, event, listener);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var _get2;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      this.eventHistory.set(event, args);\n      return (_get2 = _get__default['default'](_getPrototypeOf__default['default'](ReplayEventEmitter.prototype), \"emit\", this)).call.apply(_get2, [this, event].concat(args));\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(event, listener) {\n      return _get__default['default'](_getPrototypeOf__default['default'](ReplayEventEmitter.prototype), \"addListener\", this).call(this, event, listener);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(event, listener) {\n      return _get__default['default'](_getPrototypeOf__default['default'](ReplayEventEmitter.prototype), \"removeListener\", this).call(this, event, listener);\n    }\n  }, {\n    key: \"addListenerWithReplay\",\n    value: function addListenerWithReplay(event, listener) {\n      var historyEntry = this.eventHistory.get(event);\n      if (historyEntry !== undefined) {\n        listener.apply(void 0, _toConsumableArray__default['default'](historyEntry));\n      }\n      return this.addListener(event, listener);\n    }\n  }, {\n    key: \"onWithReplay\",\n    value: function onWithReplay(event, listener) {\n      return this.addListenerWithReplay(event, listener);\n    }\n  }]);\n  return ReplayEventEmitter;\n}(EventEmitter);\nexports.ReplayEventEmitter = ReplayEventEmitter;","map":{"version":3,"sources":["../src/replay-event-emitter.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { EventEmitter } from \"events\";\n\nexport class ReplayEventEmitter<\n  Events extends Record<string | symbol, (...args: any[]) => void>\n> extends EventEmitter {\n  private eventHistory: Map<string | symbol, any[]> = new Map();\n\n  public constructor() {\n    super();\n  }\n\n  public on<E extends Extract<keyof Events, string>>(\n    event: E,\n    listener: Events[E]\n  ): this {\n    return super.on(event, listener);\n  }\n\n  public once<E extends Extract<keyof Events, string>>(\n    event: E,\n    listener: Events[E]\n  ): this {\n    return super.once(event, listener);\n  }\n\n  public off<E extends Extract<keyof Events, string>>(\n    event: E,\n    listener: Events[E]\n  ): this {\n    return super.off(event, listener);\n  }\n\n  public emit<E extends Extract<keyof Events, string>>(\n    event: E,\n    ...args: Parameters<Events[E]>\n  ): boolean {\n    this.eventHistory.set(event, args);\n\n    return super.emit(event, ...args);\n  }\n\n  public addListener<E extends Extract<keyof Events, string>>(\n    event: E,\n    listener: Events[E]\n  ): this {\n    return super.addListener(event, listener);\n  }\n\n  public removeListener<E extends Extract<keyof Events, string>>(\n    event: E,\n    listener: Events[E]\n  ): this {\n    return super.removeListener(event, listener);\n  }\n\n  public addListenerWithReplay<E extends Extract<keyof Events, string>>(\n    event: E,\n    listener: Events[E]\n  ): this {\n    const historyEntry = this.eventHistory.get(event);\n\n    if (historyEntry !== undefined) {\n      listener(...historyEntry);\n    }\n\n    return this.addListener(event, listener);\n  }\n\n  public onWithReplay<E extends Extract<keyof Events, string>>(\n    event: E,\n    listener: Events[E]\n  ): this {\n    return this.addListenerWithReplay(event, listener);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}